/*******************************************************************************
* Copyright (c) 2006, 2010 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package nodamushi.internal.cdt.parser.sdcc;

public class SDCCNoCastExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, SDCCNoCastExpressionParsersym {
    public final static int ERROR_SYMBOL = 67;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 50;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 51;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 38;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 226;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 117;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 2665;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 2;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 481;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 143;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 260;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 1951;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 102;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 102;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 2081;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 2184;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = true;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return SDCCNoCastExpressionParsersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,1,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,1,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,1,0,0,0,0,0,0,0,
            1,0,0,0,0,0,0,1,0,0,
            0,0,0,0,0,0,0,0,0,1,
            0,0,0,1,0,0,0,0,0,0,
            0,0,0,0,1,1,1,0,1,0,
            0,0,1,0,0,0,0,0,0,0,
            1,0,0,0,0,0,0,0,0,0,
            0,0,1,0,0,0,0,0,1,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static char prosthesesIndex[] = {0,
            9,10,11,12,14,20,21,22,23,24,
            3,25,26,27,28,29,30,31,32,33,
            6,58,87,127,128,129,5,49,95,103,
            37,56,57,59,70,35,88,90,91,92,
            93,94,96,131,7,13,79,108,109,110,
            111,18,69,89,105,112,61,71,97,102,
            104,107,17,19,62,63,64,65,68,72,
            76,78,86,8,16,36,51,52,53,54,
            55,60,74,77,81,82,84,85,101,115,
            130,133,134,135,136,138,2,15,73,75,
            80,83,99,106,113,114,116,117,118,119,
            132,137,1,4,34,38,39,40,41,42,
            43,44,45,46,47,48,50,66,67,98,
            100,120,121,122,123,124,125,126,139,140,
            141,142,143
        };
    };
    public final static char prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,3,1,
            1,4,4,3,3,2,2,4,1,0,
            1,1,2,2,2,2,2,2,2,2,
            2,4,1,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,4,3,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,2,5,9,
            8,3,2,2,2,3,2,4,2,2,
            2,2,2,1,1,1,1,2,1,2,
            2,2,1,2,2,1,2,2,1,2,
            2,1,2,2,1,3,1,3,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,6,
            8,0,0,1,1,3,3,3,0,1,
            0,1,2,4,2,1,1,1,3,1,
            1,2,3,7,8,0,1,0,1,3,
            1,3,1,1,1,1,1,1,3,1,
            1,1,1,1,3,1,2,2,1,5,
            3,1,3,5,1,3,1,3,2,4,
            3,5,4,6,6,3,5,1,3,4,
            5,6,0,1,2,1,3,1,1,3,
            2,1,1,1,1,2,1,2,3,1,
            1,1,3,1,2,2,2,3,4,5,
            1,1,7,3,0,0,1,1,3,3,
            4,1,1,2,3,2,3,2,1,0,
            1,2,1,1,1,1,1,2,1,3,
            6,4,2,4,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,4,2,1,1,5,3,3,1,2,
            1,1,1,1,1,1,1,4,2,4,
            2,1,1,1,3,5,1,3,1,1,
            1,2,5,3,1,2,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,-32,0,0,0,0,0,0,0,0,
            0,0,-2,0,0,0,0,0,0,0,
            0,0,-4,0,0,0,0,0,-117,0,
            -15,-72,-16,0,0,0,0,-70,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-68,-104,-160,0,-105,0,0,0,0,
            -17,0,-118,0,-119,0,0,0,0,0,
            0,0,0,0,-116,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-6,0,0,0,0,0,
            0,0,0,0,0,0,-18,0,0,-19,
            0,-37,0,0,0,0,0,0,0,0,
            0,0,-52,0,0,0,0,0,0,0,
            0,0,0,-69,0,0,0,0,-141,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-165,
            0,0,0,0,-73,0,-179,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-82,-79,
            0,-20,-87,0,0,-186,-54,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-133,0,-120,0,0,0,
            -124,-115,0,-29,-30,-169,-121,0,0,-67,
            -153,0,0,-33,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-150,0,0,
            0,-21,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-34,0,0,
            0,0,0,-80,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-199,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-3,0,
            0,0,0,0,0,0,0,0,0,-86,
            0,0,0,0,0,0,0,0,0,-46,
            0,0,0,0,0,0,0,0,0,0,
            0,-22,0,0,0,-75,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-55,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-23,-123,0,-109,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-129,0,0,0,
            0,0,0,0,0,0,0,-24,0,0,
            0,0,0,0,0,0,0,-113,0,-181,
            0,-201,0,0,-25,-26,0,-27,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-56,0,
            0,0,0,0,0,0,0,0,0,-131,
            0,0,0,0,0,0,0,0,0,-57,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -58,0,0,0,0,0,0,0,0,0,
            0,-136,0,0,0,0,0,0,0,0,
            0,-59,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-60,0,0,0,0,0,0,0,
            0,0,0,-154,0,0,0,0,0,0,
            0,0,0,-61,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-62,0,0,0,0,0,
            0,0,0,0,0,-166,0,0,0,0,
            0,0,0,0,0,-63,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-64,0,0,0,
            0,0,0,0,0,0,0,-207,0,0,
            0,0,0,0,0,0,0,-65,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-66,0,
            0,0,0,0,0,0,0,0,0,-208,
            0,0,0,0,0,0,0,0,0,-122,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -144,0,0,0,0,0,0,0,0,0,
            0,-217,0,0,0,0,0,0,0,0,
            0,-145,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-182,0,0,0,0,0,0,0,
            0,0,0,-85,0,0,0,0,0,0,
            0,0,-196,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-202,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-204,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-205,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-211,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-223,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-84,0,-132,-112,0,0,0,0,
            0,0,0,0,-88,0,-7,0,0,0,
            0,0,0,0,0,0,0,0,0,-197,
            0,-77,0,0,0,0,0,0,-110,-89,
            -159,0,0,0,0,0,0,0,0,-90,
            -149,-76,0,0,0,0,-91,0,-92,0,
            0,0,-93,-137,-219,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-128,0,
            -126,-142,-146,0,0,0,0,0,0,0,
            0,0,0,0,0,-193,-138,-163,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-51,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-222,
            0,-94,0,0,0,0,0,0,0,0,
            0,-5,0,0,0,0,0,0,0,-48,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-140,-95,0,0,0,0,
            0,0,0,0,-96,0,0,-97,-98,-151,
            0,0,0,-49,0,0,0,0,0,0,
            0,0,0,0,-74,0,0,-50,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -143,-148,-157,-161,0,0,0,0,0,0,
            0,0,0,0,0,-99,0,0,0,0,
            -42,0,0,0,0,0,0,0,0,0,
            0,-47,0,0,0,0,0,0,0,0,
            0,0,0,-43,0,0,0,0,0,0,
            0,0,0,0,-44,0,0,0,0,0,
            0,0,0,0,0,-45,0,0,0,0,
            0,0,0,0,0,0,-213,-78,-38,0,
            0,0,0,0,0,0,0,0,-8,0,
            0,0,0,0,0,0,-152,-164,-187,0,
            0,0,0,0,-100,-101,-102,-171,-81,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-224,-83,-103,0,-170,0,-188,-168,0,
            0,0,0,0,0,-106,0,-108,-125,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-198,0,0,0,0,0,0,
            0,0,0,0,0,0,-71,-147,0,0,
            0,0,0,0,0,-178,-183,0,-9,0,
            0,0,0,0,0,0,-134,0,-139,-107,
            -155,-158,0,0,0,0,-10,0,0,0,
            0,0,0,0,-11,0,0,0,0,0,
            0,0,-31,-172,0,0,0,0,0,0,
            0,-175,0,0,0,-194,-176,-177,0,-39,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-40,0,0,0,0,0,0,0,
            -41,0,0,0,0,0,0,0,-111,0,
            0,0,0,0,0,-114,-12,0,0,0,
            0,0,0,-218,0,-127,0,-167,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -180,-214,-195,0,0,0,-200,0,0,0,
            0,0,-226,-189,-206,0,-14,0,-13,0,
            0,0,0,0,0,0,-156,0,0,0,
            0,0,-36,0,0,0,0,0,-191,-28,
            -35,0,0,0,0,0,0,0,0,0,
            0,0,0,-190,0,0,-212,0,-162,-220,
            -1,-221,0,0,0,-184,0,0,0,-209,
            -215,0,0,0,0,0,0,-210,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-192,0,-135,-225,0,0,0,0,
            -174,0,0,0,-130,0,0,0,0,0,
            0,-185,-173,0,0,0,0,0,0,0,
            0,-203,0,0,0,0,0,0,0,0,
            0,-53,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-216,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            97,11,114,27,27,21,21,45,45,74,
            74,1,1,2,2,2,2,3,3,3,
            4,5,5,5,5,5,5,5,5,64,
            64,75,6,6,6,6,6,6,6,6,
            6,6,6,7,8,8,8,8,9,9,
            9,10,10,10,12,12,12,12,12,13,
            13,13,14,14,15,15,16,16,17,17,
            18,18,19,19,20,20,20,20,20,20,
            20,20,20,20,20,20,115,46,36,98,
            98,76,76,31,116,116,116,116,116,116,
            116,117,117,117,118,118,123,123,124,124,
            119,119,120,120,120,126,126,121,121,121,
            121,121,122,122,122,122,122,125,125,28,
            28,28,28,28,32,32,32,82,82,77,
            77,77,77,78,78,78,79,79,79,80,
            80,80,81,81,81,127,127,128,128,129,
            33,35,35,35,35,35,57,58,58,58,
            58,58,58,58,58,58,58,58,58,68,
            65,65,99,100,70,70,66,66,66,71,
            83,83,84,84,72,72,72,47,101,101,
            85,86,86,86,67,67,102,87,87,88,
            88,73,73,22,23,23,23,34,53,53,
            37,37,37,37,40,40,42,38,38,39,
            43,43,130,130,41,131,131,103,103,29,
            29,29,29,29,29,29,29,29,89,54,
            54,54,54,30,60,60,59,59,59,61,
            61,55,55,104,104,63,63,62,62,62,
            48,48,48,49,50,50,50,51,51,51,
            51,69,69,52,52,56,106,105,105,105,
            105,90,107,108,108,109,109,110,110,132,
            132,133,133,134,134,134,134,136,136,135,
            135,135,137,138,138,97,97,22,22,22,
            24,24,24,24,24,24,24,58,58,58,
            58,58,25,25,91,26,44,44,43,111,
            111,92,92,92,92,92,92,92,93,93,
            93,93,93,93,95,94,94,112,112,96,
            116,116,139,140,140,141,141,142,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,1,1264,17,21,18,511,936,44,
            551,513,600,208,597,752,682,883,842,935,
            918,74,91,276,135,213,317,318,319,64,
            1454,483,322,250,137,134,136,160,395,20,
            17,21,18,511,936,44,551,513,600,1859,
            597,752,682,883,842,935,918,74,1429,139,
            166,275,356,731,786,239,75,143,146,149,
            152,463,1422,320,187,320,186,884,503,1585,
            1442,1678,1709,1723,1393,909,20,17,21,18,
            511,43,44,551,513,600,482,597,752,682,
            883,842,935,918,93,777,20,17,21,18,
            511,43,40,197,28,28,334,439,1736,1736,
            74,87,777,20,17,21,18,511,43,44,
            1405,715,1813,777,20,17,21,18,511,43,
            44,551,513,600,253,597,752,1705,714,709,
            20,17,21,18,511,936,44,551,513,600,
            544,597,752,682,883,842,935,918,74,281,
            69,1891,1777,293,1738,404,1012,469,20,17,
            21,18,511,936,44,551,513,600,544,597,
            752,682,883,842,935,918,74,281,1790,594,
            440,282,196,187,276,1736,130,777,20,17,
            21,18,511,43,44,551,513,600,287,597,
            752,682,883,842,1707,245,179,655,1789,282,
            22,75,760,1736,475,475,272,320,188,288,
            475,829,629,1985,320,31,289,135,213,317,
            318,319,705,278,1431,542,19,137,134,136,
            160,543,339,341,347,274,1739,290,830,1395,
            717,553,70,219,748,221,1570,223,224,229,
            1602,686,139,166,269,655,512,272,320,31,
            143,146,149,152,464,1422,260,228,340,341,
            347,707,1585,1442,1678,1709,1723,1393,744,20,
            17,21,18,511,936,44,551,513,600,25,
            597,752,682,883,842,935,918,74,281,777,
            20,17,21,18,511,936,44,551,513,600,
            475,597,752,682,883,842,935,918,74,91,
            777,20,17,21,18,511,43,44,551,1522,
            282,23,191,24,1736,555,843,20,17,21,
            18,511,43,44,551,513,600,291,597,752,
            682,883,842,935,918,93,777,20,17,21,
            18,511,43,44,551,513,600,334,597,752,
            682,883,1724,53,531,503,876,20,17,21,
            18,511,936,44,551,513,600,1876,597,752,
            682,883,842,935,918,74,1469,430,20,17,
            21,18,511,936,44,551,513,600,35,597,
            752,682,883,842,935,918,74,1473,475,284,
            320,296,320,298,240,197,942,333,777,20,
            17,21,18,511,936,44,551,513,600,273,
            597,752,682,883,842,935,918,74,92,777,
            20,17,21,18,511,936,44,551,513,600,
            475,597,752,682,883,842,935,918,74,85,
            777,20,17,21,18,511,936,44,551,513,
            600,279,597,752,682,883,842,935,918,74,
            84,777,20,17,21,18,511,936,44,551,
            513,600,475,597,752,682,883,842,935,918,
            74,83,777,20,17,21,18,511,936,44,
            551,513,600,332,597,752,682,883,842,935,
            918,74,82,777,20,17,21,18,511,936,
            44,551,513,600,475,597,752,682,883,842,
            935,918,74,81,777,20,17,21,18,511,
            936,44,551,513,600,280,597,752,682,883,
            842,935,918,74,80,777,20,17,21,18,
            511,936,44,551,513,600,475,597,752,682,
            883,842,935,918,74,79,777,20,17,21,
            18,511,936,44,551,513,600,225,597,752,
            682,883,842,935,918,74,78,777,20,17,
            21,18,511,936,44,551,513,600,475,597,
            752,682,883,842,935,918,74,77,777,20,
            17,21,18,511,936,44,551,513,600,1950,
            597,752,682,883,842,935,918,74,76,777,
            20,17,21,18,511,936,44,551,513,600,
            657,597,752,682,883,842,935,918,74,75,
            777,20,17,21,18,511,936,44,551,513,
            600,234,597,752,682,883,842,935,918,74,
            73,777,20,17,21,18,511,936,44,551,
            513,600,475,597,752,682,883,842,935,918,
            74,1488,777,20,17,21,18,511,936,44,
            551,513,600,350,597,752,682,883,842,935,
            918,74,1698,777,20,17,21,18,511,43,
            44,551,513,600,355,597,752,682,883,842,
            935,918,93,777,20,17,21,18,511,43,
            44,551,513,600,1897,597,752,682,883,842,
            935,918,93,777,20,17,21,18,511,43,
            44,551,513,600,212,597,752,682,883,842,
            935,918,93,777,20,17,21,18,511,43,
            44,551,513,600,2043,597,752,682,883,842,
            935,918,93,777,20,17,21,18,511,43,
            44,551,513,600,1222,597,752,682,883,842,
            935,918,93,777,20,17,21,18,511,43,
            44,551,513,600,1874,597,752,682,883,842,
            935,918,93,777,20,17,21,18,511,43,
            44,551,513,600,202,597,752,682,883,842,
            935,918,93,245,179,89,641,20,17,21,
            18,511,43,36,203,564,1697,777,20,17,
            21,18,511,43,39,135,213,317,318,319,
            320,1827,279,246,274,138,134,136,160,187,
            658,770,218,748,221,1570,223,224,229,1602,
            186,325,508,267,655,512,272,207,263,367,
            140,166,1878,542,363,6,241,264,144,147,
            150,153,277,1422,135,213,317,318,319,187,
            274,253,253,187,145,134,136,160,218,748,
            221,1570,223,224,229,1602,85,75,187,267,
            655,512,272,210,1096,1776,243,1892,1917,261,
            242,1601,1604,928,777,20,17,21,18,511,
            43,44,551,513,600,244,597,752,682,1616,
            85,509,667,218,748,221,1570,223,224,229,
            1602,1892,810,20,17,21,18,511,41,1947,
            777,20,17,21,18,511,43,44,551,513,
            600,357,597,1565,1791,75,742,218,748,221,
            1570,223,224,229,1602,682,1792,1986,624,652,
            514,198,200,1947,777,20,17,21,18,511,
            43,44,551,513,600,297,1568,1968,777,20,
            17,21,18,511,43,44,551,513,600,227,
            1569,382,75,75,445,199,200,135,213,317,
            318,319,1949,650,1991,1956,504,142,134,136,
            160,777,20,17,21,18,511,43,44,551,
            513,1440,777,20,17,21,18,511,43,44,
            551,1556,141,166,777,20,17,21,18,511,
            43,44,551,513,1447,777,20,17,21,18,
            511,43,44,551,513,1449,777,20,17,21,
            18,511,43,44,551,513,1453,378,539,777,
            20,17,21,18,511,43,44,1430,1892,777,
            20,17,21,18,511,43,38,253,187,503,
            135,213,317,318,319,349,798,329,531,570,
            148,134,136,160,218,748,221,1570,223,224,
            229,1602,824,601,568,245,75,1738,819,760,
            1096,135,213,317,318,319,827,1983,31,93,
            1929,151,134,136,160,135,213,317,318,319,
            1944,716,1739,180,405,154,134,136,160,219,
            748,221,1570,223,224,229,1602,535,641,20,
            17,21,18,511,43,36,531,791,1866,777,
            20,17,21,18,511,43,37,368,277,828,
            484,832,762,1827,351,247,274,777,20,17,
            21,18,511,43,36,777,20,17,21,18,
            511,43,35,411,782,267,655,512,272,274,
            1739,1754,816,349,624,1486,816,538,820,928,
            777,20,17,21,18,511,43,47,269,655,
            512,272,274,777,20,17,21,18,511,43,
            46,777,20,17,21,18,511,43,45,935,
            283,267,655,512,272,209,488,777,20,17,
            21,18,511,34,475,266,935,705,488,1822,
            1828,254,213,317,318,319,1893,294,195,705,
            1961,807,253,531,1395,348,1738,187,254,213,
            317,318,319,6,863,760,1395,75,1738,777,
            20,17,21,18,511,33,1455,62,482,1995,
            1790,259,1738,75,295,970,355,1787,705,562,
            75,730,716,259,809,197,1995,970,204,1787,
            705,482,809,87,566,197,1722,852,907,935,
            597,676,650,715,1813,2184,935,1395,197,87,
            531,531,809,2184,1814,1211,87,89,687,683,
            714,254,213,317,318,319,715,1813,254,213,
            317,318,319,184,259,719,681,87,1138,192,
            1787,762,1827,720,705,958,705,315,2184,358,
            1708,2003,981,123,2184,181,205,356,2184,2002,
            2184,197,1004,1395,705,2184,2012,255,213,317,
            318,319,75,2184,255,213,317,318,319,820,
            1814,197,1180,809,255,213,317,318,319,2184,
            259,2184,194,187,1054,2184,1787,2184,493,2184,
            1814,2184,2184,2184,2184,192,2184,2184,87,2184,
            2184,2184,2184,2184,209,2184,1960,2003,1706,2184,
            297,2184,2184,2184,2184,193,2184,2184,1826,1828,
            2184,0,2211,32,0,2210,32,0,1931,32,
            0,1923,32,0,602,51,0,1679,51,0,
            1851,48,0,1540,64,0,20,179,0,1851,
            50,0,1851,49,0,602,53,0,1679,53,
            0,602,52,0,1679,52,0,1540,65,0,
            1,1532,0,1,585,0,1,1407,0,1,
            1689,0,1,1779,0,1,1797,0,1,1805,
            0,1,1867,0,1,1909,0,1,2196,0,
            1,2195,0,1,2200,0,1,2199,0,1,
            2198,0,1,2197,0,1,1907,0,1,2410,
            0,1,2421,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,1,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            0,31,32,3,0,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,0,53,54,55,56,57,58,59,
            60,0,1,0,1,4,5,4,0,0,
            9,10,11,0,0,14,15,16,17,18,
            19,20,21,22,0,1,2,26,0,1,
            2,3,0,30,6,3,35,36,37,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,0,1,90,91,4,5,67,0,
            78,9,10,11,61,62,14,15,16,17,
            18,19,20,21,22,76,77,63,26,81,
            82,83,84,85,86,87,88,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,0,1,0,0,4,5,67,
            0,5,9,10,11,0,0,14,15,16,
            17,18,19,20,21,22,0,0,13,26,
            81,82,83,84,85,86,87,88,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,0,1,61,62,4,0,
            67,65,0,9,10,11,7,8,14,15,
            16,17,18,19,20,21,22,61,62,79,
            26,0,1,2,3,0,80,6,0,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,0,53,54,55,
            56,57,58,59,60,9,10,11,33,102,
            14,15,16,17,18,19,20,21,22,0,
            1,0,26,4,0,1,2,6,0,5,
            6,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,0,53,
            54,55,56,57,0,0,2,3,34,5,
            6,13,0,9,10,11,0,0,14,15,
            16,17,18,19,20,21,22,0,1,2,
            26,0,1,2,3,30,5,6,34,35,
            36,37,38,39,0,1,2,3,4,5,
            33,7,8,0,0,2,12,13,80,6,
            0,0,2,3,33,34,6,23,24,25,
            26,27,28,29,0,31,32,61,62,0,
            1,2,3,4,5,0,7,8,0,0,
            1,12,13,4,0,1,2,3,0,5,
            6,0,23,24,25,26,27,28,29,65,
            31,32,0,0,1,3,0,4,0,1,
            2,3,4,5,0,7,8,33,34,5,
            12,13,0,0,2,2,3,0,6,6,
            3,23,24,25,65,27,28,29,30,31,
            32,0,0,0,2,23,24,0,34,71,
            72,73,74,0,12,2,9,10,11,6,
            52,14,15,16,17,18,19,20,21,22,
            0,69,70,26,0,5,2,0,0,5,
            6,0,35,36,37,38,39,9,10,11,
            68,64,14,15,16,17,18,19,20,21,
            22,0,1,0,26,0,3,0,34,0,
            5,89,0,35,36,37,38,39,9,10,
            11,78,52,14,15,16,17,18,19,20,
            21,22,0,0,1,26,0,4,33,34,
            0,5,61,62,35,36,37,38,39,9,
            10,11,75,0,14,15,16,17,18,19,
            20,21,22,0,0,64,26,0,63,33,
            34,66,69,70,0,35,36,37,38,39,
            0,1,2,3,4,5,79,7,8,0,
            1,0,12,13,0,1,0,0,4,63,
            3,5,66,23,24,25,0,27,28,29,
            0,31,32,7,8,0,1,2,3,4,
            0,0,7,8,30,5,0,12,13,33,
            34,5,0,0,71,72,73,74,23,24,
            25,0,27,28,29,65,31,32,0,1,
            2,3,4,33,34,7,8,0,0,33,
            12,13,71,72,73,74,69,70,0,0,
            0,23,24,25,5,27,28,29,30,31,
            32,0,67,0,1,2,3,4,7,8,
            7,8,66,0,0,12,13,76,77,0,
            30,0,1,34,5,4,23,24,25,0,
            27,28,29,30,31,32,0,1,2,3,
            4,0,64,7,8,0,5,0,12,13,
            0,6,5,34,0,1,6,0,4,23,
            24,25,33,27,28,29,0,31,32,0,
            1,2,3,4,0,0,7,8,0,0,
            2,12,13,0,1,2,0,0,0,0,
            12,0,23,24,25,6,27,28,29,52,
            31,32,0,1,2,3,4,66,33,7,
            8,0,33,68,12,13,30,30,68,0,
            63,30,0,0,2,23,24,25,0,27,
            28,29,0,31,32,0,1,2,3,4,
            0,75,7,8,0,0,0,12,13,30,
            0,0,64,30,0,0,0,0,23,24,
            25,0,27,28,29,0,31,32,0,1,
            2,3,4,0,63,7,8,0,0,0,
            12,13,0,0,30,0,0,0,0,0,
            0,23,24,25,0,27,28,29,0,31,
            32,0,0,9,10,11,0,0,14,15,
            16,17,18,19,20,21,22,0,0,0,
            0,0,0,0,0,0,9,10,11,0,
            0,14,15,16,17,18,19,20,21,22,
            0,0,0,0,0,0,0,0,0,9,
            10,11,0,0,14,15,16,17,18,19,
            20,21,22,0,0,0,0,0,0,0,
            0,0,9,10,11,0,75,14,15,16,
            17,18,19,20,21,22,0,0,0,0,
            0,0,0,92,93,94,95,96,97,98,
            99,100,101,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            2184,2195,1907,1797,2196,2184,2543,1779,1689,2398,
            2399,2400,2197,1805,2504,2505,2506,2507,2508,2509,
            2510,846,2519,1909,1867,1532,2347,2198,2199,2200,
            2184,1407,585,1471,72,2348,2346,2401,2349,2345,
            2352,2357,2356,2354,2355,2353,2358,2359,2351,2360,
            2361,2362,66,2512,2513,2514,2515,2511,679,774,
            680,2184,1,2184,2195,1,191,2196,2184,62,
            1,1,1,54,1,1,1,1,1,1,
            1,1,1,1,1,2410,1677,1,262,2410,
            1441,1,2184,1487,518,1472,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,191,1,1,1,1,1,1,
            1,1,2184,1,687,2022,1,190,2380,338,
            613,1,1,1,830,1632,1,1,1,1,
            1,1,1,1,1,1588,1574,1353,1,1728,
            1699,2527,2526,2528,2530,2529,1904,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,190,1,1,1,1,1,
            1,1,1,2184,1,58,2184,1,191,2380,
            68,2188,1,1,1,64,70,1,1,1,
            1,1,1,1,1,1,57,2184,2103,1,
            1728,1699,2527,2526,2528,2530,2529,1904,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,191,1,1,1,1,
            1,1,1,1,2184,2195,830,1632,2196,51,
            2380,2187,253,2398,2399,2400,2097,2094,2504,2505,
            2506,2507,2508,2509,2510,846,2519,830,1632,1504,
            2347,268,2410,1441,253,88,866,518,182,2348,
            2346,2401,2349,2345,2352,2357,2356,2354,2355,2353,
            2358,2359,2351,2360,2361,2362,129,2512,2513,2514,
            2515,2511,679,774,680,2398,2399,2400,938,2081,
            2504,2505,2506,2507,2508,2509,2510,846,2519,2184,
            2195,271,2347,2196,1,2178,1441,518,71,2190,
            518,2348,2346,2401,2349,2345,2352,2357,2356,2354,
            2355,2353,2358,2359,2351,2360,2361,2362,65,2512,
            2513,2514,2515,2511,20,2184,2106,2106,2189,2106,
            2106,2127,183,179,179,179,56,256,179,179,
            179,179,179,179,179,179,179,1,2410,1677,
            179,1,249,249,249,3453,249,249,2106,179,
            179,179,179,179,1,2195,1907,1396,2196,2188,
            721,1779,1689,270,286,712,2197,1805,866,518,
            265,2184,1767,1,249,249,518,1909,1867,1532,
            886,2198,2199,2200,2184,1407,585,830,1632,2184,
            2195,1907,1768,2196,2188,2184,1779,1689,59,185,
            3525,2197,1805,3525,1,250,250,250,2184,250,
            250,2184,1909,1867,1532,1232,2198,2199,2200,2187,
            1407,585,48,184,3529,2100,2184,3529,1,2195,
            1907,1797,2196,29,2184,1779,1689,250,250,2190,
            2197,1805,32,268,2088,1767,253,1,2091,518,
            253,1909,1867,1532,2187,2198,2199,2200,3453,1407,
            585,2184,353,67,1313,2085,2082,130,2189,1666,
            1655,1644,1621,222,2538,1729,2398,2399,2400,518,
            29,2504,2505,2506,2507,2508,2509,2510,846,2519,
            2184,1843,1830,2347,1,2192,1767,211,131,2190,
            518,55,2348,2346,2401,2349,2345,2398,2399,2400,
            768,2442,2504,2505,2506,2507,2508,2509,2510,846,
            2519,1,2181,50,2347,337,2109,69,2189,132,
            231,724,2184,2348,2346,2401,2349,2345,2398,2399,
            2400,613,2191,2504,2505,2506,2507,2508,2509,2510,
            846,2519,2184,206,3560,2347,336,3560,231,231,
            133,230,830,1632,2348,2346,2401,2349,2345,2398,
            2399,2400,1273,2184,2504,2505,2506,2507,2508,2509,
            2510,846,2519,61,2184,2442,2347,2184,231,230,
            230,231,1843,1830,2184,2348,2346,2401,2349,2345,
            2184,2195,1907,1797,2196,2188,1504,1779,1689,2184,
            2422,60,2197,1805,2184,2195,2184,49,2196,230,
            2112,2190,230,1909,1867,1532,53,2198,2199,2200,
            2184,1407,585,2118,2115,2184,1,1,1,1,
            2184,63,1,1,1555,2190,2184,1,1,1952,
            2189,2194,2184,2184,1666,1655,1644,1621,1,1,
            1,2184,1,1,1,2187,1,1,1,2195,
            1907,1797,2196,1903,2189,1779,1689,2184,1,1520,
            2197,1805,1666,1655,1644,1621,1843,1830,2184,1,
            42,1909,1867,1532,90,2198,2199,2200,3453,1407,
            585,52,2500,2184,2195,1907,1797,2196,2124,2121,
            1779,1689,2193,2184,2184,2197,1805,1588,1574,1,
            3453,208,2195,90,2190,2196,1909,1867,1532,30,
            2198,2199,2200,3453,1407,585,2184,2195,1907,1797,
            2196,1,2442,1779,1689,2184,2194,285,2197,1805,
            292,1253,546,2189,207,1420,1293,2184,1420,1909,
            1867,1532,657,2198,2199,2200,2184,1407,585,2184,
            2195,1930,1797,2196,2184,30,1779,1689,352,207,
            1333,2197,1805,253,2410,1677,2184,2184,1,220,
            2538,2184,1909,1867,1532,518,2198,2199,2200,546,
            1407,585,2184,2195,565,1797,2196,2193,2213,1779,
            1689,201,3460,930,2197,1805,711,1603,932,189,
            1190,1726,2184,189,1905,1909,1867,1532,2184,2198,
            2199,2200,2184,1407,585,1,2195,1907,1797,2196,
            2184,788,1779,1689,2184,2184,2184,2197,1805,185,
            2184,2184,2441,184,189,2184,2184,2184,1909,1867,
            1532,2184,2198,2199,2200,2184,1407,585,1,2160,
            2175,2145,2157,2184,1373,2142,2139,2184,2184,2184,
            2172,2148,2184,2184,206,2184,2184,2184,2184,2184,
            2184,2154,2151,2130,2184,2169,2166,2163,2184,2136,
            2133,43,2184,2398,2399,2400,2184,2184,2504,2505,
            2506,2507,2508,2509,2510,846,2519,248,2184,2184,
            2184,2184,2184,2184,2184,2184,2398,2399,2400,2184,
            2184,2504,2505,2506,2507,2508,2509,2510,846,2519,
            251,2184,2184,2184,2184,2184,2184,2184,2184,2398,
            2399,2400,2184,2184,2504,2505,2506,2507,2508,2509,
            2510,846,2519,252,2184,2184,2184,2184,2184,2184,
            2184,2184,2398,2399,2400,2184,1169,2504,2505,2506,
            2507,2508,2509,2510,846,2519,2184,2184,2184,2184,
            2184,2184,2184,1148,1127,1106,1085,1064,1022,1043,
            1001,980,959
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            522,6,115,1,115,115,115,115,115,115,
            115,115,115,45,8,23,21,25,23,31,
            29,32,31,34,33,10,115,45,220,220,
            317,45,441,441,503,115,115,115,115,115,
            115,115,115,115,115,115,115,115,115,115,
            115,115,115,115,115,115,115,115,115,115,
            115,115,115,115,115,115,220,243,501,100,
            397,218,217,178,115,195,241,195,241,241,
            195,241,195,59,265,220,262,21,21,23,
            23,23,23,23,23,29,25,25,31,31,
            453,33,32,132,364,243,317,501,103,262,
            87,246,220,460,400,45,241,441,441,241,
            441,115,364,225,501,203,87,262,245,100,
            220,215,59,219,402,220,243,323,243,367,
            225,203,203,115,115,262,246,388,397,374,
            373,501,402,220,243,323,367,367,369,445,
            203,87,262,262,388,220,460,400,215,323,
            364,448,323,367,369,455,369,364,223,458,
            441,115,444,87,203,383,381,381,321,383,
            402,323,450,369,364,115,441,8,227,262,
            441,115,203,115,115,518,220,219,364,377,
            115,376,128,501,364,262,220,220,442,383,
            442,450,115,128,219,442
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            5,63,65,34,33,102,0,68,89,75,
            92,93,94,95,96,98,97,99,100,101,
            69,70,61,62,71,72,73,74,76,77,
            78,79,80,5,6,63,33,65,34,52,
            66,102,90,91,25,12,27,28,29,2,
            23,24,13,3,7,8,31,32,1,4,
            58,59,60,48,40,45,43,44,42,41,
            46,47,49,50,51,57,53,54,55,56,
            39,36,26,35,38,37,9,10,11,14,
            15,16,17,18,19,20,21,22,0,65,
            5,26,9,10,11,14,15,16,17,18,
            19,20,21,22,12,27,28,29,4,23,
            24,13,7,8,31,32,25,3,2,1,
            0,58,25,59,60,12,27,28,29,4,
            23,24,13,7,8,31,32,69,70,61,
            62,71,72,73,74,76,77,78,79,80,
            90,91,75,92,93,94,95,96,97,98,
            99,100,101,65,52,102,30,48,40,45,
            43,44,42,41,46,47,49,50,51,57,
            53,54,55,56,63,66,39,36,26,35,
            38,37,9,10,11,14,15,16,17,18,
            19,20,21,22,3,1,2,6,33,34,
            5,0,5,52,6,68,23,24,13,3,
            7,8,31,32,25,2,12,27,28,29,
            1,4,30,0,26,23,24,13,3,7,
            8,31,32,25,2,1,4,12,27,28,
            29,65,5,0,10,26,39,11,38,37,
            36,9,35,14,15,16,17,18,19,20,
            21,22,68,89,23,24,13,7,8,69,
            70,61,62,71,72,73,74,76,77,78,
            79,80,90,91,75,92,93,94,95,96,
            97,98,99,100,101,33,5,34,3,6,
            2,0,35,40,9,41,58,36,42,37,
            43,44,38,10,45,46,26,59,39,60,
            47,48,11,49,50,51,1,4,14,15,
            16,17,18,19,20,53,54,55,56,57,
            21,22,67,5,52,0,1,4,5,52,
            33,0,2,34,6,63,66,5,33,0,
            12,2,5,63,33,34,66,81,82,83,
            84,85,86,87,88,0,3,2,6,34,
            5,35,40,9,41,58,36,42,37,43,
            44,38,10,45,46,26,59,39,60,47,
            48,11,49,50,51,14,15,16,17,18,
            19,20,53,54,55,56,57,21,22,64,
            4,1,0,75,6,68,0,66,5,3,
            1,2,63,0,5,33,52,75,0,35,
            40,9,41,58,36,42,37,43,44,38,
            10,45,46,26,59,39,60,47,48,11,
            49,50,51,1,4,14,15,16,17,18,
            19,20,53,54,55,56,57,21,22,64,
            3,0,25,12,27,28,29,4,2,23,
            24,13,3,7,8,31,32,1,34,5,
            0,25,12,27,28,29,1,4,2,23,
            24,13,3,7,8,31,32,67,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static char nasb[] = {0,
            127,84,33,84,33,33,33,33,33,33,
            33,33,33,21,84,84,84,84,84,84,
            84,84,84,84,84,84,33,21,49,49,
            94,1,58,58,124,22,33,33,33,33,
            33,33,33,33,33,33,33,33,33,33,
            33,33,22,33,33,33,33,33,33,33,
            33,33,33,33,33,33,49,15,25,11,
            93,9,9,70,33,71,73,71,36,36,
            71,35,71,65,84,49,13,84,84,84,
            84,84,84,84,84,84,84,84,84,84,
            84,84,84,15,83,84,100,84,62,13,
            107,12,49,109,48,20,7,7,7,7,
            7,33,60,83,84,56,107,13,12,130,
            49,78,40,84,111,49,85,83,84,83,
            31,56,83,33,33,13,12,83,77,9,
            9,25,111,49,84,116,83,7,75,18,
            83,107,13,13,28,49,109,48,51,83,
            60,104,132,7,75,84,84,60,30,84,
            7,33,98,107,130,38,89,89,84,84,
            120,116,80,75,60,33,7,91,32,13,
            7,33,130,33,33,48,49,49,60,105,
            33,84,80,25,60,13,49,49,87,84,
            84,80,33,53,49,114
        };
    };
    public final static char nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            82,80,79,70,78,77,1,0,29,0,
            11,5,27,0,56,52,0,108,0,5,
            47,11,46,0,30,54,0,111,0,90,
            11,56,5,0,102,71,0,92,0,82,
            81,80,79,70,78,77,0,11,21,0,
            50,49,40,38,44,30,0,75,0,45,
            0,5,11,0,70,65,66,67,68,57,
            32,0,99,0,64,0,21,50,49,40,
            38,44,11,0,100,0,112,0,95,0,
            106,0,21,49,50,11,0,110,0,50,
            49,30,0,11,74,0,60,0,30,54,
            11,28,0,96,0,84,11,47,0,103,
            11,28,0,11,98,0,11,97,0,22,
            0,11,47,72,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,9,86,87,1,10,11,48,64,
            76,81,8,93,94,95,96,97,98,99,
            105,106,6,7,68,69,82,83,84,3,
            12,13,42,90,44,55,60,63,72,47,
            52,56,61,62,66,67,74,75,78,79,
            80,91,100,101,102,103,104,54,70,73,
            16,17,29,30,89,92,117,4,14,15,
            18,19,20,21,31,22,23,24,25,26,
            107,108,109,110,111,112,113,114,5,27,
            28,32,33,34,35,36,37,38,39,40,
            41,118,45,46,49,50,51,53,57,58,
            59,65,71,77,88,115,116
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            124,0,0,0,126,130,131,132,133,134,
            0,135,136,137,138,139,140,141,0,142,
            121,152,0,0,0,0,120,145,173,0,
            144,151,0,0,0,0,169,171,0,172,
            0,0,0,191,122,125,164,182,183,184,
            0,129,160,170,179,0,154,0,174,177,
            178,181,128,0,155,156,157,158,159,161,
            0,163,168,123,127,143,146,147,148,149,
            150,153,0,162,166,0,0,167,176,186,
            190,193,0,0,194,196,119,0,0,0,
            165,0,175,180,185,0,187,188,0,189,
            192,195,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            125,156,135,79,89,164,46,191,21,55,
            107,21,95,1,7,31,60,103,72,146,
            207,217,221,72,72,200,72,11,35,35,
            64,67,112,120,67,225,40,150,211,182,
            142,170,170,170,170,170,16,16,16,16,
            16
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            133,133,133,38,38,133,52,197,5,5,
            38,5,100,5,5,5,5,38,38,144,
            5,5,38,76,100,204,85,14,38,38,
            5,70,38,5,123,5,43,153,214,185,
            144,172,174,176,178,180,18,18,26,115,
            26
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            67,65,67,29,29,65,52,120,44,51,
            29,43,29,93,93,25,51,29,29,72,
            6,5,5,29,29,19,29,43,110,109,
            49,62,29,40,53,3,90,72,5,121,
            72,81,80,79,78,77,44,43,44,41,
            43
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            52,52,52,65,65,52,52,108,34,34,
            65,34,12,34,34,34,34,65,65,66,
            34,34,65,3,12,63,26,81,65,65,
            34,2,65,34,1,34,75,1,34,114,
            66,1,58,59,59,48,2,2,2,2,
            2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            38,38,38,42,42,38,20,0,12,46,
            42,12,42,3,3,26,46,42,42,8,
            53,53,53,42,42,82,42,12,1,6,
            46,48,42,12,14,53,112,8,53,0,
            8,39,39,39,39,39,12,12,12,12,
            12
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            148,2,82,0,138,0,148,2,81,0,
            128,161,0,228,0,157,0,2,138,0,
            176,128,2,157,0,2,128,176,138,0,
            208,2,21,0,148,6,0,144,0,224,
            128,0,75,186,0,181,222,128,30,173,
            0,162,223,0,176,128,2,166,0,176,
            128,2,0,179,2,0,171,128,0,165,
            0,206,128,6,0,3,144,0,137,26,
            206,128,6,0,26,137,144,0,137,206,
            128,26,6,0,206,128,26,6,0,137,
            144,0,137,26,6,0,137,206,128,6,
            0,137,6,0,2,128,220,138,0,170,
            2,0,154,0,181,204,128,30,118,219,
            58,0,162,0,181,204,128,30,219,58,
            0,164,0,191,0,218,128,164,0,128,
            164,0,218,191,0,200,128,30,217,118,
            216,187,0,200,128,30,216,187,0,199,
            0,185,0,184,0,183,0,182,0,174,
            0,233,107,0,114,2,163,138,191,0,
            233,138,163,2,111,0,108,233,0,163,
            91,135,0,63,137,0,180,2,25,0,
            180,2,0,138,169,0,215,2,122,0,
            163,6,122,0,163,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1777,0,686,650,0,544,0,1983,2003,1917,
            0,1722,716,1520,1677,1486,1441,1395,0,788,
            657,629,543,542,0,2012,2002,1956,1949,1995,
            1876,1859,1723,1709,1678,1442,1585,1393,705,482,
            0,1570,748,655,512,716,1790,1441,1395,1767,
            1813,0,1768,1396,866,687,613,1504,1588,1574,
            1540,1632,830,1666,1655,1644,1621,1851,1843,1830,
            1679,602,1909,1867,1805,1797,1779,1689,1407,585,
            1532,1373,1353,1333,1313,1293,788,1273,1253,1232,
            1211,907,1190,565,886,846,518,1169,1148,1127,
            1106,1085,1064,1043,1022,1001,980,959,482,938,
            809,657,629,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,214,128,193,25,32,31,8,7,3,
            13,24,23,2,122,126,125,129,127,131,
            130,133,132,135,134,123,33,2,180,163,
            164,128,89,68,2,6,8,7,70,69,
            3,74,73,72,71,61,62,13,77,76,
            79,78,91,90,80,101,100,99,97,98,
            96,95,94,93,92,75,180,138,128,6,
            2,167,166,194,21,195,187,196,60,59,
            197,58,198,199,118,215,163,125,125,127,
            127,127,127,126,126,130,129,129,132,131,
            163,134,133,138,30,173,171,147,26,137,
            128,3,179,128,2,2,216,188,188,219,
            188,63,128,30,147,3,128,137,206,177,
            176,145,128,178,128,208,118,30,118,30,
            128,3,147,206,26,137,3,161,2,155,
            157,128,33,176,217,128,30,128,222,128,
            147,128,137,137,128,170,128,2,171,30,
            200,164,201,128,204,118,205,181,33,224,
            68,6,225,128,177,228,82,81,88,138,
            128,128,128,204,181,75,33,162,75,148,
            68,6,177,2,2,2,176,220,200,218,
            63,170,2,128,181,148,148,148,128,138,
            33,33,63,171,229,33
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "__data",
            "__near",
            "__xdata",
            "__far",
            "__idata",
            "__pdata",
            "__code",
            "__bit",
            "__sfr",
            "__sfr16",
            "__sfr32",
            "__sbit",
            "__at",
            "__banked",
            "__interrupt",
            "__using",
            "__reentrant",
            "__critical",
            "__naked",
            "__wparam",
            "__shadowregs",
            "__preserves__regs",
            "__asm",
            "__endasm",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_cast_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "and_expression",
            "exclusive_or_expression",
            "inclusive_or_expression",
            "logical_and_expression",
            "logical_or_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "initializer_seq",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "absolute_address",
            "original_function_direct_decla" +
            "rator",
            "sdcc_function_attributes",
            "sdcc_function_attribute",
            "integer_token",
            "preserves_regs_args",
            "preserves_regs_arg"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
