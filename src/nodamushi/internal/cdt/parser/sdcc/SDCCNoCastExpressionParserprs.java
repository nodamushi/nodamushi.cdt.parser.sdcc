/*******************************************************************************
* Copyright (c) 2006, 2010 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package nodamushi.internal.cdt.parser.sdcc;

public class SDCCNoCastExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, SDCCNoCastExpressionParsersym {
    public final static int ERROR_SYMBOL = 67;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 35;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 36;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 38;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 226;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 117;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 2463;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 2;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 481;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 143;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 260;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 1614;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 102;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 102;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 1972;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 1982;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = true;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return SDCCNoCastExpressionParsersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,1,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,1,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,1,0,0,0,0,0,0,0,
            1,0,0,0,0,0,0,1,0,0,
            0,0,0,0,0,0,0,0,0,0,
            1,0,0,0,1,0,0,0,0,0,
            0,0,0,0,1,1,1,0,1,0,
            0,0,1,0,0,0,0,0,0,0,
            1,0,0,0,0,0,0,0,0,0,
            0,0,1,0,0,0,0,0,1,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static char prosthesesIndex[] = {0,
            9,10,11,12,14,20,21,22,23,24,
            3,25,26,27,28,29,30,31,32,33,
            6,58,87,127,128,129,5,49,95,103,
            56,57,59,70,88,90,91,92,93,94,
            96,131,7,35,108,109,110,111,13,18,
            37,69,79,89,105,112,61,71,97,102,
            104,107,136,19,62,63,64,65,68,72,
            76,78,86,8,16,17,36,51,52,53,
            54,55,60,74,77,81,82,84,85,101,
            115,130,133,134,135,138,2,15,73,75,
            80,83,99,106,113,114,116,117,118,119,
            132,137,1,4,34,38,39,40,41,42,
            43,44,45,46,47,48,50,66,67,98,
            100,120,121,122,123,124,125,126,139,140,
            141,142,143
        };
    };
    public final static char prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,3,1,
            1,4,4,3,3,2,2,4,1,0,
            1,1,2,2,2,2,2,2,2,2,
            2,4,1,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,4,3,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,2,5,9,
            8,3,2,2,2,3,2,4,2,2,
            2,2,2,1,1,1,1,2,1,2,
            2,2,1,2,2,1,2,2,1,2,
            2,1,2,2,1,3,1,3,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,6,
            8,0,0,1,1,3,3,3,0,1,
            0,1,2,4,2,1,1,1,3,1,
            1,2,3,7,8,0,1,0,1,3,
            1,3,1,1,1,1,1,1,3,1,
            1,1,1,1,3,1,2,2,1,5,
            3,1,3,5,1,3,1,3,2,4,
            3,5,4,6,6,3,5,1,3,4,
            5,6,0,1,2,1,3,1,1,3,
            2,1,1,1,1,2,1,2,3,1,
            1,1,3,1,2,2,2,3,4,5,
            1,1,7,3,0,0,1,1,3,3,
            4,1,1,2,3,2,3,2,1,0,
            1,2,1,1,1,1,1,2,1,3,
            6,4,2,4,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,4,2,1,1,5,3,3,1,2,
            1,1,1,1,1,1,1,4,2,4,
            2,1,1,1,3,5,1,3,1,1,
            1,2,5,3,1,2,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,-32,0,0,0,0,0,0,0,0,
            0,0,-2,0,0,0,0,0,0,0,
            0,0,-4,0,0,0,0,0,-72,-123,
            -160,-69,0,0,0,0,-141,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -15,0,-75,-105,-16,-130,0,0,0,0,
            -17,0,0,-77,0,-73,-117,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-42,0,0,0,0,0,0,
            0,0,0,0,0,0,-179,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-5,0,
            0,0,0,0,0,-133,0,0,0,0,
            -18,0,-149,-46,0,0,0,0,0,0,
            0,0,0,0,0,-198,0,0,0,0,
            0,0,0,0,-29,-115,0,0,0,0,
            -186,0,0,-19,-116,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-79,0,0,0,-33,0,0,-34,0,
            0,0,0,0,0,0,-12,0,0,0,
            0,0,0,0,0,0,0,0,0,-199,
            0,0,0,0,0,0,0,0,0,0,
            -137,0,0,0,0,0,0,0,0,0,
            -70,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-20,0,
            0,-197,0,0,-21,0,-22,-3,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-109,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-129,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -118,0,-119,0,0,-30,0,-13,0,0,
            0,0,0,0,0,-27,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-56,0,0,0,
            0,0,0,0,0,0,0,-67,0,0,
            0,0,0,0,0,0,0,-57,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-58,0,
            0,0,0,0,0,0,0,0,0,-86,
            0,0,0,0,0,0,0,0,0,-59,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -60,0,0,0,0,0,0,0,0,0,
            0,-113,0,0,0,0,0,0,0,0,
            0,-61,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-62,0,0,0,0,0,0,0,
            0,0,0,-131,0,0,0,0,0,0,
            0,0,0,-63,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-64,0,0,0,0,0,
            0,0,0,0,0,-136,0,0,0,0,
            0,0,0,0,0,-65,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-66,0,0,0,
            0,0,0,0,0,0,0,-154,0,0,
            0,0,0,0,0,0,0,-122,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-144,0,
            0,0,0,0,0,0,0,0,0,-166,
            0,0,0,0,0,0,0,0,0,-145,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -182,0,0,0,0,0,0,0,0,0,
            0,-165,0,0,0,0,0,0,0,0,
            -196,0,0,0,0,0,0,0,0,0,
            0,-23,0,0,0,0,0,0,0,0,
            -202,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -211,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -223,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -150,-84,0,-24,0,0,0,-68,-132,-168,
            -124,0,-219,-120,0,-25,-185,-121,0,0,
            0,0,0,0,0,0,0,0,-26,0,
            0,0,0,0,0,0,-80,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-138,-85,0,0,0,0,0,0,0,
            0,-88,0,0,-82,-159,0,0,0,0,
            0,0,-54,0,0,0,0,0,0,0,
            0,0,0,-87,0,0,0,0,0,0,
            -55,0,0,0,0,0,0,0,0,0,
            0,-169,0,0,0,0,0,0,0,-89,
            0,-104,0,-51,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-90,-193,-140,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -52,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-222,0,0,0,0,
            0,0,0,0,0,0,0,-6,0,0,
            0,0,0,0,0,0,-48,0,0,0,
            0,0,0,0,0,0,0,-91,0,0,
            0,0,0,0,0,0,0,0,-37,0,
            0,0,0,0,0,0,0,0,-126,0,
            0,-49,0,0,0,0,0,0,0,0,
            0,0,-74,0,0,-50,0,0,0,0,
            0,0,0,0,0,0,-92,0,0,-172,
            -143,0,0,-93,0,0,0,0,0,-94,
            0,0,-95,0,0,0,0,-43,0,0,
            0,0,0,0,0,0,0,0,-44,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-45,0,0,0,0,0,0,0,0,
            0,0,-213,-47,0,0,0,0,0,0,
            0,0,0,0,-38,0,0,0,0,0,
            0,0,0,0,-76,-112,0,0,0,0,
            0,0,0,-110,-128,-152,-142,0,0,0,
            0,0,0,0,0,-78,0,0,0,0,
            0,-148,0,-183,0,0,0,0,0,-81,
            0,0,0,-1,-35,0,0,0,0,0,
            0,0,-83,-146,0,0,0,0,0,0,
            -224,0,0,0,0,0,-181,0,-206,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-151,-71,0,0,0,0,0,0,0,
            0,-96,0,0,-157,0,0,0,0,0,
            0,0,0,0,-207,0,-201,0,-97,-161,
            0,0,-147,0,0,0,0,0,0,0,
            0,-98,-99,-100,-101,0,-102,0,0,0,
            0,-7,0,0,0,0,0,0,0,0,
            0,-103,0,0,0,-8,0,0,0,0,
            0,0,0,-9,0,0,0,0,0,0,
            0,-10,0,0,0,0,0,0,0,-11,
            0,0,0,0,0,0,0,-31,-39,0,
            0,0,0,0,0,0,-111,-163,0,-40,
            0,0,0,0,0,0,0,-41,0,0,
            0,0,0,0,0,-114,0,-107,0,0,
            0,0,0,-210,0,-170,0,-208,-127,-14,
            -167,-36,0,0,0,0,0,-106,-171,-108,
            0,0,0,0,-164,0,0,0,0,0,
            0,0,0,0,0,-28,0,0,0,-125,
            0,-134,0,0,0,0,0,-139,-156,0,
            0,0,-175,0,0,0,0,-155,0,0,
            0,0,0,0,0,0,0,-162,0,0,
            -178,0,-192,-176,-187,-226,0,0,-194,0,
            -184,-158,0,0,0,0,-191,-195,0,0,
            0,0,0,0,-174,0,-188,0,0,-214,
            0,0,0,0,0,0,0,-135,-173,-177,
            -153,0,-204,0,0,-205,0,-209,0,0,
            0,0,-180,-189,-190,0,-203,0,-53,0,
            0,-200,0,0,-217,0,0,0,0,0,
            0,0,0,-215,0,0,-216,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-218,-225,0,0,0,0,0,
            0,0,0,0,-212,0,-220,0,0,-221,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            97,11,114,27,27,21,21,43,43,74,
            74,1,1,2,2,2,2,3,3,3,
            4,5,5,5,5,5,5,5,5,64,
            64,75,6,6,6,6,6,6,6,6,
            6,6,6,7,8,8,8,8,9,9,
            9,10,10,10,12,12,12,12,12,13,
            13,13,14,14,15,15,16,16,17,17,
            18,18,19,19,20,20,20,20,20,20,
            20,20,20,20,20,20,115,49,44,98,
            98,77,77,51,116,116,116,116,116,116,
            116,117,117,117,118,118,123,123,124,124,
            119,119,120,120,120,126,126,121,121,121,
            121,121,122,122,122,122,122,125,125,28,
            28,28,28,28,31,31,31,83,83,78,
            78,78,78,79,79,79,80,80,80,81,
            81,81,82,82,82,127,127,128,128,129,
            32,34,34,34,34,34,57,58,58,58,
            58,58,58,58,58,58,58,58,58,68,
            65,65,99,100,70,70,66,66,66,71,
            84,84,85,85,72,72,72,53,101,101,
            86,87,87,87,67,67,102,88,88,89,
            89,73,73,22,23,23,23,33,52,52,
            35,35,35,35,38,38,40,36,36,37,
            41,41,130,130,39,131,131,103,103,29,
            29,29,29,29,29,29,29,29,90,54,
            54,54,54,30,60,60,59,59,59,61,
            61,55,55,104,104,76,76,62,62,62,
            45,45,45,46,47,47,47,48,48,48,
            48,69,69,50,50,56,106,105,105,105,
            105,91,107,108,108,109,109,110,110,132,
            132,133,133,134,134,134,134,136,136,135,
            135,135,137,138,138,97,97,22,22,22,
            24,24,24,24,24,24,24,58,58,58,
            58,58,25,25,92,26,42,42,41,111,
            111,93,93,93,93,93,93,93,94,94,
            94,94,94,94,63,95,95,112,112,96,
            116,116,139,140,140,141,141,142,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,1,1303,17,21,18,541,1279,44,
            551,545,654,358,621,755,749,1182,757,1266,
            1254,74,91,515,135,213,317,318,319,757,
            95,210,82,137,134,136,160,714,20,17,
            21,18,541,1279,44,551,545,654,511,621,
            755,749,1182,757,1266,1254,74,281,275,139,
            166,861,1800,761,69,8,483,143,146,149,
            152,590,554,284,188,510,569,307,711,503,
            1483,1575,1596,1610,1623,1252,1778,282,255,213,
            317,318,319,1798,794,20,17,21,18,541,
            43,44,551,545,1383,276,287,484,20,17,
            21,18,541,1279,44,551,545,654,511,621,
            755,749,1182,757,1266,1254,74,281,288,834,
            20,17,21,18,541,41,245,179,1903,1604,
            293,87,1316,511,794,20,17,21,18,541,
            43,44,551,1510,1791,333,223,282,135,213,
            317,318,319,1798,277,97,563,137,134,136,
            160,640,274,557,24,150,289,1888,218,1251,
            221,1652,223,224,229,1602,1258,278,267,556,
            509,272,247,139,166,1120,207,31,290,207,
            31,143,146,149,152,952,554,794,20,17,
            21,18,541,34,1483,1575,1596,1610,1623,1252,
            754,20,17,21,18,541,1279,44,551,545,
            654,191,621,755,749,1182,757,1266,1254,74,
            281,399,20,17,21,18,541,1279,44,551,
            545,654,1757,621,755,749,1182,757,1266,1254,
            74,1584,283,821,340,341,347,1036,239,162,
            282,25,207,1854,24,313,1798,4,794,20,
            17,21,18,541,1279,44,551,545,654,291,
            621,755,749,1182,757,1266,1254,74,91,874,
            20,17,21,18,541,1279,44,551,545,654,
            1789,621,755,749,1182,757,1266,1254,74,1585,
            441,20,17,21,18,541,1279,44,551,545,
            654,1838,621,755,749,1182,757,1266,1254,74,
            1624,207,187,207,186,210,97,240,794,20,
            17,21,18,541,33,503,794,20,17,21,
            18,541,1279,44,551,545,654,19,621,755,
            749,1182,757,1266,1254,74,92,794,20,17,
            21,18,541,1279,44,551,545,654,97,621,
            755,749,1182,757,1266,1254,74,85,794,20,
            17,21,18,541,1279,44,551,545,654,1362,
            621,755,749,1182,757,1266,1254,74,84,794,
            20,17,21,18,541,1279,44,551,545,654,
            97,621,755,749,1182,757,1266,1254,74,83,
            794,20,17,21,18,541,1279,44,551,545,
            654,23,621,755,749,1182,757,1266,1254,74,
            82,794,20,17,21,18,541,1279,44,551,
            545,654,97,621,755,749,1182,757,1266,1254,
            74,81,794,20,17,21,18,541,1279,44,
            551,545,654,273,621,755,749,1182,757,1266,
            1254,74,80,794,20,17,21,18,541,1279,
            44,551,545,654,97,621,755,749,1182,757,
            1266,1254,74,79,794,20,17,21,18,541,
            1279,44,551,545,654,279,621,755,749,1182,
            757,1266,1254,74,78,794,20,17,21,18,
            541,1279,44,551,545,654,97,621,755,749,
            1182,757,1266,1254,74,77,794,20,17,21,
            18,541,1279,44,551,545,654,332,621,755,
            749,1182,757,1266,1254,74,76,794,20,17,
            21,18,541,1279,44,551,545,654,97,621,
            755,749,1182,757,1266,1254,74,75,794,20,
            17,21,18,541,1279,44,551,545,654,280,
            621,755,749,1182,757,1266,1254,74,73,794,
            20,17,21,18,541,1279,44,551,545,654,
            97,621,755,749,1182,757,1266,1254,74,1758,
            794,20,17,21,18,541,1279,44,551,545,
            654,225,621,755,749,1182,757,1266,1254,74,
            1805,794,20,17,21,18,541,43,44,551,
            545,654,326,621,755,749,1182,757,1266,1254,
            93,794,20,17,21,18,541,43,44,551,
            545,654,127,621,755,749,1182,757,1266,1254,
            93,794,20,17,21,18,541,43,44,551,
            545,654,1912,621,755,749,1182,757,1266,1254,
            93,794,20,17,21,18,541,43,44,551,
            545,654,212,621,755,749,1182,757,1266,1254,
            93,794,20,17,21,18,541,43,44,551,
            545,654,1927,621,755,749,1182,757,1266,1254,
            93,930,245,179,53,339,341,347,406,426,
            563,69,202,481,743,1828,204,673,207,188,
            1586,1867,517,651,135,213,317,318,319,549,
            228,1905,203,138,134,136,160,417,274,255,
            213,317,318,319,218,1251,221,1652,223,224,
            229,1602,69,364,267,556,509,272,28,140,
            166,263,662,1829,1798,617,706,144,147,150,
            153,264,554,794,20,17,21,18,541,43,
            44,551,545,654,146,621,755,749,1182,757,
            1697,794,20,17,21,18,541,43,44,551,
            545,654,468,621,755,749,1182,1712,823,357,
            742,22,903,261,794,20,17,21,18,541,
            43,44,551,545,654,1945,621,755,749,1693,
            1851,274,1820,249,88,69,1268,219,1251,221,
            1652,223,224,229,1602,1880,1862,269,556,509,
            272,794,20,17,21,18,541,43,44,551,
            545,654,28,621,755,1694,88,1264,1798,218,
            1251,221,1652,223,224,229,1602,1880,794,20,
            17,21,18,541,43,40,1955,794,20,17,
            21,18,541,43,44,551,545,654,271,621,
            1662,218,1251,221,1652,223,224,229,1602,794,
            20,17,21,18,541,43,44,1312,1955,82,
            198,200,794,20,17,21,18,541,43,44,
            551,545,654,306,1679,1784,794,20,17,21,
            18,541,43,44,551,545,654,593,1692,1501,
            595,781,199,200,745,135,213,317,318,319,
            826,1384,1848,844,142,134,136,160,794,20,
            17,21,18,541,43,44,551,545,1448,794,
            20,17,21,18,541,43,44,551,545,1497,
            141,166,794,20,17,21,18,541,43,44,
            551,545,1504,841,794,20,17,21,18,541,
            43,44,551,1513,1880,794,20,17,21,18,
            541,43,44,1360,195,516,632,20,17,21,
            18,541,43,36,146,146,82,82,218,1251,
            221,1652,223,224,229,1602,543,135,213,317,
            318,319,69,246,881,1120,145,134,136,160,
            570,241,243,1162,674,269,1800,1680,135,213,
            317,318,319,597,146,758,758,148,134,136,
            160,882,135,213,317,318,319,207,296,563,
            1352,151,134,136,160,135,213,317,318,319,
            1263,242,623,769,154,134,136,160,87,89,
            355,1820,544,315,1776,69,219,1251,221,1652,
            223,224,229,1602,277,97,1875,207,298,148,
            821,227,274,632,20,17,21,18,541,43,
            36,1861,209,265,341,885,1957,693,267,556,
            509,272,794,20,17,21,18,541,43,39,
            247,493,890,910,294,952,794,20,17,21,
            18,541,43,38,794,20,17,21,18,541,
            43,37,794,20,17,21,18,541,43,36,
            794,20,17,21,18,541,43,35,266,794,
            20,17,21,18,541,43,47,440,146,512,
            794,20,17,21,18,541,43,46,794,20,
            17,21,18,541,43,45,813,274,327,254,
            213,317,318,319,537,244,69,616,342,440,
            69,813,69,267,556,509,272,1853,904,95,
            64,482,616,758,1259,146,1800,274,1820,234,
            266,254,213,317,318,319,69,546,197,1259,
            801,1800,541,269,556,509,272,482,928,62,
            1778,259,245,810,87,994,87,1822,931,826,
            616,1334,180,1748,197,1352,259,800,440,546,
            994,95,1822,184,309,850,481,197,194,810,
            87,440,703,1854,616,826,645,802,95,1748,
            254,213,317,318,319,703,1854,851,616,1109,
            82,197,1500,254,213,317,318,319,66,123,
            934,439,868,936,636,1259,936,1868,95,616,
            616,192,616,770,99,702,1500,906,1267,69,
            1800,204,146,1799,1889,97,1259,197,351,1259,
            758,1907,259,1924,95,192,1675,146,1822,255,
            213,317,318,319,1631,209,350,1898,1889,295,
            349,181,1500,259,97,388,260,1078,209,1822,
            1833,1890,358,87,297,893,1915,905,1695,1944,
            663,193,1982,1859,1890,348,356,205,1982,1982,
            1788,1982,0,20,179,0,1,2208,0,1,
            2219,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,0,4,5,6,0,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,0,24,25,26,20,21,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,0,53,54,55,56,57,58,59,
            60,0,1,0,3,0,5,4,0,8,
            9,10,11,12,13,14,15,16,17,18,
            19,0,79,22,61,62,0,0,1,2,
            29,30,31,32,0,34,0,3,0,3,
            2,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,0,1,28,3,0,5,67,64,
            8,9,10,11,12,13,14,15,16,17,
            18,19,90,91,22,0,52,0,3,0,
            63,29,30,31,32,6,34,71,72,73,
            74,0,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,0,1,24,3,0,5,67,
            0,8,9,10,11,12,13,14,15,16,
            17,18,19,0,78,22,0,1,0,0,
            65,5,29,30,31,32,7,34,71,72,
            73,74,0,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,0,1,0,1,0,5,
            67,5,8,9,10,11,12,13,14,15,
            16,17,18,19,0,0,22,2,0,4,
            0,3,7,29,30,31,32,68,34,71,
            72,73,74,80,40,41,42,43,44,45,
            46,47,48,49,50,51,28,53,54,55,
            56,57,58,59,60,0,0,1,0,61,
            62,5,0,8,9,10,11,12,13,14,
            15,16,17,18,19,0,0,22,2,23,
            4,61,62,7,29,30,31,32,0,34,
            0,0,78,0,3,40,41,42,43,44,
            45,46,47,48,49,50,51,0,53,54,
            55,56,57,0,24,2,3,4,27,28,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,75,0,22,0,0,76,77,
            3,28,29,30,31,32,0,34,0,1,
            2,3,4,5,6,0,81,82,83,84,
            85,86,87,88,27,28,0,1,20,21,
            22,5,24,25,26,0,1,2,23,4,
            0,33,7,35,36,37,38,39,0,0,
            0,1,2,3,4,5,6,8,9,10,
            11,12,13,14,15,16,17,18,19,102,
            20,21,22,65,24,25,26,0,1,2,
            0,4,0,33,7,35,36,37,38,39,
            0,1,0,0,1,2,3,4,5,6,
            8,9,10,11,12,13,14,15,16,17,
            18,19,64,20,21,65,23,24,25,26,
            0,1,2,3,0,0,33,7,35,36,
            37,38,39,8,9,10,11,12,13,14,
            15,16,17,18,19,52,0,22,28,3,
            0,27,0,0,29,30,31,32,0,34,
            8,9,10,11,12,13,14,15,16,17,
            18,19,0,27,22,3,0,27,0,0,
            2,29,30,31,32,7,34,8,9,10,
            11,12,13,14,15,16,17,18,19,0,
            28,22,0,4,0,0,0,3,29,30,
            31,32,66,34,8,9,10,11,12,13,
            14,15,16,17,18,19,0,1,22,76,
            77,5,0,75,2,29,30,31,32,7,
            34,0,1,2,3,4,5,6,0,0,
            92,93,94,95,96,97,98,99,100,101,
            0,20,21,61,62,24,25,26,69,70,
            66,0,0,1,33,4,35,36,37,38,
            39,0,0,0,1,2,0,4,5,6,
            8,9,10,11,12,13,14,15,16,17,
            18,19,0,20,21,0,65,24,25,26,
            0,0,0,1,3,0,33,5,35,36,
            37,38,39,0,1,2,0,4,5,6,
            81,82,83,84,85,86,87,88,27,28,
            69,70,27,20,21,0,23,24,25,26,
            67,0,0,1,0,4,33,5,35,36,
            37,38,39,0,1,2,0,4,5,6,
            0,0,2,7,63,23,6,66,0,0,
            2,3,80,20,21,7,23,24,25,26,
            0,1,2,3,4,0,33,7,35,36,
            37,38,39,0,1,2,28,4,5,6,
            0,0,1,0,4,61,62,27,28,0,
            69,70,0,20,21,0,4,24,25,26,
            0,1,2,3,4,0,33,7,35,36,
            37,38,39,0,1,2,27,4,5,6,
            0,1,2,0,75,20,21,27,28,0,
            0,2,2,20,21,6,6,24,25,26,
            0,0,2,20,21,64,33,7,35,36,
            37,38,39,0,1,2,64,4,5,6,
            0,0,1,2,0,25,26,7,0,0,
            0,3,0,20,21,0,1,24,25,26,
            5,0,0,0,0,0,33,3,35,36,
            37,38,39,8,9,10,11,12,13,14,
            15,16,17,18,19,23,23,0,68,0,
            0,27,28,0,0,0,7,0,0,0,
            52,6,0,0,0,0,0,63,68,89,
            23,0,0,23,0,63,0,23,0,0,
            27,23,23,0,0,0,0,63,79,0,
            66,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1982,1993,1790,68,1732,1994,1995,51,2196,2197,
            2198,2302,2303,2304,2305,2306,2307,2308,543,2317,
            1724,1716,2145,54,1740,828,687,1565,1459,2146,
            2144,2199,2147,609,2143,1996,1997,1998,1702,1428,
            2150,2155,2154,2152,2153,2151,2156,2157,2149,2158,
            2159,2160,72,2310,2311,2312,2313,2309,1315,1287,
            672,1982,1,1982,191,1,1,1469,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,253,1364,1,624,1554,59,1,2208,1553,
            1,1,1,1,1982,1,1982,1990,1982,1988,
            1639,1,1,1,1,1,1,1,1,1,
            1,1,1,191,1,1,1,1,1,1,
            1,1,1982,1,1987,190,66,1,2178,2240,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1323,1909,1,1982,1989,61,1986,1982,
            1211,1,1,1,1,2316,1,1542,1529,1518,
            574,64,1,1,1,1,1,1,1,1,
            1,1,1,1,190,1,1,1,1,1,
            1,1,1,1982,1,1437,191,182,1,2178,
            183,1,1,1,1,1,1,1,1,1,
            1,1,1,70,1401,1,1982,1993,60,1982,
            1985,1994,1,1,1,1,1151,1,1542,1529,
            1518,574,286,1,1,1,1,1,1,1,
            1,1,1,1,1,191,1,1,1,1,
            1,1,1,1,1982,1993,185,3398,58,1994,
            2178,3398,2196,2197,2198,2302,2303,2304,2305,2306,
            2307,2308,543,2317,67,265,2145,1653,1,1,
            57,90,721,2146,2144,2199,2147,1637,2143,1542,
            1529,1518,574,1341,2150,2155,2154,2152,2153,2151,
            2156,2157,2149,2158,2159,2160,90,2310,2311,2312,
            2313,2309,1315,1287,672,129,1982,1993,211,624,
            1554,1994,62,2196,2197,2198,2302,2303,2304,2305,
            2306,2307,2308,543,2317,1982,268,2145,1653,1302,
            253,624,1554,721,2146,2144,2199,2147,1982,2143,
            65,1982,1401,1982,1988,2150,2155,2154,2152,2153,
            2151,2156,2157,2149,2158,2159,2160,1982,2310,2311,
            2312,2313,2309,20,1437,1973,1973,1973,1960,1987,
            1973,179,179,179,179,179,179,179,179,179,
            179,179,179,1171,1982,179,1982,1982,1486,1472,
            1988,1973,179,179,179,179,1982,179,1,1993,
            1790,1986,1576,1994,1995,1982,1877,1855,2325,2324,
            2326,2328,2327,1904,1856,1987,184,3402,1724,1716,
            779,3402,1740,828,687,262,2208,623,3352,1,
            1982,609,721,1996,1997,1998,1702,1428,1,1982,
            1982,1993,1790,1986,1683,1994,1995,2196,2197,2198,
            2302,2303,2304,2305,2306,2307,2308,543,2317,1972,
            1724,1716,1130,1985,1740,828,687,268,2208,623,
            1982,253,1982,609,721,1996,1997,1998,1702,1428,
            1982,2341,248,1,1993,1790,29,1732,1994,1995,
            2196,2197,2198,2302,2303,2304,2305,2306,2307,2308,
            543,2317,2239,1724,1716,1985,3352,1740,828,687,
            1,1976,623,1988,88,130,609,721,1996,1997,
            1998,1702,1428,2196,2197,2198,2302,2303,2304,2305,
            2306,2307,2308,543,2317,29,1982,2145,1987,1992,
            256,836,131,63,2146,2144,2199,2147,43,2143,
            2196,2197,2198,2302,2303,2304,2305,2306,2307,2308,
            543,2317,1,1416,2145,1988,1982,1891,270,132,
            646,2146,2144,2199,2147,721,2143,2196,2197,2198,
            2302,2303,2304,2305,2306,2307,2308,543,2317,48,
            1987,2145,56,1768,1,1982,133,1992,2146,2144,
            2199,2147,1991,2143,2196,2197,2198,2302,2303,2304,
            2305,2306,2307,2308,543,2317,206,3403,2145,1486,
            1472,3403,222,1067,1260,2146,2144,2199,2147,721,
            2143,1982,1993,1790,1986,1732,1994,1995,1982,338,
            1046,1025,1004,983,962,920,941,899,878,857,
            1982,1724,1716,624,1554,1740,828,687,1760,1749,
            1991,50,1982,2220,609,1768,1996,1997,1998,1702,
            1428,1982,251,1982,1,1,1982,1,1,1,
            2196,2197,2198,2302,2303,2304,2305,2306,2307,2308,
            543,2317,71,1,1,1982,1985,1,1,1,
            1982,337,208,1993,231,30,1,1994,1,1,
            1,1,1,1,1993,1790,1982,1732,1994,1995,
            1877,1855,2325,2324,2326,2328,2327,1904,231,231,
            1760,1749,587,1724,1716,1982,3352,1740,828,687,
            2298,49,1982,1993,55,1768,609,1994,1996,1997,
            1998,1702,1428,1982,1993,1790,271,1732,1994,1995,
            1982,1982,655,721,231,1385,2316,231,1,1982,
            1653,1988,1341,1724,1716,721,3352,1740,828,687,
            1,249,249,249,249,1982,609,249,1996,1997,
            1998,1702,1428,1982,1993,1790,1987,1732,1994,1995,
            1982,1,1979,1982,1587,624,1554,249,249,30,
            1760,1749,1,1724,1716,1982,253,1740,828,687,
            1,250,250,250,250,53,609,250,1996,1997,
            1998,1702,1428,1982,1993,1816,2011,1732,1994,1995,
            1,2208,1553,52,700,1565,1459,250,250,353,
            352,1893,1896,1724,1716,2336,2336,1740,828,687,
            32,1982,1615,1565,1459,2240,609,1792,1996,1997,
            1998,1702,1428,1,1993,1790,2240,1732,1994,1995,
            292,253,2208,1553,1982,2008,2009,1191,285,69,
            1982,544,201,1724,1716,207,752,1740,828,687,
            752,1982,42,1982,336,252,609,230,1996,1997,
            1998,1702,1428,2196,2197,2198,2302,2303,2304,2305,
            2306,2307,2308,543,2317,3352,1261,1982,679,220,
            1982,230,230,207,189,1982,721,1982,189,189,
            544,2336,1982,1982,1982,1982,1982,1088,1677,676,
            1665,1982,1982,1786,1982,1231,1982,185,1982,1982,
            3359,184,206,1982,1982,1982,1982,230,1364,1982,
            230
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            326,1,85,41,85,85,85,85,85,85,
            85,85,85,467,3,23,20,27,25,33,
            31,35,34,37,36,9,85,467,312,312,
            418,467,519,519,344,85,85,85,85,85,
            85,85,85,85,85,85,85,85,85,85,
            85,85,85,85,85,85,85,85,85,85,
            85,85,85,85,85,85,312,68,465,70,
            371,310,309,270,119,287,66,287,66,66,
            287,66,287,481,166,312,45,20,20,25,
            25,25,25,23,23,31,27,27,34,33,
            369,36,35,224,163,68,418,465,73,45,
            211,103,312,424,374,120,66,519,519,66,
            519,85,163,50,465,295,211,45,102,70,
            312,307,481,311,376,312,68,122,68,264,
            50,295,295,85,85,45,103,534,371,364,
            363,465,376,312,68,122,264,264,266,323,
            295,211,45,45,534,312,424,374,307,122,
            163,315,122,264,266,522,266,163,48,525,
            519,85,322,211,295,529,527,527,100,529,
            376,122,317,266,163,85,519,3,52,45,
            519,85,295,120,120,359,312,311,163,260,
            85,259,98,465,163,45,312,312,520,529,
            520,317,85,98,311,520
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            102,0,7,2,68,89,25,26,75,92,
            93,94,95,96,98,97,99,100,101,4,
            69,70,20,21,62,61,71,72,73,74,
            76,77,24,78,79,80,52,66,90,91,
            63,28,102,27,65,3,0,3,52,7,
            68,25,26,24,4,20,21,38,39,33,
            2,6,35,36,37,1,5,23,0,65,
            3,22,8,9,10,11,12,13,14,15,
            16,17,18,19,6,35,36,37,5,25,
            26,24,20,21,38,39,33,4,1,2,
            0,22,65,3,25,26,24,4,20,21,
            38,39,33,1,5,35,36,37,2,6,
            0,29,40,8,41,58,30,42,31,43,
            44,32,9,45,46,22,59,34,60,47,
            48,10,49,50,51,1,5,11,12,13,
            14,15,16,17,53,54,55,56,57,18,
            19,67,3,52,0,22,34,32,31,30,
            29,68,89,25,26,24,20,21,69,70,
            61,62,71,72,73,74,76,77,78,79,
            80,90,91,75,92,93,94,95,96,97,
            98,99,100,101,27,3,7,2,4,28,
            8,9,10,11,12,13,14,15,16,17,
            18,19,0,24,4,20,21,69,70,61,
            62,71,72,73,74,76,77,78,79,80,
            90,91,75,92,93,94,95,96,97,98,
            99,100,101,65,28,52,102,23,63,66,
            3,27,0,1,5,3,52,27,0,48,
            40,45,43,44,42,41,46,47,49,50,
            51,57,53,54,55,56,63,66,34,30,
            22,29,32,31,8,9,10,11,12,13,
            14,15,16,17,18,19,4,1,2,7,
            27,28,3,0,66,3,4,1,2,63,
            0,75,7,68,0,33,6,35,36,37,
            1,5,2,25,26,24,4,20,21,38,
            39,67,0,33,6,35,36,37,5,2,
            25,26,24,4,20,21,38,39,1,28,
            3,0,2,3,27,28,66,7,63,0,
            4,2,7,28,3,29,40,8,41,58,
            30,42,31,43,44,32,9,45,46,22,
            59,34,60,47,48,10,49,50,51,1,
            5,11,12,13,14,15,16,17,53,54,
            55,56,57,18,19,64,0,3,28,4,
            2,7,0,29,40,8,41,58,30,42,
            31,43,44,32,9,45,46,22,59,34,
            60,47,48,10,49,50,51,1,5,11,
            12,13,14,15,16,17,53,54,55,56,
            57,18,19,64,4,0,33,6,35,36,
            37,2,25,26,24,4,20,21,38,39,
            58,59,60,48,40,45,43,44,42,41,
            46,47,49,50,51,57,53,54,55,56,
            34,30,22,29,32,19,18,11,12,13,
            14,15,16,17,8,9,10,31,5,1,
            0,3,27,52,75,0,6,2,3,63,
            27,28,66,81,82,83,84,85,86,87,
            88,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static char nasb[] = {0,
            95,44,27,44,27,27,27,27,27,27,
            27,27,27,117,44,44,44,44,44,44,
            44,44,44,44,44,44,27,117,48,48,
            102,1,52,52,98,118,27,27,27,27,
            27,27,27,27,27,27,27,27,27,27,
            27,27,118,27,27,27,27,27,27,27,
            27,27,27,27,27,27,48,73,15,56,
            101,9,9,70,18,71,22,71,79,79,
            71,78,71,65,44,48,58,44,44,44,
            44,44,44,44,44,44,44,44,44,44,
            44,44,44,73,43,44,113,44,60,58,
            106,57,48,108,47,18,7,7,7,7,
            7,27,11,43,44,88,106,58,57,20,
            48,38,29,44,110,48,54,43,44,43,
            25,88,43,27,27,58,57,43,37,9,
            9,15,110,48,44,121,43,7,81,13,
            43,106,58,58,63,48,108,47,83,43,
            11,90,133,7,81,44,44,11,24,44,
            7,27,93,106,20,50,125,125,44,44,
            129,121,40,81,11,27,7,45,26,58,
            7,27,20,125,125,47,48,48,11,91,
            27,44,40,15,11,58,48,48,76,44,
            44,40,27,85,48,127
        };
    };
    public final static char nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            83,81,80,70,79,78,1,0,29,0,
            43,0,108,0,30,54,0,92,0,22,
            0,99,0,91,11,56,5,0,83,82,
            81,80,70,79,78,0,21,47,46,38,
            36,42,11,0,106,0,11,21,0,93,
            0,75,0,100,0,11,5,27,0,5,
            11,0,111,0,70,65,66,67,68,57,
            31,0,56,50,0,112,0,102,71,0,
            64,0,47,46,38,36,42,30,0,11,
            74,0,110,0,11,97,0,11,98,0,
            21,46,47,11,0,60,0,30,54,11,
            28,0,47,46,30,0,53,11,49,0,
            85,11,53,0,63,0,96,0,103,11,
            28,0,11,53,72,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,87,9,86,81,1,48,64,76,
            93,94,95,96,97,98,99,105,106,10,
            11,69,3,8,6,7,42,90,44,55,
            60,63,68,72,82,83,84,12,13,47,
            52,56,61,62,66,67,74,75,78,79,
            80,91,100,101,102,103,104,54,70,73,
            16,17,29,30,89,92,117,4,14,15,
            18,19,20,21,31,22,23,24,25,26,
            107,108,109,110,111,112,113,114,5,27,
            28,32,33,34,35,36,37,38,39,40,
            41,118,45,46,49,50,51,53,57,58,
            59,65,71,77,88,115,116
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            124,0,0,0,126,130,131,132,133,134,
            0,135,136,137,138,139,140,141,0,142,
            121,152,0,0,0,0,120,145,173,0,
            151,0,0,0,169,171,0,172,0,0,
            0,191,122,0,182,183,184,0,125,129,
            144,160,164,170,179,0,154,0,174,177,
            178,181,194,0,155,156,157,158,159,161,
            0,163,168,123,127,128,143,146,147,148,
            149,150,153,0,162,166,0,0,167,176,
            186,190,193,0,0,196,119,0,0,0,
            165,0,175,180,185,0,187,188,0,189,
            192,195,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            87,118,97,55,61,126,34,141,11,43,
            71,11,48,67,108,157,167,171,150,1,
            23,23,52,76,84,175,28,112,161,132,
            104,6,6,6,6,6
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            95,95,95,26,26,95,40,147,16,16,
            26,16,16,26,106,16,16,26,154,4,
            26,26,16,26,16,16,31,115,164,135,
            106,8,8,18,79,18
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            67,65,67,29,29,65,50,120,42,48,
            29,41,48,29,72,6,5,5,19,41,
            110,109,46,29,38,3,91,72,5,121,
            72,42,41,42,39,41
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            52,52,52,65,65,52,52,108,28,28,
            65,28,28,65,66,28,28,65,63,81,
            65,65,28,65,28,28,75,1,28,114,
            66,2,2,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            23,23,23,27,27,23,17,0,9,31,
            27,9,31,27,5,38,38,38,67,9,
            1,3,31,27,9,38,93,5,38,0,
            5,9,9,9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            128,159,0,228,0,155,0,2,138,0,
            176,128,2,155,0,138,0,2,128,176,
            138,0,168,7,0,144,0,224,128,0,
            75,186,0,181,222,128,23,173,0,160,
            223,0,176,128,2,163,0,176,128,2,
            0,179,2,0,137,22,207,128,7,0,
            137,207,128,22,7,0,137,22,7,0,
            137,207,128,7,0,137,7,0,2,128,
            220,138,0,169,2,0,181,205,128,23,
            118,219,58,0,160,0,181,205,128,23,
            219,58,0,170,0,191,0,218,128,170,
            0,128,170,0,218,191,0,201,128,23,
            217,118,216,187,0,201,128,23,216,187,
            0,233,107,0,114,2,166,138,191,0,
            233,138,166,2,111,0,108,233,0,166,
            91,135,0,63,137,0,193,2,33,0,
            193,2,0,138,167,0,215,2,122,0,
            166,7,122,0,166,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1604,0,511,0,1853,1889,1829,0,1631,1416,
            1553,1384,1352,623,1259,0,700,587,517,1362,
            1258,0,616,1252,482,0,1652,1251,556,509,
            1352,623,1259,1778,1653,1748,0,1683,1576,1341,
            1323,1401,1364,1486,1472,1437,1554,624,1542,1529,
            1518,574,1768,1760,1749,1565,1459,828,687,1740,
            1732,1724,1716,1702,1428,609,1231,1211,1191,700,
            1171,1151,1130,1109,800,1088,779,721,1067,1046,
            1025,1004,983,962,941,920,899,878,857,482,
            836,758,587,517,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,214,128,194,33,39,38,21,20,4,
            24,26,25,2,122,126,125,129,127,131,
            130,133,132,135,134,123,27,2,193,166,
            170,128,89,68,2,7,21,20,70,69,
            4,74,73,72,71,61,62,24,77,76,
            79,78,91,90,80,101,100,99,97,98,
            96,95,94,93,92,75,193,138,128,7,
            2,164,163,195,18,196,187,197,60,59,
            198,58,199,200,118,215,166,125,125,127,
            127,127,127,126,126,130,129,129,132,131,
            166,134,133,138,23,173,171,147,22,137,
            128,4,179,128,2,2,216,188,188,219,
            188,63,128,23,147,4,128,137,207,177,
            176,145,128,178,128,209,118,23,118,23,
            128,4,147,207,22,137,4,159,2,153,
            155,128,27,176,217,128,23,128,222,128,
            147,128,137,137,128,169,128,2,171,23,
            201,170,202,128,205,118,206,181,27,224,
            68,7,225,128,177,228,82,81,88,138,
            128,128,128,205,181,75,27,160,75,168,
            68,7,177,2,2,2,176,220,201,218,
            63,169,2,128,181,168,180,180,128,138,
            27,27,63,171,229,27
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "__data",
            "__near",
            "__xdata",
            "__far",
            "__idata",
            "__pdata",
            "__code",
            "__bit",
            "__sfr",
            "__sfr16",
            "__sfr32",
            "__sbit",
            "__at",
            "__banked",
            "__interrupt",
            "__using",
            "__reentrant",
            "__critical",
            "__naked",
            "__wparam",
            "__shadowregs",
            "__preserves__regs",
            "__asm",
            "__endasm",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_cast_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "and_expression",
            "exclusive_or_expression",
            "inclusive_or_expression",
            "logical_and_expression",
            "logical_or_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "initializer_seq",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "absolute_address",
            "original_function_direct_decla" +
            "rator",
            "sdcc_function_attributes",
            "sdcc_function_attribute",
            "integer_token",
            "preserves_regs_args",
            "preserves_regs_arg"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
