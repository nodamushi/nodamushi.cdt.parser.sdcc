/*******************************************************************************
* Copyright (c) 2006, 2010 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package nodamushi.internal.cdt.parser.sdcc;

public class SDCCNoCastExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, SDCCNoCastExpressionParsersym {
    public final static int ERROR_SYMBOL = 67;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 35;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 36;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 38;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 226;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 117;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 2499;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 2;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 480;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 142;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 259;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 1807;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 102;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 102;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 2009;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 2019;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = true;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return SDCCNoCastExpressionParsersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,1,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,1,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,1,0,0,0,0,0,0,
            1,0,0,0,0,0,0,1,0,0,
            0,0,0,0,0,0,0,0,0,0,
            1,0,0,0,1,0,0,0,0,0,
            0,0,0,1,1,1,0,1,0,0,
            0,1,0,0,0,0,0,0,0,1,
            0,0,0,0,0,0,0,0,0,0,
            0,1,0,0,0,0,0,1,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static char prosthesesIndex[] = {0,
            9,10,11,12,14,20,21,22,23,24,
            3,25,26,27,28,29,30,31,32,33,
            6,58,87,127,128,129,5,49,95,103,
            56,57,59,70,88,90,91,92,93,94,
            96,131,7,35,108,109,110,111,130,13,
            18,37,69,79,89,105,112,61,71,97,
            102,104,107,19,62,63,64,65,68,72,
            76,78,86,8,16,17,36,51,52,53,
            54,55,60,74,77,81,82,84,85,101,
            115,133,134,135,137,2,15,73,75,80,
            83,99,106,113,114,116,117,118,119,132,
            136,1,4,34,38,39,40,41,42,43,
            44,45,46,47,48,50,66,67,98,100,
            120,121,122,123,124,125,126,138,139,140,
            141,142
        };
    };
    public final static char prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,3,1,
            1,4,4,3,3,2,2,4,1,0,
            1,1,2,2,2,2,2,2,2,2,
            2,4,1,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,4,3,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,2,5,9,
            8,3,2,2,2,3,2,4,2,2,
            2,2,2,1,1,1,1,2,1,2,
            2,2,1,2,2,1,2,2,1,2,
            2,1,2,2,1,3,1,3,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,6,
            8,0,0,1,1,3,3,3,0,1,
            0,1,2,4,2,1,1,1,3,1,
            1,2,3,7,8,0,1,0,1,3,
            1,3,1,1,1,1,1,1,3,1,
            1,1,1,1,3,1,2,2,1,5,
            3,1,3,5,1,3,1,3,2,4,
            3,5,4,6,6,3,5,1,3,4,
            5,6,0,1,2,1,3,1,1,3,
            2,1,1,1,1,2,1,2,3,1,
            1,1,3,1,2,2,2,3,4,5,
            1,1,7,3,0,0,1,1,3,3,
            4,1,1,2,3,2,3,2,1,0,
            1,2,1,1,1,1,1,2,1,3,
            6,4,2,4,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,4,2,1,1,5,3,3,1,2,
            1,1,1,1,1,1,1,4,2,4,
            2,1,1,3,5,1,3,1,1,1,
            2,5,3,1,2,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            -32,0,0,0,0,0,0,0,0,0,
            0,-2,0,0,0,0,0,0,0,0,
            0,-123,0,0,0,0,0,-107,-117,0,
            -69,0,0,0,0,-141,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-87,-72,-29,0,0,0,0,0,-30,
            0,-4,0,0,0,0,-105,0,0,0,
            0,0,0,0,0,0,0,0,0,-15,
            0,0,0,-42,0,0,0,0,0,0,
            0,0,0,0,0,-179,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-133,0,-46,
            0,0,0,0,0,0,0,0,0,0,
            -37,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-16,-73,0,-152,0,0,
            0,0,0,-199,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-79,-126,
            -67,-17,0,0,0,0,0,0,-5,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-18,0,-19,-77,-20,-160,0,
            0,-43,0,0,0,0,0,0,0,0,
            0,0,0,-70,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-33,0,-80,-118,0,0,
            0,-3,0,0,0,0,0,0,0,0,
            0,0,-21,0,0,0,0,0,0,0,
            0,0,-109,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-129,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-22,0,
            0,-12,0,0,0,0,0,0,0,-27,
            0,0,0,0,0,0,0,0,0,0,
            -86,0,0,0,0,0,0,0,0,0,
            -56,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-57,0,0,0,0,0,0,0,0,
            0,0,-113,0,0,0,0,0,0,0,
            0,0,-58,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-59,0,0,0,0,0,0,
            0,0,0,0,-131,0,0,0,0,0,
            0,0,0,0,-60,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-61,0,0,0,0,
            0,0,0,0,0,0,-136,0,0,0,
            0,0,0,0,0,0,-62,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-63,0,0,
            0,0,0,0,0,0,0,0,-154,0,
            0,0,0,0,0,0,0,0,-64,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-65,
            0,0,0,0,0,0,0,0,0,0,
            -166,0,0,0,0,0,0,0,0,0,
            -66,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-122,0,0,0,0,0,0,0,0,
            0,0,-207,0,0,0,0,0,0,0,
            0,0,-144,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-145,0,0,0,0,0,0,
            0,0,0,0,-23,0,0,0,0,0,
            0,0,0,0,-182,0,0,0,0,0,
            0,0,0,0,0,-150,0,0,0,0,
            0,0,0,0,-196,0,0,0,0,0,
            0,0,0,0,0,-82,0,0,0,0,
            0,0,0,0,0,-202,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-211,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-110,-223,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-171,-84,0,
            -119,0,0,-214,-34,0,-132,0,-38,0,
            0,0,0,0,0,0,0,0,-120,0,
            0,0,0,0,0,-172,0,-153,0,0,
            0,0,0,0,-159,0,0,-178,0,-173,
            0,0,0,0,0,0,0,0,0,-149,
            0,0,0,0,0,0,0,0,0,0,
            0,-75,-142,0,0,0,0,0,0,0,
            0,-13,0,0,0,0,0,0,0,0,
            0,-130,-24,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -197,0,0,0,0,0,0,0,-68,0,
            0,0,0,-54,0,0,0,0,0,0,
            0,0,0,0,-25,0,0,0,0,0,
            0,-55,0,0,0,0,0,0,0,0,
            0,0,-169,0,0,0,0,0,-51,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-186,0,-158,0,-121,0,
            -26,0,0,0,-193,-124,-183,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-52,0,0,0,0,0,0,0,0,
            0,0,-116,0,0,0,-181,0,-137,0,
            0,0,0,0,0,0,0,-47,0,0,
            0,0,0,0,0,0,0,0,-48,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-222,-6,0,0,0,0,0,0,
            0,0,-85,0,0,0,0,0,0,-128,
            0,0,-146,-49,0,0,0,0,0,0,
            0,0,0,0,0,0,-88,0,0,0,
            0,0,0,0,0,0,0,-74,-151,0,
            -201,0,-89,-90,-208,0,-50,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-31,0,-138,0,0,0,
            0,0,-91,-92,-93,0,-165,0,0,0,
            -44,0,0,0,0,0,0,0,0,0,
            0,-76,-219,0,-175,0,0,-45,0,0,
            0,0,0,0,0,0,0,0,-213,0,
            0,0,0,0,0,0,0,0,-140,0,
            -94,-104,0,0,0,0,-198,0,-95,0,
            -143,-78,-112,0,0,0,0,0,0,0,
            -163,0,-226,0,0,0,0,0,0,0,
            0,-81,-164,0,0,0,0,0,0,0,
            -210,0,0,0,0,0,-83,0,0,0,
            0,-224,0,0,0,0,0,0,0,0,
            -96,-97,0,0,0,0,0,0,0,0,
            0,0,0,-71,-162,-98,-99,0,0,0,
            0,0,-187,0,0,-188,0,0,0,0,
            0,0,0,0,0,-217,0,0,0,0,
            0,-148,0,-147,0,0,0,0,0,0,
            0,0,0,-100,0,-101,0,0,0,0,
            0,0,-7,0,0,0,0,0,0,0,
            0,0,-102,-103,0,0,0,-8,0,0,
            0,0,0,0,0,-9,0,0,0,0,
            0,0,0,-10,0,0,0,0,0,0,
            0,-11,0,0,0,0,0,0,0,-39,
            0,0,0,0,0,0,0,-40,0,0,
            0,0,0,0,0,-41,0,0,0,0,
            0,0,0,-111,-36,-114,-1,-157,-194,-161,
            -195,-170,-209,-106,-127,0,0,0,0,-14,
            0,-167,0,-215,-108,0,0,0,0,0,
            0,-156,0,0,-28,0,0,0,0,0,
            0,-200,0,-204,-125,0,-134,0,0,0,
            0,0,-139,0,0,0,0,-155,-176,0,
            0,0,0,0,0,0,0,0,0,0,
            -174,0,0,0,-184,0,0,0,0,-192,
            -191,0,-177,0,0,0,-216,-180,0,-205,
            0,0,0,0,-135,0,0,0,0,0,
            0,-185,0,0,0,0,-203,0,0,-35,
            0,-189,-190,0,-212,0,0,-220,-218,-221,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-53,0,0,0,0,0,
            0,-115,0,0,-168,0,-206,-225,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            96,11,113,27,27,21,21,43,43,74,
            74,1,1,2,2,2,2,3,3,3,
            4,5,5,5,5,5,5,5,5,64,
            64,75,6,6,6,6,6,6,6,6,
            6,6,6,7,8,8,8,8,9,9,
            9,10,10,10,12,12,12,12,12,13,
            13,13,14,14,15,15,16,16,17,17,
            18,18,19,19,20,20,20,20,20,20,
            20,20,20,20,20,20,114,50,44,97,
            97,77,77,52,115,115,115,115,115,115,
            115,116,116,116,117,117,122,122,123,123,
            118,118,119,119,119,125,125,120,120,120,
            120,120,121,121,121,121,121,124,124,28,
            28,28,28,28,31,31,31,83,83,78,
            78,78,78,79,79,79,80,80,80,81,
            81,81,82,82,82,126,126,127,127,128,
            32,34,34,34,34,34,58,59,59,59,
            59,59,59,59,59,59,59,59,59,68,
            65,65,98,99,70,70,66,66,66,71,
            84,84,85,85,72,72,72,54,100,100,
            86,87,87,87,67,67,101,88,88,89,
            89,73,73,22,23,23,23,33,53,53,
            35,35,35,35,38,38,40,36,36,37,
            41,41,129,129,39,130,130,102,102,29,
            29,29,29,29,29,29,29,29,90,55,
            55,55,55,30,61,61,60,60,60,62,
            62,56,56,103,103,76,76,63,63,63,
            45,45,45,46,47,47,47,48,48,48,
            48,69,69,51,51,57,105,104,104,104,
            104,91,106,107,107,108,108,109,109,131,
            131,132,132,133,133,133,133,135,135,134,
            134,134,136,137,137,96,96,22,22,22,
            24,24,24,24,24,24,24,24,24,24,
            59,59,25,25,49,26,42,42,41,110,
            110,92,92,92,92,92,92,92,93,93,
            93,93,93,93,94,94,111,111,95,115,
            115,138,139,139,140,140,141,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,1,1493,17,21,18,570,1411,44,672,
            635,696,31,694,753,698,1125,809,1365,1323,
            74,91,656,135,213,317,318,319,418,662,
            1449,32,137,134,136,160,730,20,17,21,
            18,570,1411,44,672,635,696,699,694,753,
            698,1125,809,1365,1323,74,281,274,1845,139,
            166,1825,149,153,328,284,143,146,149,152,
            328,697,276,269,636,543,272,4,552,1528,
            1582,1622,1642,1657,1239,1349,508,282,502,22,
            736,19,275,1814,816,20,17,21,18,570,
            43,44,672,635,1534,287,599,20,17,21,
            18,570,1411,44,672,635,696,699,694,753,
            698,1125,809,1365,1323,74,281,288,245,179,
            816,20,17,21,18,570,43,44,672,1611,
            1275,816,20,17,21,18,570,43,44,1517,
            135,213,317,318,319,430,66,282,32,137,
            134,136,160,1814,773,20,17,21,18,570,
            1411,44,672,635,696,289,694,753,698,1125,
            809,1365,1323,74,281,276,139,166,1825,619,
            32,328,269,143,146,149,152,290,697,859,
            20,17,21,18,570,41,1528,1582,1622,1642,
            1657,1239,1612,1383,90,282,27,64,664,417,
            1621,1814,816,20,17,21,18,570,43,44,
            672,635,1563,291,513,20,17,21,18,570,
            1411,44,672,635,696,1804,694,753,698,1125,
            809,1365,1323,74,1216,210,31,648,210,187,
            738,239,816,20,17,21,18,570,1411,44,
            672,635,696,323,694,753,698,1125,809,1365,
            1323,74,91,902,20,17,21,18,570,1411,
            44,672,635,696,1815,694,753,698,1125,809,
            1365,1323,74,1500,556,20,17,21,18,570,
            1411,44,672,635,696,509,694,753,698,1125,
            809,1365,1323,74,1503,1888,1417,293,1241,7,
            25,240,816,20,17,21,18,570,34,552,
            816,20,17,21,18,570,1411,44,672,635,
            696,328,694,753,698,1125,809,1365,1323,74,
            92,816,20,17,21,18,570,1411,44,672,
            635,696,23,694,753,698,1125,809,1365,1323,
            74,85,816,20,17,21,18,570,1411,44,
            672,635,696,328,694,753,698,1125,809,1365,
            1323,74,84,816,20,17,21,18,570,1411,
            44,672,635,696,273,694,753,698,1125,809,
            1365,1323,74,83,816,20,17,21,18,570,
            1411,44,672,635,696,328,694,753,698,1125,
            809,1365,1323,74,82,816,20,17,21,18,
            570,1411,44,672,635,696,279,694,753,698,
            1125,809,1365,1323,74,81,816,20,17,21,
            18,570,1411,44,672,635,696,328,694,753,
            698,1125,809,1365,1323,74,80,816,20,17,
            21,18,570,1411,44,672,635,696,332,694,
            753,698,1125,809,1365,1323,74,79,816,20,
            17,21,18,570,1411,44,672,635,696,328,
            694,753,698,1125,809,1365,1323,74,78,816,
            20,17,21,18,570,1411,44,672,635,696,
            280,694,753,698,1125,809,1365,1323,74,77,
            816,20,17,21,18,570,1411,44,672,635,
            696,328,694,753,698,1125,809,1365,1323,74,
            76,816,20,17,21,18,570,1411,44,672,
            635,696,225,694,753,698,1125,809,1365,1323,
            74,75,816,20,17,21,18,570,1411,44,
            672,635,696,328,694,753,698,1125,809,1365,
            1323,74,73,816,20,17,21,18,570,1411,
            44,672,635,696,1918,694,753,698,1125,809,
            1365,1323,74,1631,816,20,17,21,18,570,
            1411,44,672,635,696,194,694,753,698,1125,
            809,1365,1323,74,1643,816,20,17,21,18,
            570,43,44,672,635,696,220,694,753,698,
            1125,809,1365,1323,93,816,20,17,21,18,
            570,43,44,672,635,696,650,694,753,698,
            1125,809,1365,1323,93,228,816,20,17,21,
            18,570,43,44,672,635,696,1842,694,753,
            698,1125,809,1365,1323,93,816,20,17,21,
            18,570,43,44,672,635,696,212,694,753,
            698,1125,809,1365,1323,93,149,816,20,17,
            21,18,570,43,44,672,635,696,1887,694,
            753,698,1125,809,1365,1323,93,1409,656,245,
            179,210,186,241,32,210,31,526,202,816,
            20,17,21,18,570,43,44,1533,638,696,
            1853,135,213,317,318,319,819,1259,841,203,
            138,134,136,160,1825,733,274,1415,656,608,
            123,180,218,1146,221,1529,223,224,229,1712,
            544,608,267,636,543,272,1247,140,166,1662,
            263,1822,482,32,144,147,150,153,197,697,
            264,277,816,20,17,21,18,570,33,274,
            24,1617,962,56,260,218,1146,221,1529,223,
            224,229,1712,1810,1266,267,636,543,272,1278,
            195,210,1859,1041,255,213,317,318,319,101,
            261,333,193,873,816,20,17,21,18,570,
            43,44,672,635,696,85,694,753,698,1125,
            809,1743,816,20,17,21,18,570,43,44,
            672,635,696,587,694,753,698,1125,1744,816,
            20,17,21,18,570,43,44,672,635,696,
            28,694,753,698,1687,529,1814,750,1859,210,
            188,692,274,1845,210,91,4,823,219,1146,
            221,1529,223,224,229,1712,1244,516,269,636,
            543,272,816,20,17,21,18,570,43,44,
            672,635,696,576,694,753,1724,210,296,103,
            218,1146,221,1529,223,224,229,1712,816,20,
            17,21,18,570,43,44,672,1619,1915,816,
            20,17,21,18,570,43,44,672,635,696,
            209,694,1671,91,816,20,17,21,18,570,
            43,40,957,358,1244,1585,1883,340,341,347,
            149,198,200,149,816,20,17,21,18,570,
            43,44,672,635,696,1651,1672,271,218,1146,
            221,1529,223,224,229,1712,294,243,300,533,
            242,210,298,382,186,480,1915,816,20,17,
            21,18,570,43,44,672,635,696,1858,1686,
            135,213,317,318,319,98,234,4,227,142,
            134,136,160,336,387,699,511,486,1832,199,
            200,816,20,17,21,18,570,43,44,672,
            635,1564,394,657,274,794,141,166,816,20,
            17,21,18,570,43,44,672,635,1565,563,
            267,636,543,272,135,213,317,318,319,4,
            1244,582,255,145,134,136,160,208,266,705,
            1407,630,425,642,20,17,21,18,570,43,
            36,149,1685,657,218,1146,221,1529,223,224,
            229,1712,456,149,135,213,317,318,319,1811,
            246,715,1041,148,134,136,160,487,244,339,
            341,347,846,28,135,213,317,318,319,1814,
            245,672,151,151,134,136,160,1405,356,135,
            213,317,318,319,324,939,212,310,154,134,
            136,160,1845,865,1948,1806,870,219,1146,221,
            1529,223,224,229,1712,277,328,254,213,317,
            318,319,4,274,642,20,17,21,18,570,
            43,36,283,1567,693,194,125,350,357,267,
            636,543,272,816,20,17,21,18,570,43,
            39,247,351,207,342,349,1902,873,816,20,
            17,21,18,570,43,38,816,20,17,21,
            18,570,43,37,816,20,17,21,18,570,
            43,36,816,20,17,21,18,570,43,35,
            816,20,17,21,18,570,43,47,816,20,
            17,21,18,570,43,46,816,20,17,21,
            18,570,43,45,939,4,698,685,4,794,
            673,656,4,656,435,939,742,608,742,1871,
            4,1875,698,1880,656,381,254,213,317,318,
            319,481,62,608,1247,4,1825,254,213,317,
            318,319,149,608,576,706,481,577,197,87,
            1247,87,1825,668,204,542,181,315,717,329,
            197,508,259,197,87,1322,915,205,1847,295,
            550,750,1859,1824,1555,939,1322,1383,259,87,
            184,830,915,849,1847,550,1266,149,776,1555,
            576,608,608,1706,784,479,544,254,213,317,
            318,319,985,492,192,1093,608,1008,197,1247,
            531,671,737,716,297,150,1238,1280,805,328,
            873,742,2019,1247,255,213,317,318,319,255,
            213,317,318,319,1266,4,1907,259,2019,1919,
            348,1083,807,1847,209,807,742,807,803,2019,
            2019,259,192,1895,89,999,1881,1847,1583,1809,
            1883,2019,2019,278,1813,1280,1913,2019,354,355,
            2019,2019,2019,2019,2019,2019,2019,2019,2019,87,
            2019,2019,2019,1535,2019,1726,2019,2019,2019,2019,
            2019,2019,2019,2019,2019,2019,2019,2019,2019,2019,
            2019,2019,2019,2019,2019,2019,2019,831,2019,0,
            20,179,0,1,2245,0,1,2256,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,0,4,5,0,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,0,27,28,29,
            0,0,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,0,56,57,58,59,
            60,0,1,0,3,0,5,2,7,8,
            9,6,11,12,13,14,15,16,17,18,
            19,20,21,22,0,79,25,61,62,0,
            0,1,2,32,33,34,35,0,37,2,
            0,4,0,6,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,0,1,0,3,26,5,67,7,
            8,9,102,11,12,13,14,15,16,17,
            18,19,20,21,22,90,91,25,0,0,
            0,3,0,63,32,33,34,35,6,37,
            71,72,73,74,80,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,0,1,0,3,63,5,67,
            7,8,9,0,11,12,13,14,15,16,
            17,18,19,20,21,22,0,0,25,0,
            1,0,63,65,5,32,33,34,35,0,
            37,71,72,73,74,6,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,0,1,61,62,0,5,
            67,7,8,9,0,11,12,13,14,15,
            16,17,18,19,20,21,22,0,0,25,
            0,78,4,0,4,0,32,33,34,35,
            26,37,71,72,73,74,80,43,44,45,
            46,47,48,49,50,51,52,53,54,0,
            56,57,58,59,60,30,7,8,9,0,
            11,12,13,14,15,16,17,18,19,20,
            21,22,0,0,25,2,3,0,0,6,
            3,32,33,34,35,0,37,69,70,69,
            70,0,43,44,45,46,47,48,49,50,
            51,52,53,54,31,56,57,0,31,2,
            3,4,0,6,7,8,9,0,11,12,
            13,14,15,16,17,18,19,20,21,22,
            0,0,25,0,4,4,0,78,31,32,
            33,34,35,0,37,0,61,62,76,77,
            7,8,9,75,11,12,13,14,15,16,
            17,18,19,20,21,22,0,0,25,2,
            79,4,6,6,0,32,33,34,35,0,
            37,7,8,9,0,11,12,13,14,15,
            16,17,18,19,20,21,22,61,62,25,
            69,70,23,24,0,0,32,33,34,35,
            26,37,7,8,9,0,11,12,13,14,
            15,16,17,18,19,20,21,22,0,0,
            25,0,3,2,68,0,0,32,33,34,
            35,10,37,7,8,9,0,11,12,13,
            14,15,16,17,18,19,20,21,22,30,
            31,25,0,1,2,3,4,5,32,33,
            34,35,10,37,0,0,1,2,0,4,
            0,6,0,3,2,23,24,25,6,27,
            28,29,64,0,1,2,3,0,36,6,
            38,39,40,41,42,0,1,2,3,4,
            5,31,0,1,2,10,81,82,83,84,
            85,86,87,88,31,0,0,65,23,24,
            25,0,27,28,29,10,0,1,2,0,
            4,36,6,38,39,40,41,42,0,1,
            2,3,4,5,23,24,30,0,10,81,
            82,83,84,85,86,87,88,0,0,1,
            65,23,24,5,26,27,28,29,0,0,
            1,2,3,4,36,6,38,39,40,41,
            42,0,1,2,3,4,5,0,1,0,
            1,10,5,55,5,0,0,1,3,30,
            31,0,1,0,23,24,5,0,27,28,
            29,0,0,1,2,3,4,36,6,38,
            39,40,41,42,0,1,2,26,4,5,
            27,0,0,26,10,0,1,0,0,0,
            5,4,30,31,0,0,65,23,24,4,
            55,27,28,29,0,0,0,3,3,27,
            36,26,38,39,40,41,42,23,24,0,
            1,2,0,4,5,0,0,2,2,10,
            0,6,26,0,30,30,31,76,77,0,
            1,67,23,24,5,26,27,28,29,61,
            62,64,30,28,29,36,75,38,39,40,
            41,42,0,1,2,0,4,5,63,0,
            66,66,10,92,93,94,95,96,97,98,
            99,100,101,0,0,23,24,3,26,27,
            28,29,0,68,0,3,0,3,36,3,
            38,39,40,41,42,0,1,2,0,4,
            5,3,0,30,89,10,0,1,6,0,
            1,5,30,31,30,31,0,31,23,24,
            0,0,27,28,29,0,1,2,0,55,
            75,36,0,38,39,40,41,42,0,1,
            2,0,4,5,0,0,2,63,10,0,
            66,2,0,1,10,0,0,0,30,10,
            0,23,24,0,66,27,28,29,0,0,
            68,26,0,64,36,0,38,39,40,41,
            42,0,1,2,64,4,5,0,0,26,
            0,10,0,0,26,0,0,0,0,0,
            0,0,0,0,23,24,0,0,27,28,
            29,0,0,0,0,0,0,36,0,38,
            39,40,41,42,0,7,8,9,0,11,
            12,13,14,15,16,17,18,19,20,21,
            22,0,0,0,0,0,0,0,7,8,
            9,0,11,12,13,14,15,16,17,18,
            19,20,21,22,0,0,0,0,0,0,
            0,7,8,9,0,11,12,13,14,15,
            16,17,18,19,20,21,22,0,0,0,
            0,0,0,0,7,8,9,0,11,12,
            13,14,15,16,17,18,19,20,21,22,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            2019,2030,1820,1,1764,2031,68,2233,2234,2235,
            2032,2339,2340,2341,2342,2343,2344,2345,2346,2347,
            2348,1302,2354,1756,1748,2182,54,1772,1312,812,
            2019,253,2183,2181,2236,2184,679,2180,2033,2034,
            2035,1733,1484,2187,2192,2191,2189,2190,2188,2193,
            2194,2186,2195,2196,2197,72,2350,2349,1166,737,
            669,2019,1,182,191,270,1,1942,1,1,
            1,714,1,1,1,1,1,1,1,1,
            1,1,1,1,70,1389,1,610,1458,59,
            1,2245,1599,1,1,1,1,265,1,1684,
            2019,1,183,714,1,1,1,1,1,1,
            1,1,1,1,1,1,191,1,1,1,
            1,1,2019,1,2019,190,3294,1,2215,1,
            1,1,2009,1,1,1,1,1,1,1,
            1,1,1,1,1,1354,1935,1,2019,201,
            61,2023,271,1196,1,1,1,1,714,1,
            1588,1571,702,574,1372,1,1,1,1,1,
            1,1,1,1,1,1,1,190,1,1,
            1,1,1,2019,1,58,191,1072,1,2215,
            1,1,1,66,1,1,1,1,1,1,
            1,1,1,1,1,1,71,286,1,2019,
            2030,60,1217,2022,2031,1,1,1,1,220,
            1,1588,1571,702,574,714,1,1,1,1,
            1,1,1,1,1,1,1,1,191,1,
            1,1,1,1,2019,2030,610,1458,2019,2031,
            2215,2233,2234,2235,42,2339,2340,2341,2342,2343,
            2344,2345,2346,2347,2348,1302,2354,2019,48,2182,
            50,1432,1796,2019,1796,88,2183,2181,2236,2184,
            3294,2180,1588,1571,702,574,1372,2187,2192,2191,
            2189,2190,2188,2193,2194,2186,2195,2196,2197,129,
            2350,2349,1166,737,669,820,2233,2234,2235,67,
            2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,
            1302,2354,62,1,2182,1684,2025,2019,211,714,
            2025,2183,2181,2236,2184,57,2180,1788,1780,1788,
            1780,69,2187,2192,2191,2189,2190,2188,2193,2194,
            2186,2195,2196,2197,2024,2350,2349,20,2024,2010,
            2010,2010,2019,2010,179,179,179,2019,179,179,
            179,179,179,179,179,179,179,179,179,179,
            2019,49,179,2019,670,1796,56,1432,2010,179,
            179,179,179,130,179,2019,610,1458,1537,1504,
            2233,2234,2235,1155,2339,2340,2341,2342,2343,2344,
            2345,2346,2347,2348,1302,2354,2019,268,2182,1684,
            1389,253,1135,714,131,2183,2181,2236,2184,51,
            2180,2233,2234,2235,2019,2339,2340,2341,2342,2343,
            2344,2345,2346,2347,2348,1302,2354,610,1458,2182,
            1788,1780,1249,621,2019,132,2183,2181,2236,2184,
            1416,2180,2233,2234,2235,2019,2339,2340,2341,2342,
            2343,2344,2345,2346,2347,2348,1302,2354,1,2019,
            2182,2019,2025,1443,1447,2019,133,2183,2181,2236,
            2184,2353,2180,2233,2234,2235,2019,2339,2340,2341,
            2342,2343,2344,2345,2346,2347,2348,1302,2354,1920,
            2024,2182,1,2030,1820,2023,1623,2031,2183,2181,
            2236,2184,2032,2180,2019,262,2245,1290,338,1,
            1,714,222,90,1945,1756,1748,763,714,1772,
            1312,812,2277,1,2013,1290,2025,2019,679,714,
            2033,2034,2035,1733,1484,2019,2030,1820,2023,1714,
            2031,90,1,2245,1599,2032,1696,1693,2362,2361,
            2363,2365,2364,1912,2024,2019,256,2022,1756,1748,
            1114,53,1772,1312,812,2353,268,2245,1290,2019,
            253,679,714,2033,2034,2035,1733,1484,1,2030,
            1820,29,1764,2031,1249,621,1268,2019,2032,1696,
            1693,2362,2361,2363,2365,2364,1912,2019,185,3365,
            2022,1756,1748,3365,3294,1772,1312,812,2019,1,
            249,249,249,249,679,249,2033,2034,2035,1733,
            1484,2019,2030,1820,2023,1764,2031,184,3383,206,
            3388,2032,3383,29,3388,2019,2019,2377,2027,249,
            249,2019,2030,64,1756,1748,2031,2019,1772,1312,
            812,63,1,250,250,250,250,679,250,2033,
            2034,2035,1733,1484,2019,1,1,1557,1,1,
            1469,43,65,1808,1,2019,2030,1,55,2019,
            2031,253,250,250,52,2019,2022,1,1,1303,
            2026,1,1,1,2019,337,2019,2029,231,1469,
            1,1609,1,1,1,1,1,1249,621,1,
            2030,1820,30,1764,2031,32,2019,1910,1947,2032,
            2019,1805,1812,2019,1483,231,231,1537,1504,208,
            2030,2335,1756,1748,2031,3294,1772,1312,812,610,
            1458,2277,586,2045,2046,679,1051,2033,2034,2035,
            1733,1484,2019,2030,1820,2019,1764,2031,231,2019,
            2028,231,2032,1030,1009,988,967,946,904,925,
            883,862,841,30,285,1756,1748,557,3294,1772,
            1312,812,2019,1245,336,2025,1,230,679,2025,
            2033,2034,2035,1733,1484,2019,2030,1820,1,1764,
            2031,2029,292,2048,735,2032,207,1341,1176,1,
            2016,1341,1633,2024,230,230,2019,2024,1756,1748,
            1,2019,1772,1312,812,253,2245,1599,207,557,
            644,679,2019,2033,2034,2035,1733,1484,2019,2030,
            1835,2019,1764,2031,353,189,1844,230,2032,352,
            230,1890,2019,2257,2353,2019,2019,2019,3326,2353,
            2019,1756,1748,189,2028,1772,1312,812,189,2019,
            1531,185,2019,2277,679,2019,2033,2034,2035,1733,
            1484,1,2030,1820,2276,1764,2031,2019,2019,184,
            2019,2032,2019,2019,206,2019,2019,2019,2019,2019,
            2019,2019,2019,2019,1756,1748,2019,2019,1772,1312,
            812,2019,2019,2019,2019,2019,2019,679,2019,2033,
            2034,2035,1733,1484,2019,2233,2234,2235,2019,2339,
            2340,2341,2342,2343,2344,2345,2346,2347,2348,1302,
            2354,248,2019,2019,2019,2019,2019,2019,2233,2234,
            2235,2019,2339,2340,2341,2342,2343,2344,2345,2346,
            2347,2348,1302,2354,251,2019,2019,2019,2019,2019,
            2019,2233,2234,2235,2019,2339,2340,2341,2342,2343,
            2344,2345,2346,2347,2348,1302,2354,252,2019,2019,
            2019,2019,2019,2019,2233,2234,2235,2019,2339,2340,
            2341,2342,2343,2344,2345,2346,2347,2348,1302,2354
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            452,1,88,41,88,88,88,88,88,88,
            88,88,88,470,3,23,20,27,25,33,
            31,35,34,37,36,9,88,470,239,239,
            250,470,522,522,530,88,88,88,88,88,
            88,88,88,88,88,88,88,88,88,88,
            88,88,88,88,88,88,88,88,88,88,
            88,88,88,88,88,88,239,68,450,70,
            346,237,236,197,122,211,66,211,66,66,
            211,66,211,484,136,239,45,20,20,25,
            25,25,25,23,23,31,27,27,34,33,
            248,36,35,306,297,68,250,450,73,45,
            181,106,239,409,349,123,66,522,522,66,
            522,88,297,50,450,219,181,45,105,70,
            239,234,484,238,351,239,68,256,68,300,
            50,219,219,88,88,45,106,400,346,243,
            242,450,351,239,68,256,300,300,302,133,
            219,181,45,45,400,239,409,349,234,256,
            297,125,256,300,302,525,302,297,48,528,
            522,88,132,181,219,395,393,393,103,395,
            351,256,127,302,297,88,522,3,52,45,
            522,88,219,123,123,545,239,238,297,342,
            88,341,101,450,297,45,239,239,523,395,
            523,127,88,101,238,523
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            102,0,6,2,68,89,28,29,75,92,
            93,94,95,96,98,97,99,100,101,4,
            69,70,23,24,62,61,71,72,73,74,
            76,77,27,78,79,80,55,66,90,91,
            63,31,102,30,65,3,0,3,55,6,
            68,28,29,27,4,23,24,41,42,36,
            2,10,38,39,40,1,5,26,0,65,
            3,25,7,8,9,11,12,13,14,15,
            16,17,18,19,20,21,22,10,38,39,
            40,5,28,29,27,23,24,41,42,36,
            4,1,2,0,25,65,3,28,29,27,
            4,23,24,41,42,36,1,5,38,39,
            40,2,10,0,66,3,4,1,2,63,
            0,75,6,68,0,25,37,35,34,33,
            32,68,89,28,29,27,23,24,69,70,
            61,62,71,72,73,74,76,77,78,79,
            80,90,91,75,92,93,94,95,96,97,
            98,99,100,101,30,3,6,2,4,31,
            7,8,9,11,12,13,14,15,16,17,
            18,19,20,21,22,0,51,43,48,46,
            47,45,44,49,50,52,53,54,57,56,
            63,66,37,33,25,32,35,34,7,8,
            9,11,12,13,14,15,16,17,18,19,
            20,21,22,4,1,2,6,30,31,3,
            0,2,3,30,31,66,6,63,0,3,
            31,4,2,6,0,32,43,7,44,58,
            33,45,34,46,47,35,8,48,49,25,
            59,37,60,50,51,9,52,53,54,1,
            5,11,12,13,14,15,16,17,56,18,
            19,20,57,21,22,67,3,55,0,1,
            5,3,55,30,0,27,4,23,24,69,
            70,61,62,71,72,73,74,76,77,78,
            79,80,90,91,75,92,93,94,95,96,
            97,98,99,100,101,65,31,55,102,26,
            63,66,3,30,0,4,2,6,31,3,
            32,43,7,44,58,33,45,34,46,47,
            35,8,48,49,25,59,37,60,50,51,
            9,52,53,54,1,5,11,12,13,14,
            15,16,17,56,18,19,20,57,21,22,
            64,0,10,2,3,63,30,31,66,81,
            82,83,84,85,86,87,88,0,32,43,
            7,44,58,33,45,34,46,47,35,8,
            48,49,25,59,37,60,50,51,9,52,
            53,54,1,5,11,12,13,14,15,16,
            17,56,18,19,20,57,21,22,64,4,
            0,36,10,38,39,40,1,5,2,28,
            29,27,4,23,24,41,42,67,0,36,
            10,38,39,40,2,28,29,27,4,23,
            24,41,42,58,59,60,51,43,48,46,
            47,45,44,49,50,52,53,54,57,56,
            37,33,25,32,35,22,21,11,12,13,
            14,15,16,17,18,19,20,7,8,9,
            34,5,1,0,3,30,55,75,0,36,
            10,38,39,40,5,2,28,29,27,4,
            23,24,41,42,1,31,3,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static char nasb[] = {0,
            114,73,23,73,23,23,23,23,23,23,
            23,23,23,117,73,73,73,73,73,73,
            73,73,73,73,73,73,23,117,133,133,
            103,1,41,41,129,118,23,23,23,23,
            23,23,23,23,23,23,23,23,23,23,
            23,23,118,23,23,23,23,23,23,23,
            23,23,23,23,23,23,133,78,15,37,
            102,18,18,54,74,55,33,55,47,47,
            55,46,55,49,73,133,39,73,73,73,
            73,73,73,73,73,73,73,73,73,73,
            73,73,73,78,72,73,11,73,43,39,
            107,38,133,109,132,74,7,7,7,7,
            7,23,9,72,73,86,107,39,38,76,
            133,67,25,73,111,133,92,72,73,72,
            21,86,72,23,23,39,38,72,66,18,
            18,15,111,133,73,121,72,7,60,35,
            72,107,39,39,94,133,109,132,81,72,
            9,57,62,7,60,73,73,9,20,73,
            7,23,90,107,76,88,74,74,73,73,
            125,121,69,60,9,23,7,98,22,39,
            7,23,76,74,74,132,133,133,9,58,
            23,73,69,15,9,39,133,133,96,73,
            73,69,23,83,133,100
        };
    };
    public final static char nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            83,81,80,70,79,78,1,0,43,0,
            47,46,30,0,30,55,0,29,0,91,
            11,57,5,0,83,82,81,80,70,79,
            78,0,98,0,107,0,11,5,27,0,
            75,0,5,11,0,101,71,0,70,65,
            66,67,68,58,31,0,11,74,0,64,
            0,11,54,72,0,21,47,46,38,36,
            42,11,0,49,0,22,0,57,51,0,
            47,46,38,36,42,30,0,92,0,109,
            0,99,0,110,0,111,0,105,0,95,
            0,21,46,47,11,0,61,0,30,55,
            11,28,0,11,96,0,54,11,50,0,
            85,11,54,0,102,11,28,0,11,97,
            0,11,21,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,87,9,86,1,48,64,76,81,
            93,94,95,96,97,98,99,101,102,103,
            105,106,10,11,69,3,8,6,7,42,
            90,44,55,60,63,68,72,82,83,84,
            12,13,47,52,56,61,62,66,67,74,
            75,78,79,80,91,100,104,54,70,73,
            16,17,29,30,89,92,117,4,14,15,
            18,19,20,21,31,22,23,24,25,26,
            107,108,109,110,111,112,113,114,5,27,
            28,32,33,34,35,36,37,38,39,40,
            41,118,45,46,49,50,51,53,57,58,
            59,65,71,77,88,115,116
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            124,0,0,0,126,130,131,132,133,134,
            0,135,136,137,138,139,140,141,0,142,
            121,152,0,0,0,0,120,145,173,0,
            151,0,0,0,169,171,0,172,0,0,
            0,191,122,0,182,183,184,0,190,125,
            129,144,160,164,170,179,0,154,0,174,
            177,178,181,0,155,156,157,158,159,161,
            0,163,168,123,127,128,143,146,147,148,
            149,150,153,0,162,166,0,0,167,176,
            186,193,0,0,195,119,0,0,0,165,
            0,175,180,185,0,187,188,0,189,192,
            194,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            87,118,97,55,61,126,34,141,11,43,
            71,11,48,67,108,157,167,171,150,1,
            23,23,52,76,84,175,28,112,161,132,
            104,6,6,6,6,6
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            95,95,95,26,26,95,40,147,16,16,
            26,16,16,26,106,16,16,26,154,4,
            26,26,16,26,16,16,31,115,164,135,
            106,8,8,18,79,18
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            67,65,67,29,29,65,51,119,42,48,
            29,41,48,29,72,6,5,5,19,41,
            109,108,46,29,38,3,91,72,5,120,
            72,42,41,42,39,41
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            55,55,55,65,65,55,55,108,31,31,
            65,31,31,65,66,31,31,65,63,81,
            65,65,31,65,31,31,75,1,31,114,
            66,2,2,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            23,23,23,27,27,23,17,0,9,31,
            27,9,31,27,5,38,38,38,67,9,
            1,3,31,27,9,38,93,5,38,0,
            5,9,9,9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            128,159,0,227,0,155,0,2,138,0,
            177,128,2,155,0,138,0,2,128,177,
            138,0,169,6,0,144,0,223,128,0,
            75,186,0,181,221,128,26,174,0,160,
            222,0,177,128,2,163,0,177,128,2,
            0,180,2,0,137,25,207,128,6,0,
            137,207,128,25,6,0,137,25,6,0,
            137,207,128,6,0,137,6,0,2,128,
            219,138,0,170,2,0,181,205,128,26,
            118,218,58,0,160,0,181,205,128,26,
            218,58,0,171,0,191,0,217,128,171,
            0,128,171,0,217,191,0,201,128,26,
            216,118,215,187,0,201,128,26,215,187,
            0,232,107,0,114,2,167,138,191,0,
            232,138,167,2,111,0,108,232,0,167,
            91,135,0,63,137,0,193,2,36,0,
            193,2,0,138,168,0,214,2,122,0,
            167,6,122,0,167,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1417,0,699,0,1880,1280,1832,0,1662,1483,
            1599,1415,1383,1290,1247,0,644,586,516,1612,
            1349,0,608,1239,481,0,1529,1146,636,543,
            1383,1290,1247,508,1684,1555,0,1714,1623,1372,
            1354,1432,1389,1537,1504,1469,1458,610,1588,1571,
            702,574,1796,1788,1780,1249,621,1312,812,1772,
            1764,1756,1748,1733,1484,679,1217,1196,1176,644,
            1155,1135,1114,1093,784,1072,763,714,1051,1030,
            1009,988,967,946,925,904,883,862,841,481,
            820,742,586,516,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,213,128,194,36,42,41,24,23,4,
            27,29,28,2,122,126,125,129,127,131,
            130,133,132,135,134,123,30,2,193,167,
            171,128,89,68,2,6,24,23,70,69,
            4,74,73,72,71,61,62,27,77,76,
            79,78,91,90,80,101,100,99,97,98,
            96,95,94,93,92,75,193,138,128,6,
            2,164,163,195,21,196,187,197,60,59,
            198,58,199,200,118,214,167,125,125,127,
            127,127,127,126,126,130,129,129,132,131,
            167,134,133,138,26,174,172,147,25,137,
            128,4,180,128,2,2,215,188,188,218,
            188,63,128,26,147,4,128,137,207,178,
            177,145,128,179,128,166,118,26,118,26,
            128,4,147,207,25,137,4,159,2,153,
            155,128,30,177,216,128,26,128,221,128,
            147,128,137,137,128,170,128,2,172,26,
            201,171,202,128,205,118,206,181,30,223,
            68,6,224,128,178,227,82,81,88,138,
            128,128,128,205,181,75,30,160,75,169,
            68,6,178,2,2,2,177,219,201,217,
            63,170,2,128,181,169,166,166,128,138,
            30,30,63,172,228,30
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "__data",
            "__near",
            "__xdata",
            "__far",
            "__idata",
            "__pdata",
            "__code",
            "__bit",
            "__sfr",
            "__sfr16",
            "__sfr32",
            "__sbit",
            "__at",
            "__banked",
            "__interrupt",
            "__using",
            "__reentrant",
            "__critical",
            "__naked",
            "__wparam",
            "__shadowregs",
            "__preserves__regs",
            "__asm",
            "__endasm",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_cast_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "and_expression",
            "exclusive_or_expression",
            "inclusive_or_expression",
            "logical_and_expression",
            "logical_or_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "initializer_seq",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "absolute_address",
            "original_function_direct_decla" +
            "rator",
            "sdcc_function_attributes",
            "sdcc_function_attribute",
            "preserves_regs_args",
            "preserves_regs_arg"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
