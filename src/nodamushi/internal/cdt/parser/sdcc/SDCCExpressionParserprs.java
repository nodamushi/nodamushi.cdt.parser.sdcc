/*******************************************************************************
* Copyright (c) 2006, 2010 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package nodamushi.internal.cdt.parser.sdcc;

public class SDCCExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, SDCCExpressionParsersym {
    public final static int ERROR_SYMBOL = 67;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 51;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 52;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 38;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 229;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 117;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 2708;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 2;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 482;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 143;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 260;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 2024;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 102;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 102;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 2123;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 2226;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = true;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return SDCCExpressionParsersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,1,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,1,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,1,
            0,0,0,0,0,0,0,0,0,0,
            1,0,0,0,0,0,0,1,0,0,
            0,0,0,0,0,0,0,0,0,1,
            0,0,0,1,0,0,0,0,0,0,
            0,0,0,0,1,1,1,0,1,0,
            0,0,1,0,0,0,0,0,0,0,
            1,0,0,0,0,0,0,0,0,0,
            0,0,1,0,0,0,0,0,1,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static char prosthesesIndex[] = {0,
            9,10,11,12,14,20,21,22,23,24,
            3,25,26,27,28,29,30,31,32,33,
            6,58,87,127,128,129,5,49,95,103,
            37,35,56,57,59,70,13,79,88,90,
            91,92,93,94,96,131,7,18,108,109,
            110,111,112,69,89,105,17,61,71,97,
            102,104,107,19,62,63,64,65,68,72,
            76,78,86,8,16,36,51,52,53,54,
            55,60,74,77,81,82,84,85,101,115,
            130,133,134,135,136,138,2,15,73,75,
            80,83,99,106,113,114,116,117,118,119,
            132,137,1,4,34,38,39,40,41,42,
            43,44,45,46,47,48,50,66,67,98,
            100,120,121,122,123,124,125,126,139,140,
            141,142,143
        };
    };
    public final static char prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,3,1,
            1,4,4,3,3,2,2,4,1,0,
            1,1,2,2,2,2,2,2,2,2,
            2,4,1,4,1,3,3,3,1,3,
            3,1,3,3,1,3,3,3,3,1,
            3,3,1,3,1,3,1,3,1,3,
            1,3,1,5,1,3,3,3,3,3,
            3,3,3,3,3,3,1,1,2,1,
            0,1,3,1,1,1,1,1,1,1,
            1,3,4,3,2,4,1,2,1,1,
            1,2,5,7,5,1,0,7,2,5,
            9,8,3,2,2,2,3,2,4,2,
            2,2,2,2,1,1,1,1,2,1,
            2,2,2,1,2,2,1,2,2,1,
            2,2,1,2,2,1,3,1,3,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            6,8,0,0,1,1,3,3,3,0,
            1,0,1,2,4,2,1,1,1,3,
            1,1,2,3,7,8,0,1,0,1,
            3,1,3,1,1,1,1,1,1,3,
            1,1,1,1,1,3,1,2,2,1,
            5,3,1,3,5,1,3,1,3,2,
            4,3,5,4,6,6,3,5,1,3,
            4,5,6,0,1,2,1,3,1,1,
            3,2,1,1,1,1,2,1,2,3,
            1,1,1,3,1,2,2,2,3,4,
            5,1,1,7,3,0,0,1,1,3,
            3,4,1,1,2,3,2,3,2,1,
            0,1,2,1,1,1,1,1,2,1,
            3,6,4,2,4,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,4,2,1,1,5,3,3,1,
            2,1,1,1,1,1,1,1,4,2,
            4,2,1,1,1,3,5,1,3,1,
            1,1,2,5,3,1,2,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,-37,0,0,0,0,0,0,0,
            0,0,0,-34,0,0,0,0,0,0,
            0,0,0,-106,0,0,0,0,0,-120,
            0,-121,0,-2,0,0,0,0,0,-74,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-200,0,-108,-4,0,0,0,0,
            0,0,0,-122,0,0,0,-14,0,0,
            0,0,0,0,0,-119,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-6,0,0,0,0,
            0,0,0,0,-123,0,0,0,-163,-30,
            0,-83,0,0,-55,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-144,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-136,0,-47,0,0,0,
            0,0,0,0,0,0,0,-38,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-16,0,-17,0,0,0,0,
            0,-132,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-175,0,0,0,0,0,
            0,0,0,0,0,0,-127,-81,-18,-31,
            0,0,0,0,0,0,0,0,0,-182,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -133,-202,0,0,0,0,0,0,0,0,
            0,0,-19,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-35,
            -68,-69,0,-53,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-20,0,-49,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-3,0,0,0,0,0,0,0,0,
            0,0,-70,0,0,0,0,0,0,0,
            0,0,-79,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-43,0,0,0,0,0,0,0,
            0,0,0,0,-112,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-124,0,0,-27,0,
            0,0,0,0,0,0,0,0,0,-141,
            0,0,0,0,0,0,0,0,0,-21,
            0,-22,-57,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-58,0,0,0,0,0,0,
            0,0,0,0,-116,0,0,0,0,0,
            0,0,0,0,-59,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-60,0,0,0,0,
            0,0,0,0,0,0,-134,0,0,0,
            0,0,0,0,0,0,-61,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-62,0,0,
            0,0,0,0,0,0,0,0,-139,0,
            0,0,0,0,0,0,0,0,-63,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-64,
            0,0,0,0,0,0,0,0,0,0,
            -157,0,0,0,0,0,0,0,0,0,
            -65,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-66,0,0,0,0,0,0,0,0,
            0,0,-169,0,0,0,0,0,0,0,
            0,0,-67,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-125,0,0,0,0,0,0,
            0,0,0,0,-210,0,0,0,0,0,
            0,0,0,0,-147,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-148,0,0,0,0,
            0,0,0,0,0,0,-211,0,0,0,
            0,0,0,0,0,0,-185,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-199,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-205,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-207,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-208,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-214,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-226,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-88,0,-143,-184,
            0,-78,-196,-126,-84,-107,-146,0,-23,0,
            -129,-71,-24,0,-186,-201,-213,0,0,0,
            0,0,0,0,0,0,0,0,-135,0,
            0,0,0,-189,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-25,
            0,-204,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-152,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-33,0,-76,-174,-26,0,0,0,-89,
            0,0,0,-113,0,-115,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-181,0,0,0,0,0,-90,
            -91,0,0,-56,0,0,0,0,0,0,
            0,0,0,0,-172,0,0,0,0,0,
            -52,0,0,0,0,0,0,0,0,0,
            0,-225,0,0,0,0,-92,-93,-77,-145,
            0,-131,0,0,0,-7,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-94,-95,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-5,0,
            0,0,0,0,0,0,-50,0,0,0,
            0,0,0,0,0,0,0,-96,0,-51,
            0,0,0,0,0,0,0,0,0,0,
            -86,0,-97,-161,0,-98,0,0,-44,0,
            0,0,0,0,0,0,0,0,0,-45,
            0,0,0,0,0,0,0,0,0,0,
            -46,0,0,0,0,0,0,0,0,0,
            0,-216,-48,0,0,0,0,0,0,0,
            0,0,0,-72,0,0,0,0,0,0,
            0,-39,0,0,0,0,0,0,0,0,
            -99,0,-162,-229,-80,-100,0,-177,0,-198,
            0,0,0,0,0,0,0,0,-101,-82,
            0,0,-151,-102,-85,0,0,0,0,0,
            0,0,0,0,-73,-155,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-87,0,0,0,0,0,0,0,0,
            0,-227,-103,-104,0,0,0,-75,-153,-154,
            -140,-118,-171,0,0,0,0,0,0,-105,
            0,-212,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-150,0,
            0,0,0,0,0,0,0,0,0,0,
            -8,0,0,0,0,0,0,0,0,-109,
            0,-111,-128,-222,-178,0,-9,0,0,0,
            0,0,0,0,-10,0,0,0,0,0,
            0,0,-11,0,0,0,0,0,0,0,
            -36,-40,0,0,0,0,0,0,0,-114,
            0,0,-41,0,0,0,0,0,0,0,
            -42,0,0,0,0,0,0,0,-117,0,
            -32,0,0,0,0,0,-209,-160,0,0,
            -137,0,-130,-164,-170,-142,-149,0,0,0,
            0,0,0,-190,0,0,0,0,0,-217,
            -166,-197,0,0,0,0,0,0,0,0,
            0,-158,0,0,0,-12,0,0,0,0,
            0,0,-167,0,0,0,-179,0,0,0,
            0,-13,0,0,0,0,0,0,0,0,
            0,-15,-180,0,0,-110,0,-173,-28,0,
            -183,-192,0,-159,0,-29,-193,-215,0,0,
            -223,-194,-191,-203,0,0,0,-168,0,0,
            -224,0,0,0,0,0,0,-165,0,0,
            0,0,0,0,-187,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-195,0,0,0,0,0,
            0,-138,0,-219,-220,0,0,0,0,0,
            0,0,0,0,-188,0,0,0,-218,-206,
            -176,0,0,-1,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-221,-54,0,0,-156,0,0,-228,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            97,11,114,27,27,21,21,47,47,74,
            74,1,1,2,2,2,2,3,3,3,
            4,5,5,5,5,5,5,5,5,64,
            64,75,6,6,6,6,6,6,6,6,
            6,6,6,7,7,8,8,8,8,9,
            9,9,10,10,10,12,12,12,12,12,
            13,13,13,14,14,15,15,16,16,17,
            17,18,18,19,19,20,20,20,20,20,
            20,20,20,20,20,20,20,115,37,32,
            98,98,76,76,31,116,116,116,116,116,
            116,116,117,117,117,118,118,123,123,124,
            124,119,119,120,120,120,126,126,121,121,
            121,121,121,122,122,122,122,122,125,125,
            28,28,28,28,28,33,33,33,82,82,
            77,77,77,77,78,78,78,79,79,79,
            80,80,80,81,81,81,127,127,128,128,
            129,34,36,36,36,36,36,58,59,59,
            59,59,59,59,59,59,59,59,59,59,
            68,65,65,99,100,70,70,66,66,66,
            71,83,83,84,84,72,72,72,38,101,
            101,85,86,86,86,67,67,102,87,87,
            88,88,73,73,22,23,23,23,35,54,
            54,39,39,39,39,42,42,44,40,40,
            41,45,45,130,130,43,131,131,103,103,
            29,29,29,29,29,29,29,29,29,89,
            55,55,55,55,30,61,61,60,60,60,
            62,62,56,56,104,104,57,57,63,63,
            63,49,49,49,50,51,51,51,52,52,
            52,52,69,69,48,48,53,106,105,105,
            105,105,90,107,108,108,109,109,110,110,
            132,132,133,133,134,134,134,134,136,136,
            135,135,135,137,138,138,97,97,22,22,
            22,24,24,24,24,24,24,24,59,59,
            59,59,59,25,25,91,26,46,46,45,
            111,111,92,92,92,92,92,92,92,93,
            93,93,93,93,93,95,94,94,112,112,
            96,116,116,139,140,140,141,141,142,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,1,1450,17,21,18,558,1446,
            45,676,674,763,670,719,920,804,1369,922,
            1410,1373,75,92,516,136,214,318,319,320,
            500,1741,192,188,215,1654,138,135,137,161,
            395,20,17,21,18,558,1446,45,676,674,
            763,1840,719,920,804,1369,922,1410,1373,75,
            1454,140,167,192,1917,6,93,240,144,147,
            150,153,28,718,192,187,1364,1800,967,546,
            1362,1675,1690,1695,1722,1357,853,20,17,21,
            18,558,43,45,676,674,763,483,719,920,
            804,1369,922,1410,1373,94,743,20,17,21,
            18,558,43,40,198,556,1876,335,88,974,
            192,31,314,780,1831,743,20,17,21,18,
            558,43,45,676,674,763,211,719,920,804,
            1369,922,1734,494,691,20,17,21,18,558,
            1446,45,676,674,763,599,719,920,804,1369,
            922,1410,1373,75,282,245,180,743,20,17,
            21,18,558,43,45,676,1588,1039,743,20,
            17,21,18,558,43,45,1490,136,214,318,
            319,320,283,512,125,25,65,1800,138,135,
            137,161,417,20,17,21,18,558,1446,45,
            676,674,763,288,719,920,804,1369,922,1410,
            1373,75,1877,140,167,814,1941,1375,294,241,
            144,147,150,153,289,718,1363,6,53,69,
            192,31,1362,1675,1690,1695,1722,1357,624,1673,
            450,20,17,21,18,558,1446,45,676,674,
            763,599,719,920,804,1369,922,1410,1373,75,
            282,863,717,20,17,21,18,558,1446,45,
            676,674,763,34,719,920,804,1369,922,1410,
            1373,75,282,256,214,318,319,320,283,196,
            670,670,670,1800,743,20,17,21,18,558,
            43,45,676,674,763,24,719,920,1694,290,
            283,19,504,1366,439,1800,743,20,17,21,
            18,558,43,45,676,674,763,510,719,1606,
            291,292,743,20,17,21,18,558,1446,45,
            676,674,763,670,719,920,804,1369,922,1410,
            1373,75,92,809,20,17,21,18,558,43,
            45,676,674,763,23,719,920,804,1369,922,
            1410,1373,94,743,20,17,21,18,558,43,
            45,676,674,1527,335,831,20,17,21,18,
            558,1446,45,676,674,763,1873,719,920,804,
            1369,922,1410,1373,75,1532,192,189,546,743,
            20,17,21,18,558,1446,45,676,674,763,
            6,719,920,804,1369,922,1410,1373,75,93,
            254,1944,187,743,20,17,21,18,558,1446,
            45,676,674,763,334,719,920,804,1369,922,
            1410,1373,75,86,743,20,17,21,18,558,
            1446,45,676,674,763,670,719,920,804,1369,
            922,1410,1373,75,85,743,20,17,21,18,
            558,1446,45,676,674,763,274,719,920,804,
            1369,922,1410,1373,75,84,743,20,17,21,
            18,558,1446,45,676,674,763,670,719,920,
            804,1369,922,1410,1373,75,83,743,20,17,
            21,18,558,1446,45,676,674,763,280,719,
            920,804,1369,922,1410,1373,75,82,743,20,
            17,21,18,558,1446,45,676,674,763,670,
            719,920,804,1369,922,1410,1373,75,81,743,
            20,17,21,18,558,1446,45,676,674,763,
            333,719,920,804,1369,922,1410,1373,75,80,
            743,20,17,21,18,558,1446,45,676,674,
            763,670,719,920,804,1369,922,1410,1373,75,
            79,743,20,17,21,18,558,1446,45,676,
            674,763,281,719,920,804,1369,922,1410,1373,
            75,78,743,20,17,21,18,558,1446,45,
            676,674,763,670,719,920,804,1369,922,1410,
            1373,75,77,743,20,17,21,18,558,1446,
            45,676,674,763,226,719,920,804,1369,922,
            1410,1373,75,76,743,20,17,21,18,558,
            1446,45,676,674,763,670,719,920,804,1369,
            922,1410,1373,75,74,743,20,17,21,18,
            558,1446,45,676,674,763,1951,719,920,804,
            1369,922,1410,1373,75,1891,743,20,17,21,
            18,558,1446,45,676,674,763,529,719,920,
            804,1369,922,1410,1373,75,1913,743,20,17,
            21,18,558,43,45,676,674,763,235,719,
            920,804,1369,922,1410,1373,94,743,20,17,
            21,18,558,43,45,676,674,763,1954,719,
            920,804,1369,922,1410,1373,94,743,20,17,
            21,18,558,43,45,676,674,763,213,719,
            920,804,1369,922,1410,1373,94,743,20,17,
            21,18,558,43,45,676,674,763,2004,719,
            920,804,1369,922,1410,1373,94,743,20,17,
            21,18,558,43,45,676,674,763,2005,719,
            920,804,1369,922,1410,1373,94,743,20,17,
            21,18,558,43,45,676,674,763,2053,719,
            920,804,1369,922,1410,1373,94,743,20,17,
            21,18,558,43,45,676,674,763,203,719,
            920,804,1369,922,1410,1373,94,245,180,6,
            192,297,297,81,792,362,578,955,204,278,
            1604,11,586,157,1890,983,186,770,1968,136,
            214,318,319,320,136,214,318,319,320,70,
            139,135,137,161,866,143,135,137,161,22,
            1706,1367,219,1739,222,1740,224,225,230,1693,
            199,285,192,299,28,141,167,1948,275,1800,
            142,167,145,148,151,154,980,718,219,1739,
            222,1740,224,225,230,1693,554,1875,268,1529,
            1444,273,6,264,597,792,841,278,199,201,
            355,195,265,822,586,275,616,20,17,21,
            18,558,43,36,1377,219,1739,222,1740,224,
            225,230,1693,276,88,268,1529,1444,273,1372,
            1123,242,284,247,792,295,341,342,348,955,
            361,405,181,262,743,20,17,21,18,558,
            43,45,676,674,763,306,719,920,804,1369,
            1750,743,20,17,21,18,558,43,45,676,
            674,763,81,719,920,804,1689,133,156,652,
            11,1376,586,1890,275,1803,743,20,17,21,
            18,558,43,39,220,1739,222,1740,224,225,
            230,1693,411,433,270,1529,1444,273,277,244,
            1874,219,1739,222,1740,224,225,230,1693,765,
            20,17,21,18,558,41,1948,743,20,17,
            21,18,558,43,45,676,674,763,548,1671,
            743,20,17,21,18,558,43,45,676,674,
            763,372,1676,588,660,1917,663,200,201,743,
            20,17,21,18,558,43,45,676,674,1528,
            743,20,17,21,18,558,43,45,676,674,
            1552,743,20,17,21,18,558,43,45,676,
            674,1553,255,743,20,17,21,18,558,43,
            45,676,1603,1890,665,20,17,21,18,558,
            43,44,743,20,17,21,18,558,43,45,
            1491,130,896,825,756,483,191,210,660,1917,
            792,219,1739,222,1740,224,225,230,1693,386,
            514,1805,1933,6,707,545,1123,136,214,318,
            319,320,28,595,1958,11,11,1800,146,135,
            137,161,136,214,318,319,320,136,214,318,
            319,320,576,149,135,137,161,205,152,135,
            137,161,687,312,484,1802,1802,1484,1005,1011,
            731,64,896,896,136,214,318,319,320,1859,
            517,210,792,2002,1952,155,135,137,161,278,
            1936,1505,1803,279,1947,1892,1933,275,229,228,
            359,220,1739,222,1740,224,225,230,1693,616,
            20,17,21,18,558,43,36,268,1529,1444,
            273,743,20,17,21,18,558,43,38,182,
            579,955,32,367,756,884,248,743,20,17,
            21,18,558,43,37,743,20,17,21,18,
            558,43,36,743,20,17,21,18,558,43,
            35,250,743,20,17,21,18,558,43,48,
            463,1902,1705,743,20,17,21,18,558,43,
            47,743,20,17,21,18,558,43,46,74,
            275,498,255,214,318,319,320,896,6,1680,
            645,593,822,463,961,74,648,586,1804,1678,
            268,1529,1444,273,867,1975,645,1389,356,1802,
            11,586,884,90,267,255,214,318,319,320,
            358,751,847,1389,243,1802,787,20,17,21,
            18,558,34,586,1936,260,2060,79,245,997,
            1802,1871,787,20,17,21,18,558,33,682,
            1505,260,6,898,751,997,523,1871,6,6,
            246,845,478,483,62,1732,6,968,690,1995,
            483,970,565,998,586,645,2019,483,359,833,
            198,800,1175,645,88,275,1803,198,463,780,
            1831,88,198,2226,198,463,780,1831,88,352,
            1389,296,705,780,1831,270,1529,1444,273,494,
            255,214,318,319,320,184,781,255,214,318,
            319,320,678,782,586,670,645,2226,260,2226,
            2226,2226,1165,645,1871,881,193,2226,2226,792,
            899,123,2226,198,638,2226,351,1445,2021,2015,
            1389,298,645,705,2226,822,2020,256,214,318,
            319,320,256,214,318,319,320,2226,350,198,
            340,342,348,670,6,1207,88,714,260,705,
            986,316,1081,2226,1871,822,206,193,645,1394,
            2226,2226,2226,2226,349,2226,2226,2226,1752,2021,
            2226,357,2226,2226,2226,1389,88,2226,2226,2226,
            2226,1733,2226,194,2226,2226,2226,2226,2226,2226,
            2226,2226,2226,2226,2226,2226,2226,2226,2226,2226,
            2226,2226,2226,261,2226,2226,2226,2226,2226,2226,
            2226,514,2226,0,2253,32,0,2252,32,0,
            1861,32,0,1442,32,0,658,52,0,1662,
            52,0,1851,49,0,806,65,0,20,180,
            0,1851,51,0,1851,50,0,658,54,0,
            1662,54,0,658,53,0,1662,53,0,806,
            66,0,1,1569,0,1,586,0,1,1536,
            0,1,1791,0,1,1807,0,1,1815,0,
            1,1823,0,1,1906,0,1,1922,0,1,
            2238,0,1,2237,0,1,2242,0,1,2241,
            0,1,2240,0,1,2239,0,1,1932,0,
            1,2453,0,1,2464,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            0,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,0,32,0,3,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,0,53,54,55,56,57,58,59,
            60,0,1,0,0,4,5,3,0,0,
            1,2,3,0,13,14,3,16,0,10,
            0,1,2,22,23,24,25,26,27,28,
            29,30,0,32,61,62,35,36,37,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,0,1,0,33,4,5,67,0,
            6,7,0,69,70,13,14,64,16,71,
            72,73,74,63,22,23,24,25,26,27,
            28,29,30,75,32,0,0,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,0,1,0,0,4,5,67,
            0,0,1,61,62,4,13,14,0,16,
            71,72,73,74,0,22,23,24,25,26,
            27,28,29,30,0,32,61,62,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,0,1,90,91,4,0,
            67,2,3,0,0,1,2,13,14,10,
            16,71,72,73,74,79,22,23,24,25,
            26,27,28,29,30,0,32,0,80,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,0,53,54,55,
            56,57,58,59,60,0,1,2,3,13,
            14,0,16,0,1,10,102,4,22,23,
            24,25,26,27,28,29,30,0,32,76,
            77,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,0,53,
            54,55,56,57,0,78,2,3,0,5,
            0,0,1,3,10,4,0,13,14,3,
            16,0,1,0,63,4,22,23,24,25,
            26,27,28,29,30,0,32,0,34,35,
            36,37,38,39,0,1,2,3,4,5,
            6,7,8,9,0,11,12,3,0,15,
            0,17,18,19,20,21,0,1,2,3,
            4,5,6,7,8,9,32,11,12,69,
            70,15,0,17,18,19,20,21,0,81,
            82,83,84,85,86,87,88,9,32,0,
            1,2,3,4,5,6,7,8,9,65,
            11,12,0,78,15,0,17,18,19,20,
            21,61,62,69,70,13,14,0,16,2,
            31,65,0,0,22,23,24,25,26,27,
            28,29,30,61,62,13,14,0,16,0,
            1,52,5,4,22,23,24,25,26,27,
            28,29,30,0,32,0,0,35,36,37,
            38,39,0,0,2,3,13,14,0,16,
            31,34,10,5,0,22,23,24,25,26,
            27,28,29,30,0,32,31,0,35,36,
            37,38,39,6,7,0,1,13,14,4,
            16,33,34,80,0,1,22,23,24,25,
            26,27,28,29,30,0,32,0,0,35,
            36,37,38,39,0,0,31,0,13,14,
            5,16,0,6,7,79,0,22,23,24,
            25,26,27,28,29,30,10,32,31,31,
            35,36,37,38,39,0,1,2,3,4,
            5,6,7,8,9,33,11,12,64,0,
            15,0,17,18,19,20,21,0,1,2,
            3,4,0,6,7,8,9,0,11,12,
            65,0,15,2,17,18,19,20,21,0,
            1,10,0,4,0,1,2,3,4,0,
            6,7,8,9,5,11,12,0,31,15,
            65,17,18,19,20,21,0,1,2,0,
            0,1,2,3,4,31,6,7,8,9,
            0,11,12,34,67,15,0,17,18,19,
            20,21,0,0,0,9,0,1,2,3,
            4,31,6,7,8,9,0,11,12,0,
            0,15,2,17,18,19,20,21,76,77,
            10,64,0,1,2,3,4,31,6,7,
            8,9,63,11,12,0,1,15,0,17,
            18,19,20,21,0,1,2,3,4,0,
            6,7,8,9,5,11,12,64,0,15,
            0,17,18,19,20,21,0,1,2,3,
            4,0,6,7,8,9,5,11,12,0,
            1,15,33,17,18,19,20,21,0,1,
            2,3,4,0,6,7,8,9,5,11,
            12,0,0,15,0,17,18,19,20,21,
            0,1,2,3,4,66,6,7,8,9,
            0,11,12,52,0,15,0,17,18,19,
            20,21,0,1,2,3,4,33,6,7,
            8,9,0,11,12,0,0,15,2,17,
            18,19,20,21,8,13,14,31,16,66,
            0,0,0,0,22,23,24,25,26,27,
            28,29,30,13,14,0,16,0,0,0,
            5,0,22,23,24,25,26,27,28,29,
            30,13,14,31,16,75,33,0,0,75,
            22,23,24,25,26,27,28,29,30,34,
            33,0,92,93,94,95,96,97,98,99,
            100,101,0,0,0,0,81,82,83,84,
            85,86,87,88,0,1,2,3,0,5,
            0,1,2,3,10,5,0,0,2,0,
            10,0,5,0,5,31,10,11,12,0,
            1,2,0,10,5,0,0,33,34,10,
            5,0,10,33,34,0,5,0,0,2,
            33,34,33,34,0,8,2,0,1,5,
            0,4,0,34,10,0,0,31,33,34,
            10,0,0,0,0,0,0,0,0,0,
            63,0,63,66,68,66,0,0,34,0,
            0,68,0,52,0,0,0,0,0,0,
            68,0,0,0,0,89,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            2226,2237,1932,1815,2238,1,1807,1791,2239,1823,
            254,1922,1906,2441,2442,1569,2443,2240,2241,2242,
            1536,586,2547,2548,2549,2550,2551,2552,2553,843,
            2562,2226,2390,55,1371,2391,2389,2444,2392,2388,
            2395,2400,2399,2397,2398,2396,2401,2402,2394,2403,
            2404,2405,183,2555,2556,2557,2558,2554,1601,1365,
            602,2226,1,184,49,1,192,2142,60,263,
            2453,1426,1,1,1,1,254,1,212,520,
            1,2453,1642,1,1,1,1,1,1,1,
            1,1,89,1,647,1643,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,192,1,1,1,1,1,1,
            1,1,2226,1,52,899,1,191,2423,62,
            2139,2136,59,1843,1832,1,1,2485,1,1631,
            1620,1609,863,1317,1,1,1,1,1,1,
            1,1,1,1237,1,58,73,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,191,1,1,1,1,1,
            1,1,1,2226,1,287,69,1,192,2423,
            61,2226,2237,647,1643,2238,1,1,71,1,
            1631,1620,1609,863,2226,1,1,1,1,1,
            1,1,1,1,2226,1,647,1643,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,192,1,1,1,1,
            1,1,1,1,2226,2237,605,2054,2238,266,
            2423,1738,1,63,1,2453,1642,2441,2442,520,
            2443,1631,1620,1609,863,1511,2547,2548,2549,2550,
            2551,2552,2553,843,2562,2226,2390,67,1494,2391,
            2389,2444,2392,2388,2395,2400,2399,2397,2398,2396,
            2401,2402,2394,2403,2404,2405,130,2555,2556,2557,
            2558,2554,1601,1365,602,269,2453,1426,254,2441,
            2442,2226,2443,186,3591,520,2123,3591,2547,2548,
            2549,2550,2551,2552,2553,843,2562,2226,2390,1590,
            1577,2391,2389,2444,2392,2388,2395,2400,2399,2397,
            2398,2396,2401,2402,2394,2403,2404,2405,2226,2555,
            2556,2557,2558,2554,20,784,2148,2148,2226,2148,
            51,185,3653,2151,2148,3653,2226,180,180,1530,
            180,207,3695,2226,1154,3695,180,180,180,180,
            180,180,180,180,180,68,180,2226,2148,180,
            180,180,180,180,1,2237,1932,1456,2238,2230,
            1807,1791,2239,1823,50,1922,1906,2154,2226,1569,
            57,2240,2241,2242,1536,586,2226,2237,1932,1779,
            2238,2230,1807,1791,2239,1823,875,1922,1906,1843,
            1832,1569,56,2240,2241,2242,1536,586,65,1953,
            1884,2570,2569,2571,2573,2572,1942,2145,1196,1,
            2237,1932,1815,2238,29,1807,1791,2239,1823,2229,
            1922,1906,2226,784,1569,2226,2240,2241,2242,1536,
            586,647,1643,1843,1832,2441,2442,2226,2443,1867,
            3700,2229,131,72,2547,2548,2549,2550,2551,2552,
            2553,843,2562,647,1643,2441,2442,1,2443,2226,
            2237,29,91,2238,2547,2548,2549,2550,2551,2552,
            2553,843,2562,132,2390,42,70,2391,2389,2444,
            2392,2388,269,2226,1738,254,2441,2442,2226,2443,
            910,91,520,2232,2226,2547,2548,2549,2550,2551,
            2552,2553,843,2562,133,2390,3700,54,2391,2389,
            2444,2392,2388,2160,2157,2226,2237,2441,2442,2238,
            2443,1961,2231,1494,1,2223,2547,2548,2549,2550,
            2551,2552,2553,843,2562,134,2390,2226,2226,2391,
            2389,2444,2392,2388,2226,2226,1359,53,2441,2442,
            2230,2443,257,2166,2163,1511,272,2547,2548,2549,
            2550,2551,2552,2553,843,2562,520,2390,3700,717,
            2391,2389,2444,2392,2388,2226,2237,1932,1815,2238,
            2230,1807,1791,2239,1823,2057,1922,1906,2485,2226,
            1569,2226,2240,2241,2242,1536,586,2226,1,1,
            1,1,2226,1,1,1,1,2226,1,1,
            2229,271,1,1742,1,1,1,1,1,209,
            2237,520,64,2238,2226,2237,1932,1815,2238,2226,
            1807,1791,2239,1823,2232,1922,1906,1,1868,1569,
            2229,2240,2241,2242,1536,586,254,2453,1642,202,
            1,2237,1932,1815,2238,3700,1807,1791,2239,1823,
            2226,1922,1906,2231,2543,1569,66,2240,2241,2242,
            1536,586,2226,1,2226,2169,2226,2237,1932,1815,
            2238,3700,1807,1791,2239,1823,2226,1922,1906,2226,
            223,1569,1743,2240,2241,2242,1536,586,1590,1577,
            520,2485,2226,2237,1932,1815,2238,3700,1807,1791,
            2239,1823,1337,1922,1906,2226,2586,1569,2226,2240,
            2241,2242,1536,586,2226,2237,1939,1815,2238,2226,
            1807,1791,2239,1823,2236,1922,1906,2484,2226,1569,
            2226,2240,2241,2242,1536,586,2226,2237,1946,1815,
            2238,2226,1807,1791,2239,1823,2234,1922,1906,2226,
            2465,1569,1522,2240,2241,2242,1536,586,2226,2237,
            566,1815,2238,1,1807,1791,2239,1823,2236,1922,
            1906,2226,2226,1569,30,2240,2241,2242,1536,586,
            1,2237,1932,1815,2238,2235,1807,1791,2239,1823,
            43,1922,1906,2233,2226,1569,2226,2240,2241,2242,
            1536,586,1,2202,2217,2187,2199,730,2184,2181,
            2214,2190,249,2196,2193,339,354,2172,1277,2211,
            2208,2205,2178,2175,2581,2441,2442,1938,2443,2235,
            252,2226,190,30,2547,2548,2549,2550,2551,2552,
            2553,843,2562,2441,2442,1,2443,208,253,2226,
            2232,2226,2547,2548,2549,2550,2551,2552,2553,843,
            2562,2441,2442,186,2443,1133,2255,2226,2226,752,
            2547,2548,2549,2550,2551,2552,2553,843,2562,2231,
            3716,2226,1112,1091,1070,1049,1028,986,1007,965,
            944,923,2226,2226,190,2226,1953,1884,2570,2569,
            2571,2573,2572,1942,1,250,250,250,2226,250,
            1,251,251,251,250,251,32,338,2130,337,
            251,2226,232,2226,231,185,2133,2127,2124,1,
            2220,1426,293,1217,2232,2226,190,250,250,520,
            2232,286,1257,251,251,2226,545,353,2226,1297,
            232,232,231,231,1,2581,1738,208,543,2232,
            221,543,2226,2231,520,2226,2226,207,1674,2231,
            520,2226,2226,2226,2226,2226,2226,2226,2226,2226,
            232,2226,231,232,720,231,2226,2226,2231,2226,
            2226,1360,2226,545,2226,2226,2226,2226,2226,2226,
            1412,2226,2226,2226,2226,600
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            522,129,107,124,107,107,107,107,107,107,
            107,107,107,131,168,146,144,148,146,154,
            152,155,154,157,156,133,107,168,168,428,
            428,482,107,89,89,378,168,107,107,107,
            107,107,107,107,107,107,107,107,107,107,
            107,107,107,107,107,107,107,107,107,107,
            107,107,107,107,107,107,107,89,89,89,
            240,254,480,92,384,87,86,47,107,64,
            268,64,268,268,64,268,64,182,326,144,
            144,146,146,146,146,146,146,152,148,148,
            154,154,248,156,155,1,270,313,270,378,
            480,95,240,210,224,89,439,387,168,268,
            428,428,268,428,107,313,252,480,72,210,
            240,223,92,89,84,182,88,389,89,270,
            272,270,316,252,72,72,107,107,240,224,
            508,384,432,431,480,389,89,270,272,316,
            316,318,323,72,210,240,240,508,89,439,
            387,84,272,313,243,272,316,318,517,318,
            313,250,520,428,107,322,210,72,503,501,
            501,382,503,389,272,245,318,313,107,428,
            131,254,240,428,107,72,107,107,497,89,
            88,313,435,107,434,120,480,313,240,89,
            89,429,503,429,245,107,120,88,429
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            58,15,59,60,8,17,18,19,4,11,
            12,9,6,7,20,21,69,70,61,62,
            71,72,73,74,76,77,78,79,80,90,
            91,75,92,93,94,95,96,97,98,99,
            100,101,65,52,102,31,48,40,45,43,
            44,42,41,46,47,49,50,51,57,53,
            54,55,56,63,66,39,36,32,35,38,
            37,13,14,16,22,23,24,25,26,27,
            28,29,30,3,1,2,10,33,34,5,
            0,65,5,32,13,14,16,22,23,24,
            25,26,27,28,29,30,8,17,18,19,
            4,11,12,9,6,7,20,21,15,3,
            2,1,0,5,63,65,34,33,102,0,
            68,89,75,92,93,94,95,96,98,97,
            99,100,101,69,70,61,62,71,72,73,
            74,76,77,78,79,80,5,10,63,33,
            65,34,52,66,102,90,91,15,8,17,
            18,19,2,11,12,9,3,6,7,20,
            21,1,4,58,59,60,48,40,45,43,
            44,42,41,46,47,49,50,51,57,53,
            54,55,56,39,36,32,35,38,37,13,
            14,16,22,23,24,25,26,27,28,29,
            30,0,32,11,12,9,3,6,7,20,
            21,15,2,1,4,8,17,18,19,65,
            5,0,66,5,3,1,2,63,0,5,
            52,10,68,11,12,9,3,6,7,20,
            21,15,2,8,17,18,19,1,4,31,
            0,35,40,13,41,58,36,42,37,43,
            44,38,14,45,46,32,59,39,60,47,
            48,16,49,50,51,1,4,22,23,24,
            25,26,27,28,53,54,55,56,57,29,
            30,67,5,52,0,1,4,5,52,33,
            0,75,10,68,0,14,32,39,16,38,
            37,36,13,35,22,23,24,25,26,27,
            28,29,30,68,89,11,12,9,6,7,
            69,70,61,62,71,72,73,74,76,77,
            78,79,80,90,91,75,92,93,94,95,
            96,97,98,99,100,101,33,5,34,3,
            10,2,0,3,2,10,34,5,35,40,
            13,41,58,36,42,37,43,44,38,14,
            45,46,32,59,39,60,47,48,16,49,
            50,51,22,23,24,25,26,27,28,53,
            54,55,56,57,29,30,64,4,1,0,
            2,34,10,63,66,5,33,0,35,40,
            13,41,58,36,42,37,43,44,38,14,
            45,46,32,59,39,60,47,48,16,49,
            50,51,1,4,22,23,24,25,26,27,
            28,53,54,55,56,57,29,30,64,3,
            0,15,8,17,18,19,4,2,11,12,
            9,3,6,7,20,21,1,34,5,0,
            8,2,5,63,33,34,66,81,82,83,
            84,85,86,87,88,0,5,33,52,75,
            0,15,8,17,18,19,1,4,2,11,
            12,9,3,6,7,20,21,67,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static char nasb[] = {0,
            134,68,38,68,38,38,38,38,38,38,
            38,38,38,68,14,68,68,68,68,68,
            68,68,68,68,68,68,38,14,14,20,
            20,111,15,100,100,93,1,38,38,38,
            38,38,38,38,38,38,38,38,38,38,
            38,38,38,15,38,38,38,38,38,38,
            38,38,38,38,38,38,38,100,100,100,
            11,81,89,9,92,69,69,50,38,51,
            33,51,79,79,51,78,51,45,68,68,
            68,68,68,68,68,68,68,68,68,68,
            68,68,68,68,68,82,82,67,68,116,
            68,42,11,104,10,100,106,99,13,7,
            7,7,7,7,38,53,67,68,76,104,
            11,10,40,100,62,22,68,108,100,97,
            67,68,67,36,76,67,38,38,11,10,
            67,61,69,69,89,108,100,68,120,67,
            7,85,18,67,104,11,11,128,100,106,
            99,71,67,53,30,130,7,85,68,68,
            53,35,68,7,38,55,104,40,59,114,
            114,68,68,124,120,64,85,53,38,7,
            57,37,11,7,38,40,38,38,99,100,
            100,53,31,38,68,64,89,53,11,100,
            100,102,68,68,64,38,73,100,87
        };
    };
    public final static char nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            82,80,79,70,78,77,1,0,11,5,
            27,0,5,38,11,37,0,108,0,75,
            0,82,81,80,79,70,78,77,0,11,
            74,0,99,0,90,11,53,5,0,22,
            0,5,11,0,70,65,66,67,68,58,
            33,0,47,0,110,0,106,0,92,0,
            21,51,50,42,40,46,11,0,29,0,
            51,50,42,40,46,30,0,102,71,0,
            5,53,48,0,64,0,96,0,30,55,
            0,21,50,51,11,0,100,0,11,21,
            0,112,0,61,0,30,55,11,28,0,
            11,98,0,95,0,51,50,30,0,84,
            11,38,0,103,11,28,0,111,0,11,
            38,72,0,11,97,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,9,86,87,10,11,81,8,1,
            6,7,48,64,68,76,82,83,84,12,
            13,93,94,95,96,97,98,99,105,106,
            3,69,42,90,44,55,60,63,72,47,
            52,56,61,62,66,67,74,75,78,79,
            80,91,100,101,102,103,104,54,70,73,
            16,17,29,30,89,92,117,4,14,15,
            18,19,20,21,31,22,23,24,25,26,
            107,108,109,110,111,112,113,114,5,27,
            28,32,33,34,35,36,37,38,39,40,
            41,118,45,46,49,50,51,53,57,58,
            59,65,71,77,88,115,116
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            124,0,0,0,126,130,131,132,133,134,
            0,135,136,137,138,139,140,141,0,142,
            121,152,0,0,0,0,120,145,173,0,
            144,0,151,0,0,0,125,164,169,171,
            0,172,0,0,0,191,122,129,182,183,
            184,0,0,160,170,179,128,154,0,174,
            177,178,181,0,155,156,157,158,159,161,
            0,163,168,123,127,143,146,147,148,149,
            150,153,0,162,166,0,0,167,176,186,
            190,193,0,0,194,196,119,0,0,0,
            165,0,175,180,185,0,187,188,0,189,
            192,195,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            125,156,135,79,89,164,46,191,21,55,
            107,21,95,1,7,31,60,103,72,146,
            213,220,224,72,72,200,72,11,35,35,
            64,67,112,120,67,228,40,150,207,207,
            182,142,170,170,170,170,170,16,16,16,
            16,16
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            133,133,133,38,38,133,52,197,5,5,
            38,5,100,5,5,5,5,38,38,144,
            5,5,38,76,100,204,85,14,38,38,
            5,70,38,5,123,5,43,153,210,217,
            185,144,172,174,176,178,180,18,18,26,
            115,26
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            67,65,67,29,29,65,48,120,46,52,
            29,45,29,93,93,25,52,29,29,72,
            6,5,5,29,29,19,29,45,110,109,
            50,63,29,42,54,3,90,72,7,5,
            121,72,81,80,79,78,77,46,45,46,
            43,45
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            52,52,52,65,65,52,52,108,34,34,
            65,34,8,34,34,34,34,65,65,66,
            34,34,65,3,8,63,32,81,65,65,
            34,2,65,34,1,34,75,1,34,34,
            114,66,1,58,59,59,48,2,2,2,
            2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            39,39,39,43,43,39,20,0,12,47,
            43,12,43,3,3,27,47,43,43,8,
            54,54,54,43,43,84,43,12,1,6,
            47,49,43,12,14,54,114,8,57,54,
            0,8,40,40,40,40,40,12,12,12,
            12,12
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            148,2,82,0,138,0,148,2,81,0,
            128,163,0,228,0,159,0,2,138,0,
            177,128,2,159,0,2,128,177,138,0,
            208,2,29,0,148,10,0,144,0,224,
            128,0,75,186,0,181,222,128,31,170,
            0,164,223,0,177,128,2,167,0,177,
            128,2,0,180,2,0,172,128,0,166,
            0,206,128,10,0,3,144,0,137,32,
            206,128,10,0,32,137,144,0,137,206,
            128,32,10,0,206,128,32,10,0,137,
            144,0,137,32,10,0,137,206,128,10,
            0,137,10,0,2,128,220,138,0,171,
            2,0,156,0,181,204,128,31,118,219,
            58,0,164,0,181,204,128,31,219,58,
            0,155,0,191,0,218,128,155,0,128,
            155,0,218,191,0,200,128,31,217,118,
            216,187,0,200,128,31,216,187,0,199,
            0,185,0,184,0,183,0,182,0,175,
            0,233,107,0,114,2,154,138,191,0,
            233,138,154,2,111,0,108,233,0,154,
            91,135,0,63,137,0,174,2,0,138,
            124,0,174,2,15,0,138,165,0,215,
            2,122,0,154,10,122,0,154,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1375,0,1394,1958,0,599,0,1995,2021,1944,
            0,1732,1505,1522,1642,1363,1426,1389,0,752,
            730,624,1366,504,1654,0,2020,2015,1975,1968,
            751,1873,1840,1722,1695,1690,1675,1362,1357,645,
            483,0,1740,1739,1529,1444,1505,1936,1426,1389,
            1738,1831,0,1922,1906,1569,1779,1456,1654,1494,
            605,784,1511,1590,1577,806,1643,647,1631,1620,
            1609,863,1851,1843,1832,1662,658,1823,1815,1807,
            1791,1536,586,1337,1317,1297,1277,1257,752,1237,
            1217,1196,1175,682,1154,566,875,843,520,1133,
            1112,1091,1070,1049,1028,1007,986,965,944,923,
            483,899,822,730,624,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,214,128,193,15,21,20,7,6,3,
            9,12,11,122,2,126,125,129,127,131,
            130,133,132,135,134,123,33,2,2,89,
            68,2,10,174,154,155,128,7,6,70,
            69,3,74,73,72,71,61,62,9,77,
            76,79,78,91,90,80,101,100,99,97,
            98,96,95,94,93,92,75,174,174,215,
            154,138,128,10,2,168,167,194,29,195,
            187,196,60,59,197,58,198,199,118,125,
            125,127,127,127,127,126,126,130,129,129,
            132,131,154,134,133,138,138,31,170,172,
            147,32,137,128,3,180,128,2,2,216,
            188,188,219,188,63,128,31,147,3,128,
            137,206,178,177,145,128,179,128,208,118,
            31,118,31,128,3,147,206,32,137,3,
            163,2,157,159,128,33,177,217,128,31,
            128,222,128,147,128,137,137,128,171,128,
            2,172,31,200,155,201,128,204,118,205,
            181,33,224,68,10,225,128,178,228,82,
            81,88,138,128,128,128,204,181,75,33,
            164,75,148,68,10,178,2,2,2,177,
            220,200,218,63,171,2,128,181,148,148,
            148,128,138,33,33,63,172,229,33
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "__data",
            "__near",
            "__xdata",
            "__far",
            "__idata",
            "__pdata",
            "__code",
            "__bit",
            "__sfr",
            "__sfr16",
            "__sfr32",
            "__sbit",
            "__at",
            "__banked",
            "__interrupt",
            "__using",
            "__reentrant",
            "__critical",
            "__naked",
            "__wparam",
            "__shadowregs",
            "__preserves__regs",
            "__asm",
            "__endasm",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "expression_parser_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "and_expression",
            "exclusive_or_expression",
            "inclusive_or_expression",
            "logical_and_expression",
            "logical_or_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "initializer_seq",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "absolute_address",
            "original_function_direct_decla" +
            "rator",
            "sdcc_function_attributes",
            "sdcc_function_attribute",
            "integer_token",
            "preserves_regs_args",
            "preserves_regs_arg"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
