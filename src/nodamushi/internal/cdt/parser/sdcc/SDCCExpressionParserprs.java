/*******************************************************************************
* Copyright (c) 2006, 2010 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package nodamushi.internal.cdt.parser.sdcc;

public class SDCCExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, SDCCExpressionParsersym {
    public final static int ERROR_SYMBOL = 67;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 36;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 37;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 38;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 229;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 117;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 2540;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 2;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 481;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 142;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 259;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 649;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 102;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 102;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 2049;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 2059;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = true;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return SDCCExpressionParsersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,1,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,1,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,1,0,
            0,0,0,0,0,0,0,0,0,0,
            0,1,0,0,0,0,0,0,1,0,
            0,0,0,0,0,0,0,0,0,0,
            1,0,0,0,1,0,0,0,0,0,
            0,0,0,1,1,1,0,1,0,0,
            0,1,0,0,0,0,0,0,0,1,
            0,0,0,0,0,0,0,0,0,0,
            0,1,0,0,0,0,0,1,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static char prosthesesIndex[] = {0,
            9,10,11,12,14,20,21,22,23,3,
            24,25,26,27,28,29,30,31,32,33,
            6,58,87,127,128,129,5,49,95,103,
            56,57,59,70,35,88,90,91,92,93,
            94,96,131,7,13,18,79,108,109,110,
            111,112,130,37,69,89,105,61,71,97,
            102,104,107,17,19,62,63,64,65,68,
            72,76,78,86,8,16,36,51,52,53,
            54,55,60,74,77,81,82,84,85,101,
            115,133,134,135,137,2,15,73,75,80,
            83,99,106,113,114,116,117,118,119,132,
            136,1,4,34,38,39,40,41,42,43,
            44,45,46,47,48,50,66,67,98,100,
            120,121,122,123,124,125,126,138,139,140,
            141,142
        };
    };
    public final static char prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,3,1,
            1,4,4,3,3,2,2,4,1,0,
            1,1,2,2,2,2,2,2,2,2,
            2,4,1,4,1,3,3,3,1,3,
            3,1,3,3,1,3,3,3,3,1,
            3,3,1,3,1,3,1,3,1,3,
            1,3,1,5,1,3,3,3,3,3,
            3,3,3,3,3,3,1,1,2,1,
            0,1,3,1,1,1,1,1,1,1,
            1,3,4,3,2,4,1,2,1,1,
            1,2,5,7,5,1,0,7,2,5,
            9,8,3,2,2,2,3,2,4,2,
            2,2,2,2,1,1,1,1,2,1,
            2,2,2,1,2,2,1,2,2,1,
            2,2,1,2,2,1,3,1,3,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            6,8,0,0,1,1,3,3,3,0,
            1,0,1,2,4,2,1,1,1,3,
            1,1,2,3,7,8,0,1,0,1,
            3,1,3,1,1,1,1,1,1,3,
            1,1,1,1,1,3,1,2,2,1,
            5,3,1,3,5,1,3,1,3,2,
            4,3,5,4,6,6,3,5,1,3,
            4,5,6,0,1,2,1,3,1,1,
            3,2,1,1,1,1,2,1,2,3,
            1,1,1,3,1,2,2,2,3,4,
            5,1,1,7,3,0,0,1,1,3,
            3,4,1,1,2,3,2,3,2,1,
            0,1,2,1,1,1,1,1,2,1,
            3,6,4,2,4,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,4,2,1,1,5,3,3,1,
            2,1,1,1,1,1,1,1,4,2,
            4,2,1,1,3,5,1,3,1,1,
            1,2,5,3,1,2,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,-37,0,0,0,0,0,0,0,0,
            0,-2,0,0,0,0,0,0,0,0,
            0,0,-163,0,0,0,0,0,-120,0,
            -30,0,0,0,0,0,-74,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-31,0,0,
            0,-175,-83,0,-168,-108,-4,0,0,0,
            0,0,0,-121,0,0,-200,0,0,0,
            0,0,0,0,0,-144,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-182,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-14,0,0,-16,0,0,-136,0,
            -50,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-140,0,0,0,0,0,
            0,0,0,0,0,-33,-122,0,-1,0,
            0,0,0,-189,0,0,0,0,0,-56,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-84,
            0,-123,0,0,0,0,0,0,-162,0,
            0,-34,-17,0,-124,0,0,0,0,0,
            0,0,-202,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-3,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-18,
            -35,0,-19,0,0,-52,0,0,0,0,
            0,0,0,0,0,-76,0,0,0,0,
            0,0,0,-112,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-71,-77,-113,-153,-131,
            0,-132,0,0,0,0,0,0,0,0,
            0,-20,0,0,0,0,0,0,0,0,
            0,0,0,-21,0,0,0,0,0,-27,
            0,0,0,0,0,0,0,0,0,-68,
            0,0,0,0,0,0,0,0,0,0,
            -57,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-58,0,0,0,0,0,0,0,0,
            0,-69,0,0,0,0,0,0,0,0,
            0,0,-59,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-60,0,0,0,0,0,0,
            0,0,0,-70,0,0,0,0,0,0,
            0,0,0,0,-61,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-62,0,0,0,0,
            0,0,0,0,0,-116,0,0,0,0,
            0,0,0,0,0,0,-63,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-64,0,0,
            0,0,0,0,0,0,0,-134,0,0,
            0,0,0,0,0,0,0,0,-65,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-66,
            0,0,0,0,0,0,0,0,0,-139,
            0,0,0,0,0,0,0,0,0,0,
            -67,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-125,0,0,0,0,0,0,0,0,
            0,-157,0,0,0,0,0,0,0,0,
            0,0,-147,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-148,0,0,0,0,0,0,
            0,0,0,-79,0,0,0,0,0,0,
            0,0,0,0,-185,0,0,0,0,0,
            0,0,0,0,-81,0,0,0,0,0,
            0,0,0,0,-199,0,0,0,0,0,
            0,0,0,0,-127,0,0,0,0,0,
            0,0,0,0,0,-22,0,-126,-205,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-214,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-161,0,
            -129,0,-226,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-141,-86,-135,-88,0,-149,-23,
            0,-24,0,0,-174,0,-43,0,0,0,
            0,0,0,0,0,0,-25,0,0,0,
            0,0,0,-110,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-152,
            -119,-181,0,0,0,0,0,-26,0,0,
            0,-54,0,0,0,0,0,0,0,-229,
            0,0,0,0,0,0,0,0,0,-73,
            -145,0,0,0,0,0,0,0,0,0,
            0,0,0,-155,-89,0,0,0,0,0,
            0,-143,-172,0,0,0,0,-166,0,0,
            0,0,0,-55,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-90,0,0,-196,-146,0,0,
            0,0,0,0,0,0,0,0,-91,0,
            0,0,0,0,-53,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-106,
            -225,-190,0,0,0,0,0,0,0,0,
            0,-49,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-47,0,0,0,0,
            0,0,0,0,0,-92,0,0,0,0,
            0,0,0,0,-217,0,-186,-78,-154,-167,
            -93,0,0,0,0,0,-51,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-151,0,0,0,0,
            0,0,-169,-184,0,0,0,0,-44,0,
            0,0,0,0,0,0,0,0,-191,0,
            0,-204,0,0,-94,0,0,-45,0,0,
            0,0,0,0,0,0,0,-95,0,-46,
            0,0,0,0,0,0,0,0,0,-216,
            0,-72,0,0,0,0,0,0,0,0,
            -48,0,0,0,0,0,0,0,0,0,
            -178,0,-96,-210,-97,0,-80,-6,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-82,0,-107,-98,0,0,0,
            0,0,0,0,0,-198,-85,0,0,0,
            0,-160,-164,-118,-201,0,0,0,0,0,
            -87,0,0,0,0,0,0,0,0,0,
            0,0,0,-227,0,0,-99,0,0,0,
            0,0,0,0,0,0,0,0,-100,0,
            -197,0,0,0,0,-7,0,0,0,0,
            0,0,0,0,-207,-208,-101,-102,-103,0,
            0,0,0,0,0,0,0,-38,0,0,
            0,0,0,0,0,0,-39,0,0,0,
            0,0,0,0,0,-75,-115,0,0,0,
            0,0,0,0,-173,0,-150,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -104,-211,-213,0,0,-8,0,0,0,0,
            0,0,0,0,-9,0,0,0,0,0,
            0,0,0,0,0,0,0,-10,0,0,
            0,0,0,0,0,-105,-212,-36,0,-11,
            0,0,0,0,0,0,0,0,-40,0,
            0,0,0,0,0,0,-41,0,0,0,
            0,0,0,0,-203,-117,0,-42,0,0,
            0,0,0,0,0,0,-218,0,-220,-114,
            0,-109,-32,-111,-130,0,0,0,0,-133,
            -128,0,0,0,-137,0,-219,-221,-228,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-170,0,0,0,
            0,0,0,0,-142,0,0,0,-5,0,
            0,0,0,0,0,-158,-179,-180,-222,-183,
            0,-192,-193,-215,0,0,0,-12,0,0,
            0,0,0,0,-13,0,0,0,0,0,
            0,-15,-165,-223,-224,-28,0,-159,0,0,
            -29,0,0,0,0,0,0,0,0,0,
            0,-177,0,0,0,0,0,0,0,0,
            0,0,0,0,-195,0,0,-171,0,-194,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-187,0,0,0,0,0,0,
            -138,-188,0,0,0,0,0,0,0,0,
            0,0,-156,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-176,-209,0,0,0,0,0,
            0,0,-206,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            96,10,113,27,27,21,21,44,44,75,
            75,1,1,2,2,2,2,3,3,3,
            4,5,5,5,5,5,5,5,5,65,
            65,76,6,6,6,6,6,6,6,6,
            6,6,6,7,7,8,8,8,8,9,
            9,9,11,11,11,12,12,12,12,12,
            13,13,13,14,14,15,15,16,16,17,
            17,18,18,19,19,20,20,20,20,20,
            20,20,20,20,20,20,20,114,45,35,
            97,97,77,77,54,115,115,115,115,115,
            115,115,116,116,116,117,117,122,122,123,
            123,118,118,119,119,119,125,125,120,120,
            120,120,120,121,121,121,121,121,124,124,
            28,28,28,28,28,31,31,31,83,83,
            78,78,78,78,79,79,79,80,80,80,
            81,81,81,82,82,82,126,126,127,127,
            128,32,34,34,34,34,34,58,59,59,
            59,59,59,59,59,59,59,59,59,59,
            69,66,66,98,99,71,71,67,67,67,
            72,84,84,85,85,73,73,73,47,100,
            100,86,87,87,87,68,68,101,88,88,
            89,89,74,74,22,23,23,23,33,55,
            55,36,36,36,36,39,39,41,37,37,
            38,42,42,129,129,40,130,130,102,102,
            29,29,29,29,29,29,29,29,29,90,
            56,56,56,56,30,61,61,60,60,60,
            62,62,57,57,103,103,64,64,63,63,
            63,48,48,48,49,50,50,50,51,51,
            51,51,70,70,46,46,52,105,104,104,
            104,104,91,106,107,107,108,108,109,109,
            131,131,132,132,133,133,133,133,135,135,
            134,134,134,136,137,137,96,96,22,22,
            22,24,24,24,24,24,24,24,24,24,
            24,59,59,25,25,53,26,43,43,42,
            110,110,92,92,92,92,92,92,92,93,
            93,93,93,93,93,94,94,111,111,95,
            115,115,138,139,139,140,140,141,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,1,1345,17,21,18,613,1308,45,
            693,616,359,753,750,824,812,1260,1186,1277,
            1262,75,92,774,136,214,318,319,320,658,
            635,776,31,138,135,137,161,533,20,17,
            21,18,613,1308,45,693,616,1800,753,750,
            824,812,1260,1186,1277,1262,75,798,776,31,
            140,167,803,778,240,470,38,583,144,147,
            150,153,1387,1155,776,188,1188,776,1857,547,
            1468,1577,1594,1607,1621,1257,760,20,17,21,
            18,613,1308,45,693,616,503,753,750,824,
            812,1260,1186,1277,1262,75,282,25,612,20,
            17,21,18,613,1308,45,693,616,503,753,
            750,824,812,1260,1186,1277,1262,75,282,1860,
            1467,294,283,68,24,554,56,196,1802,245,
            180,832,20,17,21,18,613,43,45,693,
            616,211,753,1637,283,211,288,340,342,348,
            1802,136,214,318,319,320,38,776,187,687,
            138,135,137,161,545,654,724,289,290,724,
            832,20,17,21,18,613,43,45,693,616,
            689,753,750,824,812,1260,1756,140,167,291,
            810,88,697,1845,88,144,147,150,153,854,
            1155,796,655,90,316,776,189,1468,1577,1594,
            1607,1621,1257,796,20,17,21,18,613,1308,
            45,693,616,1552,753,750,824,812,1260,1186,
            1277,1262,75,282,832,20,17,21,18,613,
            1308,45,693,616,1856,753,750,824,812,1260,
            1186,1277,1262,75,92,492,341,342,348,283,
            313,655,647,37,1302,1802,832,20,17,21,
            18,613,43,45,693,616,485,753,750,824,
            812,1667,19,292,902,20,17,21,18,613,
            1308,45,693,616,1805,753,750,824,812,1260,
            1186,1277,1262,75,800,276,418,484,418,819,
            418,547,572,20,17,21,18,613,1308,45,
            693,616,404,753,750,824,812,1260,1186,1277,
            1262,75,1259,22,258,242,277,244,229,241,
            832,20,17,21,18,613,1308,45,693,616,
            655,753,750,824,812,1260,1186,1277,1262,75,
            93,832,20,17,21,18,613,1308,45,693,
            616,1420,753,750,824,812,1260,1186,1277,1262,
            75,86,832,20,17,21,18,613,1308,45,
            693,616,655,753,750,824,812,1260,1186,1277,
            1262,75,85,832,20,17,21,18,613,1308,
            45,693,616,1596,753,750,824,812,1260,1186,
            1277,1262,75,84,832,20,17,21,18,613,
            1308,45,693,616,655,753,750,824,812,1260,
            1186,1277,1262,75,83,832,20,17,21,18,
            613,1308,45,693,616,23,753,750,824,812,
            1260,1186,1277,1262,75,82,832,20,17,21,
            18,613,1308,45,693,616,655,753,750,824,
            812,1260,1186,1277,1262,75,81,832,20,17,
            21,18,613,1308,45,693,616,274,753,750,
            824,812,1260,1186,1277,1262,75,80,832,20,
            17,21,18,613,1308,45,693,616,655,753,
            750,824,812,1260,1186,1277,1262,75,79,832,
            20,17,21,18,613,1308,45,693,616,280,
            753,750,824,812,1260,1186,1277,1262,75,78,
            832,20,17,21,18,613,1308,45,693,616,
            655,753,750,824,812,1260,1186,1277,1262,75,
            77,832,20,17,21,18,613,1308,45,693,
            616,333,753,750,824,812,1260,1186,1277,1262,
            75,76,832,20,17,21,18,613,1308,45,
            693,616,655,753,750,824,812,1260,1186,1277,
            1262,75,74,832,20,17,21,18,613,1308,
            45,693,616,281,753,750,824,812,1260,1186,
            1277,1262,75,1358,832,20,17,21,18,613,
            1308,45,693,616,672,753,750,824,812,1260,
            1186,1277,1262,75,1470,832,20,17,21,18,
            613,43,45,693,616,192,753,750,824,812,
            1260,1186,1277,1262,94,832,20,17,21,18,
            613,43,45,693,616,38,753,750,824,812,
            1260,1186,1277,1262,94,566,437,334,729,832,
            20,17,21,18,613,43,45,693,616,1785,
            753,750,824,812,1260,1186,1277,1262,94,832,
            20,17,21,18,613,43,45,693,616,213,
            753,750,824,812,1260,1186,1277,1262,94,817,
            1857,187,285,832,20,17,21,18,613,43,
            45,693,616,1817,753,750,824,812,1260,1186,
            1277,1262,94,509,38,812,326,245,180,418,
            277,1388,336,203,1888,729,1344,832,20,17,
            21,18,613,43,45,693,616,8,1456,136,
            214,318,319,320,453,275,243,204,139,135,
            137,161,219,799,222,1469,224,225,230,1496,
            149,191,729,210,268,797,766,273,494,181,
            1837,264,38,275,1811,141,167,1571,1858,265,
            685,278,724,145,148,151,154,695,1155,275,
            187,187,270,797,766,273,219,799,222,1469,
            224,225,230,1496,187,358,1615,88,268,797,
            766,273,38,740,1050,1503,682,1669,418,262,
            1804,1613,1229,966,832,20,17,21,18,613,
            43,45,693,616,1804,753,750,824,812,1260,
            1186,1721,275,1811,389,245,1284,130,271,220,
            799,222,1469,224,225,230,1496,1465,1883,419,
            1353,270,797,766,273,832,20,17,21,18,
            613,43,45,693,616,358,753,750,824,1668,
            71,130,765,219,799,222,1469,224,225,230,
            1496,1465,832,20,17,21,18,613,43,45,
            693,616,1864,753,750,1597,832,20,17,21,
            18,613,43,45,693,1573,158,219,799,222,
            1469,224,225,230,1496,187,28,839,300,783,
            418,332,1802,199,201,352,1864,832,20,17,
            21,18,613,43,45,693,616,1723,753,1649,
            136,214,318,319,320,1804,38,246,228,143,
            135,137,161,655,776,297,545,200,201,832,
            20,17,21,18,613,43,45,693,616,868,
            1471,1634,776,299,226,390,142,167,832,20,
            17,21,18,613,43,45,693,616,549,1525,
            832,20,17,21,18,613,43,45,693,616,
            634,1538,724,20,17,21,18,613,43,44,
            1465,832,20,17,21,18,613,43,45,693,
            1575,856,350,517,655,736,295,391,832,20,
            17,21,18,613,43,40,219,799,222,1469,
            224,225,230,1496,424,1884,254,547,28,136,
            214,318,319,320,1802,1503,729,457,146,135,
            137,161,38,702,694,248,136,214,318,319,
            320,490,1902,1934,1941,149,135,137,161,136,
            214,318,319,320,663,279,1606,450,152,135,
            137,161,28,136,214,318,319,320,1802,597,
            205,856,155,135,137,161,832,20,17,21,
            18,613,43,39,1811,191,191,425,527,6,
            220,799,222,1469,224,225,230,1496,832,20,
            17,21,18,613,43,45,1384,832,20,17,
            21,18,613,43,45,1399,210,648,20,17,
            21,18,613,43,36,38,1786,648,20,17,
            21,18,613,43,36,1915,1797,278,1799,1818,
            284,666,712,543,247,275,832,20,17,21,
            18,613,43,38,248,832,20,17,21,18,
            613,43,37,235,268,797,766,273,832,20,
            17,21,18,613,43,36,820,729,364,966,
            832,20,17,21,18,613,43,35,1330,832,
            20,17,21,18,613,43,48,832,20,17,
            21,18,613,43,47,418,708,275,832,20,
            17,21,18,613,43,46,619,729,195,655,
            928,182,544,213,306,928,268,797,766,273,
            954,872,296,724,1256,801,1804,418,655,770,
            351,267,255,214,318,319,320,255,214,318,
            319,320,256,214,318,319,320,708,90,349,
            356,206,1284,260,298,596,1008,619,1815,849,
            20,17,21,18,613,41,871,848,873,685,
            957,1810,922,89,895,1256,1810,1804,885,20,
            17,21,18,613,34,885,20,17,21,18,
            613,33,38,928,216,900,38,2059,62,2059,
            802,38,482,1353,260,1103,482,1008,619,1815,
            924,482,817,1857,2059,255,214,318,319,320,
            198,2059,2059,2059,198,184,198,88,694,198,
            518,88,2059,2059,2059,619,88,751,1920,1758,
            619,751,2059,1758,928,542,751,2059,1758,1863,
            2059,27,980,198,1942,2059,692,2059,1256,2059,
            840,619,2059,642,357,882,255,214,318,319,
            320,193,542,619,256,214,318,319,320,1256,
            1819,2059,1265,1974,123,694,210,260,2059,2059,
            1574,1256,1815,1006,619,1859,2059,2059,193,2059,
            1651,1858,2059,2059,2059,1983,355,2059,260,1757,
            1974,1092,198,1815,2059,256,214,318,319,320,
            261,2059,2059,2059,2059,2059,2059,2059,2059,2059,
            2059,542,1722,2059,2059,2059,2059,2059,2059,2059,
            2059,2059,2059,2059,2059,2059,2059,2059,2059,2059,
            2059,2059,2059,2059,2059,2059,2059,194,2059,0,
            20,180,0,1,2286,0,1,2297,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,0,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,0,27,28,29,
            30,31,32,33,34,35,0,0,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,0,56,57,58,59,
            60,0,1,8,9,4,5,0,63,2,
            0,10,11,12,7,14,15,16,17,18,
            19,20,21,22,23,24,25,80,0,0,
            64,30,3,5,27,28,26,61,62,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,0,1,36,37,4,5,67,0,
            1,2,10,11,12,68,14,15,16,17,
            18,19,20,21,22,23,24,25,0,1,
            2,63,30,5,66,7,89,0,69,70,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,0,1,37,0,4,5,67,
            0,0,63,10,11,12,6,14,15,16,
            17,18,19,20,21,22,23,24,25,0,
            0,2,0,30,5,0,7,5,61,62,
            5,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,0,1,37,0,4,37,
            67,36,37,0,10,11,12,0,14,15,
            16,17,18,19,20,21,22,23,24,25,
            0,1,2,3,30,5,0,7,63,26,
            0,66,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,0,
            56,57,58,59,60,0,36,37,3,10,
            11,12,0,14,15,16,17,18,19,20,
            21,22,23,24,25,0,1,2,3,30,
            0,0,7,76,77,0,0,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,78,56,57,0,0,2,
            3,0,5,0,7,2,3,10,11,12,
            7,14,15,16,17,18,19,20,21,22,
            23,24,25,71,72,73,74,30,0,0,
            0,3,61,62,37,38,39,40,41,42,
            10,11,12,0,14,15,16,17,18,19,
            20,21,22,23,24,25,13,0,0,0,
            30,3,5,0,0,90,91,0,38,39,
            40,41,42,10,11,12,0,14,15,16,
            17,18,19,20,21,22,23,24,25,0,
            61,62,0,30,2,3,0,69,70,7,
            102,38,39,40,41,42,10,11,12,0,
            14,15,16,17,18,19,20,21,22,23,
            24,25,65,0,0,2,30,69,70,0,
            7,7,0,0,38,39,40,41,42,10,
            11,12,78,14,15,16,17,18,19,20,
            21,22,23,24,25,79,0,0,1,30,
            71,72,73,74,8,9,0,38,39,40,
            41,42,0,1,2,3,4,5,6,13,
            8,9,0,0,0,13,0,5,0,0,
            81,82,83,84,85,86,87,88,0,27,
            28,29,30,31,32,33,34,35,75,26,
            0,0,1,2,3,4,5,6,36,8,
            9,64,0,0,13,92,93,94,95,96,
            97,98,99,100,101,0,0,65,27,28,
            29,30,31,32,33,34,35,0,66,61,
            62,0,1,2,3,4,5,6,36,8,
            9,26,76,77,13,81,82,83,84,85,
            86,87,88,0,1,2,65,26,27,28,
            29,0,31,32,33,34,35,0,1,2,
            3,4,5,6,0,8,9,0,1,5,
            13,4,0,1,2,0,55,71,72,73,
            74,0,0,2,27,28,29,6,31,32,
            33,34,35,26,0,1,0,1,2,3,
            4,37,6,0,8,9,0,1,5,13,
            4,0,1,2,3,64,5,0,7,0,
            3,0,65,27,28,29,5,31,32,33,
            34,35,26,0,1,2,3,4,0,6,
            37,8,9,5,0,0,13,36,37,0,
            1,2,3,8,9,80,7,36,37,26,
            27,28,29,67,31,32,33,34,35,0,
            1,2,3,4,0,6,2,8,9,0,
            6,64,13,0,5,0,1,0,1,4,
            7,4,0,55,2,26,27,28,29,7,
            31,32,33,34,35,0,1,2,3,4,
            0,6,0,8,9,36,37,5,13,0,
            1,0,1,4,0,4,0,1,0,0,
            4,26,27,28,29,7,31,32,33,34,
            35,0,1,2,3,4,36,6,0,8,
            9,68,0,1,13,7,4,0,0,1,
            2,3,4,0,6,0,8,9,27,28,
            29,13,31,32,33,34,35,0,66,2,
            0,0,0,6,3,27,28,29,0,31,
            32,33,34,35,0,1,2,3,4,36,
            6,36,8,9,0,0,26,13,79,0,
            1,0,1,2,3,4,68,6,36,8,
            9,27,28,29,13,31,32,33,34,35,
            0,0,75,2,0,0,0,0,27,28,
            29,5,31,32,33,34,35,10,11,12,
            0,14,15,16,17,18,19,20,21,22,
            23,24,25,0,0,0,0,63,0,0,
            0,0,0,10,11,12,26,14,15,16,
            17,18,19,20,21,22,23,24,25,0,
            26,55,0,0,26,0,0,0,0,10,
            11,12,0,14,15,16,17,18,19,20,
            21,22,23,24,25,0,0,0,0,0,
            0,0,0,0,0,10,11,12,0,14,
            15,16,17,18,19,20,21,22,23,24,
            25,75,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            2059,2070,1882,1748,2071,2059,2072,71,1735,1726,
            2274,2275,2276,1760,2380,2381,2382,2383,2384,2385,
            2386,2387,2388,2389,1134,2395,1,1875,1868,1849,
            2223,2073,2074,2075,1656,1578,55,1,2224,2222,
            2277,2225,2221,2228,2233,2232,2230,2231,2229,2234,
            2235,2227,2236,2237,2238,52,2391,2390,1255,680,
            543,2059,1,1687,1678,1,192,32,1082,1803,
            42,1,1,1,646,1,1,1,1,1,
            1,1,1,1,1,1,1,660,338,49,
            2318,1,1788,232,2085,2086,3467,1446,1561,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,192,1,1,1,
            1,1,2059,1,232,232,1,191,2256,1,
            2286,1550,1,1,1,538,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2053,
            1300,232,1,2065,232,517,511,59,1777,1769,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,191,1,1,
            1,1,1,2059,1,2064,254,1,192,2256,
            2059,183,1209,1,1,1,2394,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            184,1696,1,1,2065,337,517,91,1446,1561,
            231,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,192,1,
            1,1,1,1,2059,2070,2064,287,2071,91,
            2256,231,231,2059,2274,2275,2276,63,2380,2381,
            2382,2383,2384,2385,2386,2387,2388,2389,1134,2395,
            1,250,250,250,2223,250,67,250,231,3467,
            2059,231,2224,2222,2277,2225,2221,2228,2233,2232,
            2230,2231,2229,2234,2235,2227,2236,2237,2238,130,
            2391,2390,1255,680,543,2059,250,250,1231,2274,
            2275,2276,60,2380,2381,2382,2383,2384,2385,2386,
            2387,2388,2389,1134,2395,263,2286,1300,1,2223,
            2059,58,517,1477,621,73,2059,2224,2222,2277,
            2225,2221,2228,2233,2232,2230,2231,2229,2234,2235,
            2227,2236,2237,2238,1405,2391,2390,20,2059,2050,
            2050,2059,2050,266,2050,1696,1,180,180,180,
            517,180,180,180,180,180,180,180,180,180,
            180,180,180,1540,1528,1509,1267,180,51,57,
            131,1788,1446,1561,2050,180,180,180,180,180,
            2274,2275,2276,65,2380,2381,2382,2383,2384,2385,
            2386,2387,2388,2389,1134,2395,1432,2059,50,2059,
            2223,1788,2063,132,68,1364,1312,2059,2224,2222,
            2277,2225,2221,2274,2275,2276,69,2380,2381,2382,
            2383,2384,2385,2386,2387,2388,2389,1134,2395,62,
            1446,1561,269,2223,1696,254,133,1777,1769,517,
            2049,2224,2222,2277,2225,2221,2274,2275,2276,2059,
            2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,
            1134,2395,2062,271,272,1614,2223,1777,1769,134,
            517,517,2059,43,2224,2222,2277,2225,2221,2274,
            2275,2276,1405,2380,2381,2382,2383,2384,2385,2386,
            2387,2388,2389,1134,2395,756,54,1,2056,2223,
            1540,1528,1509,1267,1687,1678,66,2224,2222,2277,
            2225,2221,1,2070,1882,1697,2071,2063,2072,1432,
            1735,1726,2059,2059,339,1760,64,2069,56,2059,
            1519,1422,2403,2402,2404,2406,2405,1862,2059,1875,
            1868,1849,774,2073,2074,2075,1656,1578,1061,1175,
            2059,2059,2070,1882,1707,2071,2063,2072,1421,1735,
            1726,2318,89,2059,1760,1040,1019,998,977,956,
            914,935,893,872,851,2059,61,2062,1875,1868,
            1849,1124,2073,2074,2075,1656,1578,2059,2068,1446,
            1561,1,2070,1882,1748,2071,29,2072,830,1735,
            1726,1612,1477,621,1760,1519,1422,2403,2402,2404,
            2406,2405,1862,1,2286,1550,2062,3467,1875,1868,
            1849,1,2073,2074,2075,1656,1578,2059,2070,1882,
            1748,2071,2063,2072,2059,1735,1726,2059,2070,2065,
            1760,2071,254,2286,1550,72,29,1540,1528,1509,
            1267,2059,2059,1301,1875,1868,1849,2394,2073,2074,
            2075,1656,1578,1254,2059,2418,2059,1,1,1,
            1,2064,1,1,1,1,2059,2070,2065,1,
            2071,1,251,251,251,2317,251,1,251,2059,
            254,2059,2062,1,1,1,2065,1,1,1,
            1,1,1352,2059,2070,1882,1748,2071,2059,2072,
            2064,1735,1726,2067,2059,53,1760,251,251,269,
            2286,1300,254,1687,1678,660,517,1885,2064,3467,
            1875,1868,1849,2376,2073,2074,2075,1656,1578,1,
            2070,1882,1748,2071,354,2072,1665,1735,1726,2059,
            2394,2318,1760,2059,2065,2059,2070,186,3481,2071,
            1145,3481,223,2066,1918,3467,1875,1868,1849,517,
            2073,2074,2075,1656,1578,2059,2070,1882,1748,2071,
            257,2072,1,1735,1726,1320,2064,2069,1760,185,
            3495,207,3499,3495,2059,3499,209,2070,221,70,
            2071,3467,1875,1868,1849,517,2073,2074,2075,1656,
            1578,2059,2070,1882,1748,2071,1953,2072,293,1735,
            1726,1504,208,557,1760,1189,557,212,2059,2070,
            1886,1748,2071,30,2072,30,1735,1726,1875,1868,
            1849,1760,2073,2074,2075,1656,1578,353,2068,1666,
            2059,2059,208,2394,1331,1875,1868,1849,2059,2073,
            2074,2075,1656,1578,2059,2070,1891,1748,2071,588,
            2072,2088,1735,1726,202,2059,1705,1760,756,2059,
            2298,1,2070,1882,1748,2071,1522,2072,3383,1735,
            1726,1875,1868,1849,1760,2073,2074,2075,1656,1578,
            2059,2059,1165,1975,2059,2059,286,2059,1875,1868,
            1849,546,2073,2074,2075,1656,1578,2274,2275,2276,
            190,2380,2381,2382,2383,2384,2385,2386,2387,2388,
            2389,1134,2395,249,190,2059,2059,1233,190,2059,
            2059,2059,2059,2274,2275,2276,186,2380,2381,2382,
            2383,2384,2385,2386,2387,2388,2389,1134,2395,252,
            185,546,2059,2059,207,2059,2059,2059,2059,2274,
            2275,2276,2059,2380,2381,2382,2383,2384,2385,2386,
            2387,2388,2389,1134,2395,253,2059,2059,2059,2059,
            2059,2059,2059,2059,2059,2274,2275,2276,2059,2380,
            2381,2382,2383,2384,2385,2386,2387,2388,2389,1134,
            2395,703
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            112,1,21,105,21,21,21,21,21,21,
            21,21,21,67,494,87,84,91,89,97,
            95,99,98,101,100,73,21,494,494,546,
            546,470,21,363,363,421,494,21,21,21,
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,21,21,21,21,363,363,363,
            109,49,468,3,374,361,360,321,147,335,
            63,335,63,63,335,63,335,508,194,84,
            84,89,89,89,89,87,87,95,91,91,
            98,97,372,100,99,261,65,191,65,421,
            468,6,109,239,131,363,427,377,148,63,
            546,546,63,546,21,191,47,468,343,239,
            109,130,3,363,358,508,362,379,363,65,
            150,65,255,47,343,343,21,21,109,131,
            308,374,367,366,468,379,363,65,150,255,
            255,257,318,343,239,109,109,308,363,427,
            377,358,150,191,38,150,255,257,489,257,
            191,45,492,546,21,317,239,343,303,301,
            301,36,303,379,150,40,257,191,21,546,
            67,49,109,546,21,343,148,148,485,363,
            362,191,297,21,296,34,468,191,109,363,
            363,547,303,547,40,21,34,362,547
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            102,0,65,5,30,10,11,12,14,15,
            16,17,18,19,20,21,22,23,24,25,
            6,31,32,33,4,27,28,13,8,9,
            34,35,29,3,1,2,0,66,5,3,
            1,2,63,0,5,55,7,68,27,28,
            13,3,8,9,34,35,29,2,6,31,
            32,33,1,4,26,0,7,2,68,89,
            27,28,75,92,93,94,95,96,98,97,
            99,100,101,3,69,70,8,9,62,61,
            71,72,73,74,76,77,13,78,79,80,
            55,66,90,91,63,37,102,36,65,5,
            0,29,6,31,32,33,1,4,2,27,
            28,13,3,8,9,34,35,67,0,30,
            65,5,27,28,13,3,8,9,34,35,
            29,1,4,31,32,33,2,6,0,38,
            43,10,44,58,39,45,40,46,47,41,
            11,48,49,30,59,42,60,50,51,12,
            52,53,54,1,4,14,15,16,17,18,
            19,20,56,21,22,23,57,24,25,67,
            5,55,0,30,42,41,40,39,38,68,
            89,27,28,13,8,9,69,70,61,62,
            71,72,73,74,76,77,78,79,80,90,
            91,75,92,93,94,95,96,97,98,99,
            100,101,36,5,7,2,3,37,10,11,
            12,14,15,16,17,18,19,20,21,22,
            23,24,25,0,1,4,5,55,36,0,
            13,3,8,9,69,70,61,62,71,72,
            73,74,76,77,78,79,80,90,91,75,
            92,93,94,95,96,97,98,99,100,101,
            65,37,55,102,26,63,66,5,36,0,
            6,2,5,63,36,37,66,81,82,83,
            84,85,86,87,88,0,75,7,68,0,
            51,43,48,46,47,45,44,49,50,52,
            53,54,57,56,63,66,42,39,30,38,
            41,40,10,11,12,14,15,16,17,18,
            19,20,21,22,23,24,25,3,1,2,
            7,36,37,5,0,2,5,36,37,66,
            7,63,0,3,2,7,37,5,38,43,
            10,44,58,39,45,40,46,47,41,11,
            48,49,30,59,42,60,50,51,12,52,
            53,54,1,4,14,15,16,17,18,19,
            20,56,21,22,23,57,24,25,64,0,
            5,37,3,2,7,0,38,43,10,44,
            58,39,45,40,46,47,41,11,48,49,
            30,59,42,60,50,51,12,52,53,54,
            1,4,14,15,16,17,18,19,20,56,
            21,22,23,57,24,25,64,3,0,29,
            6,31,32,33,4,2,27,28,13,3,
            8,9,34,35,1,37,5,0,5,36,
            55,75,0,29,6,31,32,33,2,27,
            28,13,3,8,9,34,35,58,59,60,
            51,43,48,46,47,45,44,49,50,52,
            53,54,57,56,42,39,30,38,41,25,
            24,14,15,16,17,18,19,20,21,22,
            23,10,11,12,40,4,1,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static char nasb[] = {0,
            37,77,25,77,25,25,25,25,25,25,
            25,25,25,77,120,77,77,77,77,77,
            77,77,77,77,77,77,25,120,120,11,
            11,113,121,97,97,102,1,25,25,25,
            25,25,25,25,25,25,25,25,25,25,
            25,25,25,121,25,25,25,25,25,25,
            25,25,25,25,25,25,25,97,97,97,
            15,92,80,13,101,44,44,63,49,64,
            51,64,56,56,64,55,64,58,77,77,
            77,77,77,77,77,77,77,77,77,77,
            77,77,77,77,77,93,93,76,77,66,
            77,46,15,111,14,97,106,96,49,7,
            7,7,7,7,25,53,76,77,88,111,
            15,14,116,97,71,27,77,108,97,35,
            76,77,76,23,88,76,25,25,15,14,
            76,70,44,44,80,108,97,77,124,76,
            7,42,9,76,111,15,15,20,97,106,
            96,83,76,53,17,132,7,42,77,77,
            53,22,77,7,25,90,111,116,40,49,
            49,77,77,128,124,73,42,53,25,7,
            99,24,15,7,25,116,49,49,96,97,
            97,53,18,25,77,73,80,53,15,97,
            97,118,77,77,73,25,85,97,78
        };
    };
    public final static char nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            83,81,80,71,79,78,1,0,107,0,
            76,0,10,5,27,0,10,75,0,110,
            0,91,10,52,5,0,83,82,81,80,
            71,79,78,0,99,0,10,96,0,92,
            0,65,0,29,0,5,10,0,53,0,
            98,0,44,0,101,72,0,71,66,67,
            68,69,58,31,0,50,49,30,0,21,
            50,49,39,37,43,10,0,95,0,30,
            56,0,50,49,39,37,43,30,0,109,
            0,5,52,46,0,10,21,0,105,0,
            21,49,50,10,0,30,56,10,28,0,
            61,0,10,97,0,22,0,111,0,47,
            10,45,0,85,10,47,0,102,10,28,
            0,10,47,73,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,9,86,87,81,1,10,11,48,
            64,76,8,93,94,95,96,97,98,99,
            101,102,103,105,106,3,6,7,68,69,
            82,83,84,12,13,42,90,44,55,60,
            63,72,47,52,56,61,62,66,67,74,
            75,78,79,80,91,100,104,54,70,73,
            16,17,29,30,89,92,117,4,14,15,
            18,19,20,21,31,22,23,24,25,26,
            107,108,109,110,111,112,113,114,5,27,
            28,32,33,34,35,36,37,38,39,40,
            41,118,45,46,49,50,51,53,57,58,
            59,65,71,77,88,115,116
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            124,0,0,0,126,130,131,132,133,0,
            134,135,136,137,138,139,140,141,0,142,
            121,152,0,0,0,0,120,145,173,0,
            151,0,0,0,0,169,171,0,172,0,
            0,0,191,122,125,129,164,182,183,184,
            0,0,190,144,160,170,179,154,0,174,
            177,178,181,128,0,155,156,157,158,159,
            161,0,163,168,123,127,143,146,147,148,
            149,150,153,0,162,166,0,0,167,176,
            186,193,0,0,195,119,0,0,0,165,
            0,175,180,185,0,187,188,0,189,192,
            194,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            87,118,97,55,61,126,34,141,11,43,
            71,11,48,67,108,163,170,174,150,1,
            23,23,52,76,84,178,28,112,157,157,
            132,104,6,6,6,6,6
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            95,95,95,26,26,95,40,147,16,16,
            26,16,16,26,106,16,16,26,154,4,
            26,26,16,26,16,16,31,115,160,167,
            135,106,8,8,18,79,18
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            68,66,68,29,29,66,46,119,43,51,
            29,42,51,29,73,6,5,5,19,42,
            109,108,49,29,39,3,91,73,7,5,
            120,73,43,42,43,40,42
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            55,55,55,65,65,55,55,108,37,37,
            65,37,37,65,66,37,37,65,63,81,
            65,65,37,65,37,37,75,1,37,37,
            114,66,2,2,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            24,24,24,28,28,24,17,0,9,32,
            28,9,32,28,5,39,39,39,69,9,
            1,3,32,28,9,39,95,5,42,39,
            0,5,9,9,9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            127,160,0,227,0,156,0,2,138,0,
            177,127,2,156,0,138,0,2,127,177,
            138,0,171,7,0,144,0,223,127,0,
            75,187,0,182,221,127,26,169,0,161,
            222,0,177,127,2,166,0,177,127,2,
            0,180,2,0,137,30,207,127,7,0,
            137,207,127,30,7,0,137,30,7,0,
            137,207,127,7,0,137,7,0,2,127,
            219,138,0,172,2,0,182,205,127,26,
            118,218,58,0,161,0,182,205,127,26,
            218,58,0,164,0,192,0,217,127,164,
            0,127,164,0,217,192,0,201,127,26,
            216,118,215,188,0,201,127,26,215,188,
            0,232,107,0,114,2,162,138,192,0,
            232,138,162,2,111,0,108,232,0,162,
            91,135,0,63,137,0,181,2,0,138,
            124,0,181,2,29,0,138,163,0,214,
            2,122,0,162,7,122,0,162,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1467,0,503,0,1915,1974,1888,0,1634,1421,
            1550,1387,1353,1300,1256,0,703,588,566,1596,
            1420,1552,0,619,1257,482,0,1469,799,797,
            766,1353,1300,1256,1284,1696,1758,0,1875,1868,
            1849,1707,1697,1552,660,1364,1405,756,1477,621,
            1432,1561,1446,1540,1528,1509,1267,1788,1777,1769,
            1687,1678,1760,1748,1735,1726,1656,1578,1233,1209,
            1189,703,1165,1145,1124,1103,802,1082,774,517,
            1061,1040,1019,998,977,956,935,914,893,872,
            851,482,830,724,588,566,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,213,127,194,29,35,34,9,8,3,
            13,28,27,122,2,126,125,129,128,131,
            130,133,132,135,134,123,36,2,2,89,
            68,2,7,181,162,164,127,9,8,70,
            69,3,74,73,72,71,61,62,13,77,
            76,79,78,91,90,80,101,100,99,97,
            98,96,95,94,93,92,75,181,181,214,
            162,138,127,7,2,167,166,195,24,196,
            188,197,60,59,198,58,199,200,118,125,
            125,128,128,128,128,126,126,130,129,129,
            132,131,162,134,133,138,138,26,169,173,
            147,30,137,127,3,180,127,2,2,215,
            189,189,218,189,63,127,26,147,3,127,
            137,207,178,177,145,127,179,127,170,118,
            26,118,26,127,3,147,207,30,137,3,
            160,2,154,156,127,36,177,216,127,26,
            127,221,127,147,127,137,137,127,172,127,
            2,173,26,201,164,202,127,205,118,206,
            182,36,223,68,7,224,127,178,227,82,
            81,88,138,127,127,127,205,182,75,36,
            161,75,171,68,7,178,2,2,2,177,
            219,201,217,63,172,2,127,182,171,170,
            170,127,138,36,36,63,173,228,36
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "__data",
            "__near",
            "__xdata",
            "__far",
            "__idata",
            "__pdata",
            "__code",
            "__bit",
            "__sfr",
            "__sfr16",
            "__sfr32",
            "__sbit",
            "__at",
            "__banked",
            "__interrupt",
            "__using",
            "__reentrant",
            "__critical",
            "__naked",
            "__wparam",
            "__shadowregs",
            "__preserves__regs",
            "__asm",
            "__endasm",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "expression_parser_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "and_expression",
            "exclusive_or_expression",
            "inclusive_or_expression",
            "logical_and_expression",
            "logical_or_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "initializer_seq",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "absolute_address",
            "original_function_direct_decla" +
            "rator",
            "sdcc_function_attributes",
            "sdcc_function_attribute",
            "preserves_regs_args",
            "preserves_regs_arg"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
