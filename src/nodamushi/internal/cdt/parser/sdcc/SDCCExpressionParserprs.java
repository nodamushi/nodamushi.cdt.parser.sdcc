/*******************************************************************************
* Copyright (c) 2006, 2010 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package nodamushi.internal.cdt.parser.sdcc;

public class SDCCExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, SDCCExpressionParsersym {
    public final static int ERROR_SYMBOL = 67;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 36;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 37;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 38;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 229;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 117;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 2524;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 2;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 482;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 143;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 260;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 650;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 102;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 102;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 2032;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 2042;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = true;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return SDCCExpressionParsersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,1,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,1,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,1,0,
            0,0,0,0,0,0,0,0,0,0,
            0,1,0,0,0,0,0,0,1,0,
            0,0,0,0,0,0,0,0,0,0,
            1,0,0,0,1,0,0,0,0,0,
            0,0,0,0,1,1,1,0,1,0,
            0,0,1,0,0,0,0,0,0,0,
            1,0,0,0,0,0,0,0,0,0,
            0,0,1,0,0,0,0,0,1,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static char prosthesesIndex[] = {0,
            9,10,11,12,14,20,21,22,23,3,
            24,25,26,27,28,29,30,31,32,33,
            6,58,87,127,128,129,5,49,95,103,
            56,57,59,70,35,88,90,91,92,93,
            94,96,131,7,13,18,79,108,109,110,
            111,112,37,69,89,105,61,71,97,102,
            104,107,136,17,19,62,63,64,65,68,
            72,76,78,86,8,16,36,51,52,53,
            54,55,60,74,77,81,82,84,85,101,
            115,130,133,134,135,138,2,15,73,75,
            80,83,99,106,113,114,116,117,118,119,
            132,137,1,4,34,38,39,40,41,42,
            43,44,45,46,47,48,50,66,67,98,
            100,120,121,122,123,124,125,126,139,140,
            141,142,143
        };
    };
    public final static char prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,3,1,
            1,4,4,3,3,2,2,4,1,0,
            1,1,2,2,2,2,2,2,2,2,
            2,4,1,4,1,3,3,3,1,3,
            3,1,3,3,1,3,3,3,3,1,
            3,3,1,3,1,3,1,3,1,3,
            1,3,1,5,1,3,3,3,3,3,
            3,3,3,3,3,3,1,1,2,1,
            0,1,3,1,1,1,1,1,1,1,
            1,3,4,3,2,4,1,2,1,1,
            1,2,5,7,5,1,0,7,2,5,
            9,8,3,2,2,2,3,2,4,2,
            2,2,2,2,1,1,1,1,2,1,
            2,2,2,1,2,2,1,2,2,1,
            2,2,1,2,2,1,3,1,3,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            6,8,0,0,1,1,3,3,3,0,
            1,0,1,2,4,2,1,1,1,3,
            1,1,2,3,7,8,0,1,0,1,
            3,1,3,1,1,1,1,1,1,3,
            1,1,1,1,1,3,1,2,2,1,
            5,3,1,3,5,1,3,1,3,2,
            4,3,5,4,6,6,3,5,1,3,
            4,5,6,0,1,2,1,3,1,1,
            3,2,1,1,1,1,2,1,2,3,
            1,1,1,3,1,2,2,2,3,4,
            5,1,1,7,3,0,0,1,1,3,
            3,4,1,1,2,3,2,3,2,1,
            0,1,2,1,1,1,1,1,2,1,
            3,6,4,2,4,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,4,2,1,1,5,3,3,1,
            2,1,1,1,1,1,1,1,4,2,
            4,2,1,1,1,3,5,1,3,1,
            1,1,2,5,3,1,2,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,-37,0,0,0,0,0,0,0,
            0,0,-2,0,0,0,0,0,0,0,
            0,0,0,-126,0,0,0,0,0,-76,
            -4,-30,0,0,0,0,0,-74,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-31,0,-222,0,-14,-108,0,0,0,
            0,0,-16,0,-140,-79,0,-200,0,0,
            0,0,0,0,0,0,-144,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-182,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-77,
            -83,-86,0,-17,-34,-162,-35,0,0,-136,
            0,-50,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-33,0,-81,-1,
            0,0,0,0,0,0,0,0,0,0,
            -119,-53,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-84,0,
            0,0,0,0,0,0,0,0,0,-163,
            0,0,-120,0,0,-121,0,0,0,0,
            0,0,0,-202,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-3,0,0,0,0,0,
            0,0,0,0,-18,0,0,0,0,0,
            0,0,0,0,0,-68,0,0,-19,0,
            0,-20,0,-122,0,0,-56,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-112,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-129,0,0,0,-71,
            -113,0,-132,0,0,0,0,0,0,0,
            0,0,-21,0,0,0,0,0,0,0,
            0,0,0,-123,0,0,0,0,-22,0,
            -27,0,0,0,0,0,0,0,0,0,
            -69,0,0,0,0,0,0,0,0,0,
            0,-57,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-58,0,0,0,0,0,0,0,
            0,0,-70,0,0,0,0,0,0,0,
            0,0,0,-59,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-60,0,0,0,0,0,
            0,0,0,0,-116,0,0,0,0,0,
            0,0,0,0,0,-61,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-62,0,0,0,
            0,0,0,0,0,0,-134,0,0,0,
            0,0,0,0,0,0,0,-63,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-64,0,
            0,0,0,0,0,0,0,0,-139,0,
            0,0,0,0,0,0,0,0,0,-65,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -66,0,0,0,0,0,0,0,0,0,
            -157,0,0,0,0,0,0,0,0,0,
            0,-67,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-125,0,0,0,0,0,0,0,
            0,0,-189,0,0,0,0,0,0,0,
            0,0,0,-147,0,0,0,0,0,0,
            0,0,0,-169,0,0,0,0,0,0,
            0,0,0,0,-148,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-185,0,0,0,0,
            0,0,0,0,0,-23,0,0,0,0,
            0,0,0,0,0,-199,0,0,0,0,
            0,0,0,0,0,-24,0,0,0,0,
            0,0,0,0,0,0,0,0,-205,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-214,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-73,-124,
            0,-226,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-145,-127,-135,-88,0,-184,0,0,-204,
            0,0,0,0,-43,0,0,0,0,0,
            0,0,0,0,-174,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-131,-152,-106,
            -141,0,0,0,0,-186,-133,0,0,-25,
            0,0,0,-153,-181,0,-143,-149,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-118,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -107,0,0,-178,0,-26,-89,0,0,-198,
            0,-55,0,0,0,0,0,0,0,0,
            0,-172,0,0,0,0,0,0,0,-52,
            0,0,0,0,0,0,0,0,0,-196,
            0,0,0,0,0,-171,0,-166,-90,0,
            0,0,0,0,-91,0,-92,0,0,0,
            0,0,0,0,0,0,0,-93,0,0,
            0,0,0,-94,0,0,0,0,0,0,
            0,0,0,-49,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-6,0,0,
            0,0,0,0,0,-225,-7,0,0,0,
            0,0,0,0,-216,0,-8,0,0,0,
            0,0,0,0,0,0,0,-51,0,0,
            0,0,0,0,0,0,0,-210,0,0,
            0,0,0,0,0,0,0,0,0,-78,
            0,0,0,0,0,0,0,0,0,0,
            -115,0,0,0,0,0,0,0,0,-209,
            -95,0,0,0,0,0,-146,-96,-151,0,
            0,0,0,0,-211,-168,0,0,0,-154,
            0,0,0,-44,0,0,0,0,0,0,
            0,0,0,-167,0,0,0,0,-45,0,
            0,0,0,0,0,0,0,0,0,0,
            -46,0,0,0,0,0,0,0,0,0,
            0,0,-47,0,0,0,0,0,0,0,
            0,0,-48,0,0,0,0,0,0,0,
            0,0,-72,0,0,0,0,0,0,0,
            -80,-38,0,0,0,0,0,0,0,0,
            -5,0,0,0,0,0,0,-82,0,0,
            0,-97,0,0,0,0,0,-98,-201,-99,
            -85,0,0,0,0,-100,0,-32,0,0,
            0,0,0,0,0,-87,-101,0,0,0,
            0,0,0,0,0,0,0,-227,-102,-103,
            -104,0,0,0,0,-160,-188,0,0,0,
            0,0,0,-190,-191,0,0,0,0,0,
            -12,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-39,0,0,0,0,0,0,0,0,
            -75,-150,0,0,0,0,0,0,0,-164,
            0,-9,0,0,0,0,0,0,0,0,
            -105,0,-109,-110,0,0,0,0,0,0,
            -10,0,0,0,0,0,0,0,-11,0,
            0,0,0,0,0,0,-36,-173,0,0,
            0,0,0,0,-197,-213,0,0,-207,-111,
            -128,-208,0,-40,0,0,0,0,0,0,
            0,0,0,0,0,0,-41,0,0,0,
            0,0,0,0,-42,0,0,0,0,0,
            0,0,-114,-155,0,0,0,0,-217,-117,
            -13,0,0,0,0,0,0,-137,0,0,
            -130,-142,-170,-158,0,0,0,0,0,0,
            -229,0,0,0,0,-212,-179,0,0,0,
            0,-15,0,0,0,0,0,-180,-161,0,
            0,0,0,-218,-183,-192,-28,-159,0,-193,
            -203,-29,0,0,0,0,0,0,0,0,
            0,0,-195,-177,0,-219,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -165,0,0,-215,-223,-224,0,0,0,0,
            0,0,0,0,0,0,0,-175,0,-187,
            0,-194,0,0,0,0,0,0,-138,0,
            0,0,0,-220,0,0,0,0,0,-206,
            0,0,0,0,0,0,0,0,-176,0,
            0,0,0,-221,0,0,0,0,0,-54,
            0,0,0,0,0,0,0,0,0,0,
            -228,0,0,-156,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            97,10,114,27,27,21,21,44,44,75,
            75,1,1,2,2,2,2,3,3,3,
            4,5,5,5,5,5,5,5,5,65,
            65,76,6,6,6,6,6,6,6,6,
            6,6,6,7,7,8,8,8,8,9,
            9,9,11,11,11,12,12,12,12,12,
            13,13,13,14,14,15,15,16,16,17,
            17,18,18,19,19,20,20,20,20,20,
            20,20,20,20,20,20,20,115,45,35,
            98,98,77,77,53,116,116,116,116,116,
            116,116,117,117,117,118,118,123,123,124,
            124,119,119,120,120,120,126,126,121,121,
            121,121,121,122,122,122,122,122,125,125,
            28,28,28,28,28,31,31,31,83,83,
            78,78,78,78,79,79,79,80,80,80,
            81,81,81,82,82,82,127,127,128,128,
            129,32,34,34,34,34,34,57,58,58,
            58,58,58,58,58,58,58,58,58,58,
            69,66,66,99,100,71,71,67,67,67,
            72,84,84,85,85,73,73,73,47,101,
            101,86,87,87,87,68,68,102,88,88,
            89,89,74,74,22,23,23,23,33,54,
            54,36,36,36,36,39,39,41,37,37,
            38,42,42,130,130,40,131,131,103,103,
            29,29,29,29,29,29,29,29,29,90,
            55,55,55,55,30,60,60,59,59,59,
            61,61,56,56,104,104,64,64,62,62,
            62,48,48,48,49,50,50,50,51,51,
            51,51,70,70,46,46,52,106,105,105,
            105,105,91,107,108,108,109,109,110,110,
            132,132,133,133,134,134,134,134,136,136,
            135,135,135,137,138,138,97,97,22,22,
            22,24,24,24,24,24,24,24,24,24,
            24,58,58,25,25,92,26,43,43,42,
            111,111,93,93,93,93,93,93,93,94,
            94,94,94,94,94,63,95,95,112,112,
            96,116,116,139,140,140,141,141,142,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,1,1357,17,21,18,546,1356,
            45,614,553,359,749,735,813,752,1156,829,
            1310,1176,75,92,729,136,214,318,319,320,
            485,583,776,31,138,135,137,161,533,20,
            17,21,18,546,1356,45,614,553,1813,749,
            735,813,752,1156,829,1310,1176,75,801,276,
            140,167,776,31,685,240,68,38,285,144,
            147,150,153,56,649,211,672,504,776,1847,
            511,1500,1611,1628,1641,1656,1255,760,20,17,
            21,18,546,1356,45,614,553,690,749,735,
            813,752,1156,829,1310,1176,75,282,25,612,
            20,17,21,18,546,1356,45,614,553,690,
            749,735,813,752,1156,829,1310,1176,75,282,
            484,778,812,283,90,655,854,655,24,1743,
            245,180,832,20,17,21,18,546,43,45,
            614,553,211,749,1640,283,1603,288,19,277,
            358,1743,136,214,318,319,320,38,334,192,
            687,138,135,137,161,1834,1971,725,289,290,
            725,191,832,20,17,21,18,546,43,45,
            614,553,616,749,735,813,1669,140,167,810,
            291,1315,88,696,1230,88,144,147,150,153,
            774,649,800,658,555,316,776,188,1500,1611,
            1628,1641,1656,1255,796,20,17,21,18,546,
            1356,45,614,553,824,749,735,813,752,1156,
            829,1310,1176,75,282,832,20,17,21,18,
            546,1356,45,614,553,313,749,735,813,752,
            1156,829,1310,1176,75,92,655,493,693,37,
            283,754,404,1009,776,187,1743,832,20,17,
            21,18,546,43,45,614,553,1300,749,735,
            813,752,1156,1741,292,902,20,17,21,18,
            546,1356,45,614,553,1831,749,735,813,752,
            1156,829,1310,1176,75,1298,187,1865,1306,294,
            418,418,511,572,20,17,21,18,546,1356,
            45,614,553,258,749,735,813,752,1156,829,
            1310,1176,75,1318,697,1832,1527,22,242,437,
            241,832,20,17,21,18,546,1356,45,614,
            553,655,749,735,813,752,1156,829,1310,1176,
            75,93,832,20,17,21,18,546,1356,45,
            614,553,1351,749,735,813,752,1156,829,1310,
            1176,75,86,832,20,17,21,18,546,1356,
            45,614,553,655,749,735,813,752,1156,829,
            1310,1176,75,85,832,20,17,21,18,546,
            1356,45,614,553,23,749,735,813,752,1156,
            829,1310,1176,75,84,832,20,17,21,18,
            546,1356,45,614,553,655,749,735,813,752,
            1156,829,1310,1176,75,83,832,20,17,21,
            18,546,1356,45,614,553,274,749,735,813,
            752,1156,829,1310,1176,75,82,832,20,17,
            21,18,546,1356,45,614,553,655,749,735,
            813,752,1156,829,1310,1176,75,81,832,20,
            17,21,18,546,1356,45,614,553,280,749,
            735,813,752,1156,829,1310,1176,75,80,832,
            20,17,21,18,546,1356,45,614,553,655,
            749,735,813,752,1156,829,1310,1176,75,79,
            832,20,17,21,18,546,1356,45,614,553,
            333,749,735,813,752,1156,829,1310,1176,75,
            78,832,20,17,21,18,546,1356,45,614,
            553,655,749,735,813,752,1156,829,1310,1176,
            75,77,832,20,17,21,18,546,1356,45,
            614,553,281,749,735,813,752,1156,829,1310,
            1176,75,76,832,20,17,21,18,546,1356,
            45,614,553,545,749,735,813,752,1156,829,
            1310,1176,75,74,832,20,17,21,18,546,
            1356,45,614,553,655,749,735,813,752,1156,
            829,1310,1176,75,1398,832,20,17,21,18,
            546,1356,45,614,553,226,749,735,813,752,
            1156,829,1310,1176,75,1554,832,20,17,21,
            18,546,43,45,614,553,277,749,735,813,
            752,1156,829,1310,1176,94,832,20,17,21,
            18,546,43,45,614,553,336,749,735,813,
            752,1156,829,1310,1176,94,341,342,348,832,
            20,17,21,18,546,43,45,614,553,1871,
            749,735,813,752,1156,829,1310,1176,94,832,
            20,17,21,18,546,43,45,614,553,213,
            749,735,813,752,1156,829,1310,1176,94,187,
            776,189,832,20,17,21,18,546,43,45,
            614,553,1886,749,735,813,752,1156,829,1310,
            1176,94,187,38,326,245,180,776,297,1780,
            776,299,203,567,1814,832,20,17,21,18,
            546,43,45,614,553,729,1407,136,214,318,
            319,320,1730,275,1744,204,139,135,137,161,
            219,1314,222,1540,224,225,230,1529,418,149,
            71,38,268,610,510,273,839,954,264,1833,
            8,1868,141,167,819,729,265,38,418,181,
            278,145,148,151,154,244,649,1859,275,256,
            214,318,319,320,694,219,1314,222,1540,224,
            225,230,1529,229,1929,243,28,268,610,510,
            273,254,1743,1114,856,279,494,358,262,1639,
            729,925,832,20,17,21,18,546,43,45,
            614,553,740,749,735,813,752,1156,829,1671,
            832,20,17,21,18,546,43,45,614,553,
            130,749,735,813,752,1657,694,28,418,389,
            1819,275,1781,1743,205,419,1922,158,220,1314,
            222,1540,224,225,230,1529,295,1870,332,1360,
            270,610,510,273,390,245,219,1314,222,1540,
            224,225,230,1529,832,20,17,21,18,546,
            43,45,614,553,1904,749,735,1638,832,20,
            17,21,18,546,43,40,130,832,20,17,
            21,18,546,43,39,634,1819,832,20,17,
            21,18,546,43,38,1819,199,201,832,20,
            17,21,18,546,43,45,614,553,655,749,
            1646,1776,219,1314,222,1540,224,225,230,1529,
            300,219,1314,222,1540,224,225,230,1529,1905,
            1904,648,20,17,21,18,546,43,36,1114,
            694,549,136,214,318,319,320,271,517,38,
            544,143,135,137,161,712,470,1901,247,1536,
            783,356,200,201,832,20,17,21,18,546,
            43,45,614,553,418,1418,235,142,167,832,
            20,17,21,18,546,43,45,614,553,228,
            1424,832,20,17,21,18,546,43,45,614,
            553,246,1521,832,20,17,21,18,546,43,
            45,614,1528,832,20,17,21,18,546,43,
            45,614,1632,724,20,17,21,18,546,43,
            44,391,832,20,17,21,18,546,43,45,
            1399,849,20,17,21,18,546,41,424,340,
            342,348,736,136,214,318,319,320,547,248,
            450,457,146,135,137,161,597,1093,213,28,
            136,214,318,319,320,1743,490,425,725,149,
            135,137,161,136,214,318,319,320,663,527,
            6,666,152,135,137,161,38,980,136,214,
            318,319,320,90,765,868,1884,155,135,137,
            161,885,20,17,21,18,546,34,1781,256,
            214,318,319,320,220,1314,222,1540,224,225,
            230,1529,832,20,17,21,18,546,43,45,
            1405,210,648,20,17,21,18,546,43,36,
            702,1820,832,20,17,21,18,546,43,37,
            1920,820,278,544,453,284,883,352,350,248,
            275,832,20,17,21,18,546,43,36,832,
            20,17,21,18,546,43,35,364,38,268,
            610,510,273,275,1781,856,543,1229,1883,331,
            306,872,331,925,832,20,17,21,18,546,
            43,48,270,610,510,273,275,832,20,17,
            21,18,546,43,47,832,20,17,21,18,
            546,43,46,928,187,268,610,510,273,187,
            708,885,20,17,21,18,546,33,801,267,
            620,928,596,708,871,255,214,318,319,320,
            1864,685,1934,620,1780,1954,729,848,1254,1780,
            1780,195,38,255,214,318,319,320,873,817,
            1847,1254,483,1780,729,957,922,38,62,1372,
            89,418,38,1307,1668,1744,260,483,620,967,
            198,1828,483,184,817,1847,418,88,1372,260,
            182,1307,967,620,1828,198,198,617,296,1767,
            198,928,88,803,895,216,900,88,206,2042,
            2042,198,617,298,1767,1918,615,617,803,1767,
            928,1104,518,255,214,318,319,320,1390,27,
            1918,746,620,210,655,2042,841,359,2042,620,
            1006,193,255,214,318,319,320,1354,1858,123,
            1254,2042,1275,1949,655,351,193,1254,210,620,
            38,1677,256,214,318,319,320,1846,1949,2042,
            725,770,1775,1858,642,349,2042,198,260,2042,
            1940,1488,2042,1828,620,260,2042,2042,1051,2042,
            1828,2042,357,196,2042,88,1918,2042,2042,2042,
            2042,2042,1254,2042,2042,1670,2042,2042,2042,2042,
            2042,2042,2042,2042,2042,2042,2042,2042,2042,2042,
            2042,2042,194,2042,2042,1535,2042,2042,2042,2042,
            261,2042,0,20,180,0,1,2269,0,1,
            2280,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,0,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,0,27,28,29,
            30,31,32,33,34,35,0,0,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,0,56,57,58,59,
            60,0,1,8,9,4,5,0,63,2,
            0,10,11,12,7,14,15,16,17,18,
            19,20,21,22,23,24,25,80,0,0,
            64,30,3,5,27,28,26,61,62,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,0,1,36,37,4,5,67,0,
            1,2,10,11,12,68,14,15,16,17,
            18,19,20,21,22,23,24,25,0,1,
            2,63,30,5,66,7,89,0,69,70,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,0,1,37,0,4,5,67,
            0,0,63,10,11,12,6,14,15,16,
            17,18,19,20,21,22,23,24,25,0,
            0,2,0,30,5,0,7,5,61,62,
            5,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,0,1,37,0,4,37,
            67,36,37,0,10,11,12,0,14,15,
            16,17,18,19,20,21,22,23,24,25,
            0,1,2,3,30,5,0,7,63,26,
            0,66,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,0,
            56,57,58,59,60,0,36,37,3,10,
            11,12,0,14,15,16,17,18,19,20,
            21,22,23,24,25,0,1,2,3,30,
            0,0,7,76,77,0,6,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,78,56,57,0,0,2,
            3,0,5,0,7,2,3,10,11,12,
            7,14,15,16,17,18,19,20,21,22,
            23,24,25,71,72,73,74,30,0,0,
            0,3,61,62,37,38,39,40,41,42,
            10,11,12,0,14,15,16,17,18,19,
            20,21,22,23,24,25,13,0,0,0,
            30,3,5,0,0,90,91,0,38,39,
            40,41,42,10,11,12,0,14,15,16,
            17,18,19,20,21,22,23,24,25,0,
            61,62,0,30,2,3,0,69,70,7,
            102,38,39,40,41,42,10,11,12,0,
            14,15,16,17,18,19,20,21,22,23,
            24,25,65,0,0,2,30,69,70,0,
            7,7,0,0,38,39,40,41,42,10,
            11,12,78,14,15,16,17,18,19,20,
            21,22,23,24,25,79,0,0,1,30,
            71,72,73,74,8,9,0,38,39,40,
            41,42,0,1,2,3,4,5,6,13,
            8,9,0,0,0,13,0,5,0,0,
            81,82,83,84,85,86,87,88,0,27,
            28,29,30,31,32,33,34,35,75,26,
            0,0,1,2,3,4,5,6,36,8,
            9,64,0,0,13,92,93,94,95,96,
            97,98,99,100,101,0,0,65,27,28,
            29,30,31,32,33,34,35,0,66,61,
            62,0,1,2,3,4,5,6,36,8,
            9,26,76,77,13,81,82,83,84,85,
            86,87,88,0,1,2,65,26,27,28,
            29,0,31,32,33,34,35,0,1,2,
            3,4,5,6,0,8,9,0,1,5,
            13,4,0,1,2,0,55,71,72,73,
            74,0,0,2,27,28,29,6,31,32,
            33,34,35,26,0,1,0,1,2,3,
            4,37,6,0,8,9,0,1,5,13,
            4,0,1,2,3,64,5,0,7,0,
            3,0,65,27,28,29,5,31,32,33,
            34,35,26,0,1,2,3,4,0,6,
            37,8,9,5,0,0,13,36,37,0,
            1,2,3,8,9,80,7,36,37,26,
            27,28,29,67,31,32,33,34,35,0,
            1,2,3,4,0,6,2,8,9,0,
            6,64,13,0,5,0,1,0,1,4,
            7,4,0,55,2,26,27,28,29,7,
            31,32,33,34,35,0,1,2,3,4,
            0,6,0,8,9,36,37,5,13,0,
            1,0,1,4,0,4,0,1,0,0,
            4,26,27,28,29,7,31,32,33,34,
            35,0,1,2,3,4,36,6,0,8,
            9,68,0,1,13,7,4,0,0,1,
            2,3,4,0,6,0,8,9,27,28,
            29,13,31,32,33,34,35,0,66,2,
            0,0,0,6,3,27,28,29,0,31,
            32,33,34,35,0,1,2,3,4,36,
            6,36,8,9,0,0,26,13,79,0,
            1,0,1,2,3,4,68,6,36,8,
            9,27,28,29,13,31,32,33,34,35,
            0,0,75,2,0,0,0,0,27,28,
            29,5,31,32,33,34,35,10,11,12,
            0,14,15,16,17,18,19,20,21,22,
            23,24,25,0,0,0,0,63,0,0,
            0,0,0,10,11,12,26,14,15,16,
            17,18,19,20,21,22,23,24,25,0,
            26,55,0,0,26,0,0,0,0,10,
            11,12,0,14,15,16,17,18,19,20,
            21,22,23,24,25,0,0,0,0,0,
            0,0,0,0,0,10,11,12,0,14,
            15,16,17,18,19,20,21,22,23,24,
            25,75,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            2042,2053,1852,1751,2054,2042,2055,71,1732,1467,
            2257,2258,2259,1759,2363,2364,2365,2366,2367,2368,
            2369,2370,2371,2372,556,2378,1,1821,1691,1621,
            2206,2056,2057,2058,1457,1448,55,1,2207,2205,
            2260,2208,2204,2211,2216,2215,2213,2214,2212,2217,
            2218,2210,2219,2220,2221,52,2374,2373,612,679,
            611,2042,1,1712,1612,1,192,32,1083,1648,
            42,1,1,1,647,1,1,1,1,1,
            1,1,1,1,1,1,1,757,338,49,
            2301,1,1805,232,2068,2069,3451,1583,1593,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,192,1,1,1,
            1,1,2042,1,232,232,1,191,2239,1,
            2269,1465,1,1,1,542,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2036,
            1299,232,1,2048,232,518,512,59,1797,1784,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,191,1,1,
            1,1,1,2042,1,2047,254,1,192,2239,
            2042,183,1209,1,1,1,2377,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            184,1721,1,1,2048,337,518,91,1583,1593,
            231,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,192,1,
            1,1,1,1,2042,2053,2047,287,2054,91,
            2239,231,231,2042,2257,2258,2259,63,2363,2364,
            2365,2366,2367,2368,2369,2370,2371,2372,556,2378,
            1,250,250,250,2206,250,67,250,231,3451,
            2042,231,2207,2205,2260,2208,2204,2211,2216,2215,
            2213,2214,2212,2217,2218,2210,2219,2220,2221,130,
            2374,2373,612,679,611,2042,250,250,796,2257,
            2258,2259,60,2363,2364,2365,2366,2367,2368,2369,
            2370,2371,2372,556,2378,263,2269,1299,1,2206,
            2042,58,518,1478,622,73,2397,2207,2205,2260,
            2208,2204,2211,2216,2215,2213,2214,2212,2217,2218,
            2210,2219,2220,2221,662,2374,2373,20,2042,2033,
            2033,2042,2033,266,2033,1721,1,180,180,180,
            518,180,180,180,180,180,180,180,180,180,
            180,180,180,1571,1559,1544,1265,180,51,57,
            131,1805,1583,1593,2033,180,180,180,180,180,
            2257,2258,2259,65,2363,2364,2365,2366,2367,2368,
            2369,2370,2371,2372,556,2378,1434,2042,50,2042,
            2206,1805,2046,132,68,1362,1960,2042,2207,2205,
            2260,2208,2204,2257,2258,2259,69,2363,2364,2365,
            2366,2367,2368,2369,2370,2371,2372,556,2378,62,
            1583,1593,269,2206,1721,254,133,1797,1784,518,
            2032,2207,2205,2260,2208,2204,2257,2258,2259,2042,
            2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,
            556,2378,2045,271,272,1334,2206,1797,1784,134,
            518,518,2042,43,2207,2205,2260,2208,2204,2257,
            2258,2259,662,2363,2364,2365,2366,2367,2368,2369,
            2370,2371,2372,556,2378,1380,54,1,2039,2206,
            1571,1559,1544,1265,1712,1612,66,2207,2205,2260,
            2208,2204,1,2053,1852,1511,2054,2046,2055,1434,
            1732,1467,2042,2042,339,1759,64,2052,56,2042,
            1685,1684,2386,2385,2387,2389,2388,1866,2042,1821,
            1691,1621,775,2056,2057,2058,1457,1448,1062,1253,
            2042,2042,2053,1852,1722,2054,2046,2055,1456,1732,
            1467,2301,89,2042,1759,1041,1020,999,978,957,
            915,936,894,873,852,2042,61,2045,1821,1691,
            1621,1125,2056,2057,2058,1457,1448,2042,2051,1583,
            1593,1,2053,1852,1751,2054,29,2055,831,1732,
            1467,1676,1478,622,1759,1685,1684,2386,2385,2387,
            2389,2388,1866,1,2269,1465,2045,3451,1821,1691,
            1621,1,2056,2057,2058,1457,1448,2042,2053,1852,
            1751,2054,2046,2055,2042,1732,1467,2042,2053,2048,
            1759,2054,254,2269,1465,72,29,1571,1559,1544,
            1265,2042,2042,661,1821,1691,1621,2377,2056,2057,
            2058,1457,1448,1301,2042,2402,2042,1,1,1,
            1,2047,1,1,1,1,2042,2053,2048,1,
            2054,1,251,251,251,2300,251,1,251,2042,
            254,2042,2045,1,1,1,2048,1,1,1,
            1,1,1317,2042,2053,1852,1751,2054,2042,2055,
            2047,1732,1467,2050,2042,53,1759,251,251,269,
            2269,1299,254,1712,1612,757,518,1906,2047,3451,
            1821,1691,1621,2359,2056,2057,2058,1457,1448,1,
            2053,1852,1751,2054,354,2055,1779,1732,1467,2042,
            2397,2301,1759,2042,2048,2042,2053,186,3465,2054,
            1146,3465,223,2049,1396,3451,1821,1691,1621,518,
            2056,2057,2058,1457,1448,2042,2053,1852,1751,2054,
            257,2055,1,1732,1467,1841,2047,2052,1759,185,
            3479,207,3483,3479,2042,3483,209,2053,221,70,
            2054,3451,1821,1691,1621,518,2056,2057,2058,1457,
            1448,2042,2053,1852,1751,2054,1974,2055,293,1732,
            1467,1257,208,558,1759,1189,558,212,2042,2053,
            1867,1751,2054,30,2055,30,1732,1467,1821,1691,
            1621,1759,2056,2057,2058,1457,1448,353,2051,1782,
            2042,2042,208,2397,1252,1821,1691,1621,2042,2056,
            2057,2058,1457,1448,2042,2053,1872,1751,2054,589,
            2055,2071,1732,1467,202,2042,1768,1759,1380,2042,
            2281,1,2053,1852,1751,2054,1260,2055,3367,1732,
            1467,1821,1691,1621,1759,2056,2057,2058,1457,1448,
            2042,2042,1166,1520,2042,2042,286,2042,1821,1691,
            1621,547,2056,2057,2058,1457,1448,2257,2258,2259,
            190,2363,2364,2365,2366,2367,2368,2369,2370,2371,
            2372,556,2378,249,190,2042,2042,1232,190,2042,
            2042,2042,2042,2257,2258,2259,186,2363,2364,2365,
            2366,2367,2368,2369,2370,2371,2372,556,2378,252,
            185,547,2042,2042,207,2042,2042,2042,2042,2257,
            2258,2259,2042,2363,2364,2365,2366,2367,2368,2369,
            2370,2371,2372,556,2378,253,2042,2042,2042,2042,
            2042,2042,2042,2042,2042,2257,2258,2259,2042,2363,
            2364,2365,2366,2367,2368,2369,2370,2371,2372,556,
            2378,704
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            105,1,21,76,21,21,21,21,21,21,
            21,21,21,38,487,58,55,62,60,68,
            66,70,69,72,71,44,21,487,487,539,
            539,351,21,340,340,433,487,21,21,21,
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,21,21,21,21,340,340,340,
            80,87,480,3,386,338,337,298,140,312,
            101,312,101,101,312,101,312,501,237,55,
            55,60,60,60,60,58,58,66,62,62,
            69,68,349,71,70,143,103,224,103,433,
            480,6,80,282,124,340,439,389,141,101,
            539,539,101,539,21,224,85,480,320,282,
            80,123,3,340,335,501,339,391,340,103,
            183,103,231,85,320,320,21,21,80,124,
            377,386,344,343,480,391,340,103,183,231,
            231,233,228,320,282,80,80,377,340,439,
            389,335,183,224,542,183,231,233,482,233,
            224,83,485,539,21,227,282,320,372,370,
            370,36,372,391,183,544,233,224,21,539,
            38,87,80,539,21,320,141,141,366,340,
            339,224,179,21,178,34,480,224,80,340,
            340,540,372,540,544,21,34,339,540
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            102,0,65,5,30,10,11,12,14,15,
            16,17,18,19,20,21,22,23,24,25,
            6,31,32,33,4,27,28,13,8,9,
            34,35,29,3,1,2,0,7,2,68,
            89,27,28,75,92,93,94,95,96,98,
            97,99,100,101,3,69,70,8,9,62,
            61,71,72,73,74,76,77,13,78,79,
            80,55,66,90,91,63,37,102,36,65,
            5,0,5,55,7,68,27,28,13,3,
            8,9,34,35,29,2,6,31,32,33,
            1,4,26,0,29,6,31,32,33,1,
            4,2,27,28,13,3,8,9,34,35,
            67,0,30,65,5,27,28,13,3,8,
            9,34,35,29,1,4,31,32,33,2,
            6,0,13,3,8,9,69,70,61,62,
            71,72,73,74,76,77,78,79,80,90,
            91,75,92,93,94,95,96,97,98,99,
            100,101,65,37,55,102,26,63,66,5,
            36,0,38,43,10,44,58,39,45,40,
            46,47,41,11,48,49,30,59,42,60,
            50,51,12,52,53,54,1,4,14,15,
            16,17,18,19,20,56,21,22,23,57,
            24,25,67,5,55,0,75,7,68,0,
            1,4,5,55,36,0,30,42,41,40,
            39,38,68,89,27,28,13,8,9,69,
            70,61,62,71,72,73,74,76,77,78,
            79,80,90,91,75,92,93,94,95,96,
            97,98,99,100,101,36,5,7,2,3,
            37,10,11,12,14,15,16,17,18,19,
            20,21,22,23,24,25,0,51,43,48,
            46,47,45,44,49,50,52,53,54,57,
            56,63,66,42,39,30,38,41,40,10,
            11,12,14,15,16,17,18,19,20,21,
            22,23,24,25,3,1,2,7,36,37,
            5,0,2,5,36,37,66,7,63,0,
            29,6,31,32,33,4,2,27,28,13,
            3,8,9,34,35,1,37,5,0,6,
            2,5,63,36,37,66,81,82,83,84,
            85,86,87,88,0,3,2,7,37,5,
            38,43,10,44,58,39,45,40,46,47,
            41,11,48,49,30,59,42,60,50,51,
            12,52,53,54,1,4,14,15,16,17,
            18,19,20,56,21,22,23,57,24,25,
            64,0,5,37,3,2,7,0,38,43,
            10,44,58,39,45,40,46,47,41,11,
            48,49,30,59,42,60,50,51,12,52,
            53,54,1,4,14,15,16,17,18,19,
            20,56,21,22,23,57,24,25,64,3,
            0,5,36,55,75,0,29,6,31,32,
            33,2,27,28,13,3,8,9,34,35,
            58,59,60,51,43,48,46,47,45,44,
            49,50,52,53,54,57,56,42,39,30,
            38,41,25,24,14,15,16,17,18,19,
            20,21,22,23,10,11,12,40,4,1,
            0,66,5,3,1,2,63,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static char nasb[] = {0,
            45,73,28,73,28,28,28,28,28,28,
            28,28,28,73,119,73,73,73,73,73,
            73,73,73,73,73,73,28,119,119,13,
            13,96,120,79,79,102,1,28,28,28,
            28,28,28,28,28,28,28,28,28,28,
            28,28,28,120,28,28,28,28,28,28,
            28,28,28,28,28,28,28,79,79,79,
            17,90,55,15,101,11,11,63,23,64,
            43,64,31,31,64,30,64,58,73,73,
            73,73,73,73,73,73,73,73,73,73,
            73,73,73,73,73,91,91,72,73,106,
            73,50,17,110,16,79,112,78,23,7,
            7,7,7,7,28,9,72,73,86,110,
            17,16,76,79,67,35,73,114,79,21,
            72,73,72,26,86,72,28,28,17,16,
            72,66,11,11,55,114,79,73,123,72,
            7,33,48,72,110,17,17,88,79,112,
            78,81,72,9,127,134,7,33,73,73,
            9,25,73,7,28,74,110,76,53,99,
            99,73,73,130,123,69,33,9,28,7,
            94,27,17,7,28,76,99,99,78,79,
            79,9,128,28,73,69,55,9,17,79,
            79,19,73,73,69,28,83,79,117
        };
    };
    public final static char nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            83,81,80,71,79,78,1,0,44,0,
            29,0,76,0,10,5,27,0,112,0,
            100,0,92,0,91,10,52,5,0,102,
            72,0,65,0,83,82,81,80,71,79,
            78,0,99,0,10,97,0,108,0,5,
            10,0,93,0,30,55,0,71,66,67,
            68,69,57,31,0,21,50,49,39,37,
            43,10,0,110,0,22,0,10,21,0,
            50,49,39,37,43,30,0,111,0,5,
            52,46,0,106,0,10,98,0,63,0,
            21,49,50,10,0,50,49,30,0,60,
            0,30,55,10,28,0,96,0,47,10,
            45,0,85,10,47,0,10,75,0,103,
            10,28,0,10,47,73,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,9,86,87,81,1,10,11,48,
            64,76,8,93,94,95,96,97,98,99,
            101,102,103,105,106,3,6,7,68,69,
            82,83,84,12,13,42,90,44,55,60,
            63,72,47,52,56,61,62,66,67,74,
            75,78,79,80,91,100,104,54,70,73,
            16,17,29,30,89,92,117,4,14,15,
            18,19,20,21,31,22,23,24,25,26,
            107,108,109,110,111,112,113,114,5,27,
            28,32,33,34,35,36,37,38,39,40,
            41,118,45,46,49,50,51,53,57,58,
            59,65,71,77,88,115,116
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            124,0,0,0,126,130,131,132,133,0,
            134,135,136,137,138,139,140,141,0,142,
            121,152,0,0,0,0,120,145,173,0,
            151,0,0,0,0,169,171,0,172,0,
            0,0,191,122,125,129,164,182,183,184,
            0,0,144,160,170,179,154,0,174,177,
            178,181,194,128,0,155,156,157,158,159,
            161,0,163,168,123,127,143,146,147,148,
            149,150,153,0,162,166,0,0,167,176,
            186,190,193,0,0,196,119,0,0,0,
            165,0,175,180,185,0,187,188,0,189,
            192,195,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            87,118,97,55,61,126,34,141,11,43,
            71,11,48,67,108,163,170,174,150,1,
            23,23,52,76,84,178,28,112,157,157,
            132,104,6,6,6,6,6
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            95,95,95,26,26,95,40,147,16,16,
            26,16,16,26,106,16,16,26,154,4,
            26,26,16,26,16,16,31,115,160,167,
            135,106,8,8,18,79,18
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            68,66,68,29,29,66,46,120,43,51,
            29,42,51,29,73,6,5,5,19,42,
            110,109,49,29,39,3,91,73,7,5,
            121,73,43,42,43,40,42
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            55,55,55,65,65,55,55,108,37,37,
            65,37,37,65,66,37,37,65,63,81,
            65,65,37,65,37,37,75,1,37,37,
            114,66,2,2,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            24,24,24,28,28,24,17,0,9,32,
            28,9,32,28,5,39,39,39,69,9,
            1,3,32,28,9,39,95,5,42,39,
            0,5,9,9,9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            127,160,0,228,0,156,0,2,138,0,
            176,127,2,156,0,138,0,2,127,176,
            138,0,170,7,0,144,0,224,127,0,
            75,187,0,182,222,127,26,169,0,161,
            223,0,176,127,2,166,0,176,127,2,
            0,179,2,0,137,30,207,127,7,0,
            137,207,127,30,7,0,137,30,7,0,
            137,207,127,7,0,137,7,0,2,127,
            220,138,0,171,2,0,182,205,127,26,
            118,219,58,0,161,0,182,205,127,26,
            219,58,0,164,0,192,0,218,127,164,
            0,127,164,0,218,192,0,201,127,26,
            217,118,216,188,0,201,127,26,216,188,
            0,233,107,0,114,2,162,138,192,0,
            233,138,162,2,111,0,108,233,0,162,
            91,135,0,63,137,0,181,2,0,138,
            124,0,181,2,29,0,138,163,0,215,
            2,122,0,162,7,122,0,162,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1306,0,690,0,1883,1949,1868,0,1668,1456,
            1465,1390,1372,1299,1254,0,704,589,567,1351,
            1300,1603,0,620,1255,483,0,1540,1314,610,
            510,1372,1299,1254,1744,1721,1767,0,1821,1691,
            1621,1722,1511,1603,757,1362,662,1380,1478,622,
            1434,1593,1583,1571,1559,1544,1265,1805,1797,1784,
            1712,1612,1759,1751,1732,1467,1457,1448,1232,1209,
            1189,704,1166,1146,1125,1104,803,1083,775,518,
            1062,1041,1020,999,978,957,936,915,894,873,
            852,483,831,725,589,567,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,214,127,194,29,35,34,9,8,3,
            13,28,27,122,2,126,125,129,128,131,
            130,133,132,135,134,123,36,2,2,89,
            68,2,7,181,162,164,127,9,8,70,
            69,3,74,73,72,71,61,62,13,77,
            76,79,78,91,90,80,101,100,99,97,
            98,96,95,94,93,92,75,181,181,215,
            162,138,127,7,2,167,166,195,24,196,
            188,197,60,59,198,58,199,200,118,125,
            125,128,128,128,128,126,126,130,129,129,
            132,131,162,134,133,138,138,26,169,172,
            147,30,137,127,3,179,127,2,2,216,
            189,189,219,189,63,127,26,147,3,127,
            137,207,177,176,145,127,178,127,209,118,
            26,118,26,127,3,147,207,30,137,3,
            160,2,154,156,127,36,176,217,127,26,
            127,222,127,147,127,137,137,127,171,127,
            2,172,26,201,164,202,127,205,118,206,
            182,36,224,68,7,225,127,177,228,82,
            81,88,138,127,127,127,205,182,75,36,
            161,75,170,68,7,177,2,2,2,176,
            220,201,218,63,171,2,127,182,170,180,
            180,127,138,36,36,63,172,229,36
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "__data",
            "__near",
            "__xdata",
            "__far",
            "__idata",
            "__pdata",
            "__code",
            "__bit",
            "__sfr",
            "__sfr16",
            "__sfr32",
            "__sbit",
            "__at",
            "__banked",
            "__interrupt",
            "__using",
            "__reentrant",
            "__critical",
            "__naked",
            "__wparam",
            "__shadowregs",
            "__preserves__regs",
            "__asm",
            "__endasm",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "expression_parser_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "and_expression",
            "exclusive_or_expression",
            "inclusive_or_expression",
            "logical_and_expression",
            "logical_or_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "initializer_seq",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "absolute_address",
            "original_function_direct_decla" +
            "rator",
            "sdcc_function_attributes",
            "sdcc_function_attribute",
            "integer_token",
            "preserves_regs_args",
            "preserves_regs_arg"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
