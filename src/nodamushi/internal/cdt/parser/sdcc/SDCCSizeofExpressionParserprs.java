/*******************************************************************************
* Copyright (c) 2006, 2010 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package nodamushi.internal.cdt.parser.sdcc;

public class SDCCSizeofExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, SDCCSizeofExpressionParsersym {
    public final static int ERROR_SYMBOL = 67;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 50;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 51;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 38;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 226;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 117;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 2691;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 2;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 481;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 143;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 260;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 1968;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 102;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 102;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 2107;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 2210;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = true;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return SDCCSizeofExpressionParsersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,1,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,1,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,1,0,0,0,0,0,0,0,
            1,0,0,0,0,0,0,1,0,0,
            0,0,0,0,0,0,0,0,0,1,
            0,0,0,1,0,0,0,0,0,0,
            0,0,0,0,1,1,1,0,1,0,
            0,0,1,0,0,0,0,0,0,0,
            1,0,0,0,0,0,0,0,0,0,
            0,0,1,0,0,0,0,0,1,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static char prosthesesIndex[] = {0,
            9,10,11,12,14,20,21,22,23,24,
            3,25,26,27,28,29,30,31,32,33,
            6,58,87,127,128,129,5,49,95,103,
            37,56,57,59,70,35,88,90,91,92,
            93,94,96,131,7,13,79,108,109,110,
            111,18,69,89,105,112,61,71,97,102,
            104,107,17,19,62,63,64,65,68,72,
            76,78,86,8,16,36,51,52,53,54,
            55,60,74,77,81,82,84,85,101,115,
            130,133,134,135,136,138,2,15,73,75,
            80,83,99,106,113,114,116,117,118,119,
            132,137,1,4,34,38,39,40,41,42,
            43,44,45,46,47,48,50,66,67,98,
            100,120,121,122,123,124,125,126,139,140,
            141,142,143
        };
    };
    public final static char prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,3,1,
            1,4,4,3,3,2,2,4,1,0,
            1,1,2,2,2,2,2,2,2,2,
            2,1,4,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,4,3,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,2,5,9,
            8,3,2,2,2,3,2,4,2,2,
            2,2,2,1,1,1,1,2,1,2,
            2,2,1,2,2,1,2,2,1,2,
            2,1,2,2,1,3,1,3,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,6,
            8,0,0,1,1,3,3,3,0,1,
            0,1,2,4,2,1,1,1,3,1,
            1,2,3,7,8,0,1,0,1,3,
            1,3,1,1,1,1,1,1,3,1,
            1,1,1,1,3,1,2,2,1,5,
            3,1,3,5,1,3,1,3,2,4,
            3,5,4,6,6,3,5,1,3,4,
            5,6,0,1,2,1,3,1,1,3,
            2,1,1,1,1,2,1,2,3,1,
            1,1,3,1,2,2,2,3,4,5,
            1,1,7,3,0,0,1,1,3,3,
            4,1,1,2,3,2,3,2,1,0,
            1,2,1,1,1,1,1,2,1,3,
            6,4,2,4,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,4,2,1,1,5,3,3,1,2,
            1,1,1,1,1,1,1,4,2,4,
            2,1,1,1,3,5,1,3,1,1,
            1,2,5,3,1,2,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,-36,0,0,0,0,0,0,0,0,
            0,0,-2,0,0,0,0,0,0,0,
            0,0,-4,0,0,0,0,0,-117,0,
            -14,-74,-16,0,0,0,0,-72,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-104,-105,-160,0,-124,0,0,0,0,
            -17,0,-18,0,-118,0,0,0,0,0,
            0,0,0,0,-116,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-6,0,0,0,0,0,
            0,0,0,0,-19,0,-20,0,-119,0,
            0,-37,0,0,0,0,0,0,0,0,
            0,0,-52,0,0,0,0,0,0,0,
            0,0,0,-71,0,0,0,0,-141,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-165,
            0,0,0,0,-69,0,-179,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-84,-110,
            0,0,-120,0,0,-186,-54,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-133,0,0,-21,0,-121,
            0,-115,0,-33,-34,-169,-22,-126,0,-67,
            -153,-75,0,-29,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-23,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-30,0,0,
            0,0,0,-81,0,0,-198,0,0,0,
            0,0,0,0,0,0,0,-199,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-3,0,
            0,0,0,0,0,0,0,0,0,-68,
            0,0,0,0,0,0,0,0,0,-46,
            0,0,0,0,0,0,0,0,0,0,
            0,-24,0,0,0,-77,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-55,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-123,0,-109,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-129,0,0,0,
            0,0,0,0,0,0,0,-25,0,0,
            0,0,0,0,0,0,0,-113,0,-181,
            0,-201,0,0,-26,-87,0,-27,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-56,0,
            0,0,0,0,0,0,0,0,0,-131,
            0,0,0,0,0,0,0,0,0,-57,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -58,0,0,0,0,0,0,0,0,0,
            0,-136,0,0,0,0,0,0,0,0,
            0,-59,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-60,0,0,0,0,0,0,0,
            0,0,0,-154,0,0,0,0,0,0,
            0,0,0,-61,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-62,0,0,0,0,0,
            0,0,0,0,0,-166,0,0,0,0,
            0,0,0,0,0,-63,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-64,0,0,0,
            0,0,0,0,0,0,0,-207,0,0,
            0,0,0,0,0,0,0,-65,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-66,0,
            0,0,0,0,0,0,0,0,0,-208,
            0,0,0,0,0,0,0,0,0,-122,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -144,0,0,0,0,0,0,0,0,0,
            0,-217,0,0,0,0,0,0,0,0,
            0,-145,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-182,0,0,0,0,0,0,0,
            0,0,0,-88,0,0,0,0,0,0,
            0,0,-196,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-202,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-204,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-205,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-211,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-223,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-86,0,-132,-112,0,0,0,0,
            0,0,0,0,-89,0,-7,0,0,0,
            0,0,0,0,0,0,0,0,0,-197,
            0,-79,0,0,0,0,0,0,-82,-90,
            -159,0,0,0,0,0,0,0,0,-91,
            -149,-78,0,0,0,0,-92,0,-93,0,
            0,0,-94,-137,-219,-95,0,0,0,0,
            0,0,0,0,0,0,0,0,-128,0,
            -142,-226,-150,0,0,0,0,0,0,0,
            0,0,0,0,0,-193,-138,-146,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-51,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-222,
            0,-96,0,0,0,0,0,0,0,0,
            0,-5,0,0,0,0,0,0,0,-48,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-140,-97,0,0,0,0,
            0,0,0,0,-98,0,0,0,-99,-151,
            0,0,0,-49,0,0,0,0,0,0,
            0,0,0,0,-76,0,0,-50,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -143,-148,-157,-161,0,0,0,0,0,0,
            0,0,0,0,0,-183,0,0,0,0,
            -42,0,0,0,0,0,0,0,0,0,
            0,-47,0,0,0,0,0,0,0,0,
            0,0,0,-43,0,0,0,0,0,0,
            0,0,0,0,-44,0,0,0,0,0,
            0,0,0,0,0,-45,0,0,0,0,
            0,0,0,0,0,0,-213,-80,-70,0,
            0,0,0,0,0,0,-218,0,-38,0,
            0,0,0,0,0,0,0,-31,-224,0,
            0,0,0,0,-163,-164,-225,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-83,-171,-187,-100,0,-85,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-73,0,0,
            0,0,-188,-101,-102,-103,-170,0,0,-147,
            0,0,0,0,0,0,0,0,0,-12,
            0,0,0,0,0,0,0,-8,0,0,
            0,0,0,0,0,0,0,-9,0,0,
            0,0,0,0,0,0,0,0,0,-10,
            0,0,0,0,0,0,0,-35,0,0,
            -11,0,0,0,0,0,0,0,0,-39,
            0,0,0,0,0,0,0,-40,0,0,
            0,0,0,0,0,-114,0,-41,0,0,
            0,0,0,0,0,-106,0,0,-111,-172,
            -210,-108,-152,-127,-125,0,0,0,0,-200,
            0,-175,-178,0,-134,0,-194,-139,-155,0,
            0,0,0,0,0,0,0,0,0,0,
            -32,-15,0,-176,-167,-177,0,-180,-195,0,
            0,0,0,-189,0,0,0,-13,0,0,
            0,0,0,0,-28,-107,0,0,0,0,
            -158,0,0,0,0,0,0,0,-156,-209,
            -191,-190,-216,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-162,0,0,0,
            0,-212,0,0,0,0,0,-184,0,0,
            0,0,-192,0,0,0,0,-1,0,0,
            0,0,0,0,0,0,-135,0,0,0,
            0,0,0,0,-215,0,-220,0,-221,0,
            0,0,0,0,-174,0,-130,0,-214,0,
            0,-185,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-203,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-173,0,0,0,-168,0,0,0,
            0,0,0,0,-53,0,0,0,-206,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            97,11,114,27,27,21,21,45,45,74,
            74,1,1,2,2,2,2,3,3,3,
            4,5,5,5,5,5,5,5,5,64,
            64,75,6,6,6,6,6,6,6,6,
            6,6,7,7,8,8,8,8,9,9,
            9,10,10,10,12,12,12,12,12,13,
            13,13,14,14,15,15,16,16,17,17,
            18,18,19,19,20,20,20,20,20,20,
            20,20,20,20,20,20,115,46,36,98,
            98,76,76,31,116,116,116,116,116,116,
            116,117,117,117,118,118,123,123,124,124,
            119,119,120,120,120,126,126,121,121,121,
            121,121,122,122,122,122,122,125,125,28,
            28,28,28,28,32,32,32,82,82,77,
            77,77,77,78,78,78,79,79,79,80,
            80,80,81,81,81,127,127,128,128,129,
            33,35,35,35,35,35,57,58,58,58,
            58,58,58,58,58,58,58,58,58,68,
            65,65,99,100,70,70,66,66,66,71,
            83,83,84,84,72,72,72,47,101,101,
            85,86,86,86,67,67,102,87,87,88,
            88,73,73,22,23,23,23,34,53,53,
            37,37,37,37,40,40,42,38,38,39,
            43,43,130,130,41,131,131,103,103,29,
            29,29,29,29,29,29,29,29,89,54,
            54,54,54,30,60,60,59,59,59,61,
            61,55,55,104,104,63,63,62,62,62,
            48,48,48,49,50,50,50,51,51,51,
            51,69,69,52,52,56,106,105,105,105,
            105,90,107,108,108,109,109,110,110,132,
            132,133,133,134,134,134,134,136,136,135,
            135,135,137,138,138,97,97,22,22,22,
            24,24,24,24,24,24,24,58,58,58,
            58,58,25,25,91,26,44,44,43,111,
            111,92,92,92,92,92,92,92,93,93,
            93,93,93,93,95,94,94,112,112,96,
            116,116,139,140,140,141,141,142,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,1,936,17,21,18,511,935,44,
            551,513,595,349,553,708,597,752,717,918,
            842,74,91,279,135,213,317,318,319,274,
            1454,909,732,65,137,134,136,160,395,20,
            17,21,18,511,935,44,551,513,595,1859,
            553,708,597,752,717,918,842,74,680,139,
            166,275,650,6,688,239,6,143,146,149,
            152,404,1422,77,884,213,187,629,503,1585,
            1442,1678,1722,1727,1393,900,20,17,21,18,
            511,42,44,551,513,595,482,553,708,597,
            752,717,918,842,93,776,20,17,21,18,
            511,42,40,197,28,33,334,359,1856,213,
            186,87,776,20,17,21,18,511,42,44,
            1264,715,1818,776,20,17,21,18,511,42,
            44,551,513,595,10,553,708,1725,714,710,
            20,17,21,18,511,935,44,551,513,595,
            544,553,708,597,752,717,918,842,74,281,
            330,1898,1616,293,1862,477,1012,461,20,17,
            21,18,511,935,44,551,513,595,544,553,
            708,597,752,717,918,842,74,281,1916,480,
            477,282,22,658,1878,1856,362,776,20,17,
            21,18,511,42,44,551,513,595,287,553,
            708,597,752,717,1765,245,179,241,76,282,
            213,188,793,1856,792,792,508,137,10,288,
            792,785,361,1977,213,31,289,135,213,317,
            318,319,705,278,1431,1679,19,137,134,136,
            160,542,339,341,347,274,1865,290,1601,1395,
            710,276,526,219,1473,221,1570,223,224,229,
            1602,686,139,166,269,722,512,272,213,31,
            143,146,149,152,325,1422,260,187,340,341,
            347,683,1585,1442,1678,1722,1727,1393,743,20,
            17,21,18,511,935,44,551,513,595,25,
            553,708,597,752,717,918,842,74,281,776,
            20,17,21,18,511,935,44,551,513,595,
            792,553,708,597,752,717,918,842,74,91,
            776,20,17,21,18,511,42,44,551,1453,
            282,23,35,24,1856,555,838,20,17,21,
            18,511,42,44,551,513,595,291,553,708,
            597,752,717,918,842,93,776,20,17,21,
            18,511,42,44,551,513,595,334,553,708,
            597,752,1766,283,255,503,869,20,17,21,
            18,511,935,44,551,513,595,1864,553,708,
            597,752,717,918,842,74,1469,427,20,17,
            21,18,511,935,44,551,513,595,53,553,
            708,597,752,717,918,842,74,1488,792,284,
            213,296,213,298,240,912,355,333,776,20,
            17,21,18,511,935,44,551,513,595,273,
            553,708,597,752,717,918,842,74,92,776,
            20,17,21,18,511,935,44,551,513,595,
            792,553,708,597,752,717,918,842,74,85,
            776,20,17,21,18,511,935,44,551,513,
            595,279,553,708,597,752,717,918,842,74,
            84,776,20,17,21,18,511,935,44,551,
            513,595,792,553,708,597,752,717,918,842,
            74,83,776,20,17,21,18,511,935,44,
            551,513,595,332,553,708,597,752,717,918,
            842,74,82,776,20,17,21,18,511,935,
            44,551,513,595,792,553,708,597,752,717,
            918,842,74,81,776,20,17,21,18,511,
            935,44,551,513,595,280,553,708,597,752,
            717,918,842,74,80,776,20,17,21,18,
            511,935,44,551,513,595,792,553,708,597,
            752,717,918,842,74,79,776,20,17,21,
            18,511,935,44,551,513,595,225,553,708,
            597,752,717,918,842,74,78,776,20,17,
            21,18,511,935,44,551,513,595,792,553,
            708,597,752,717,918,842,74,77,776,20,
            17,21,18,511,935,44,551,513,595,1987,
            553,708,597,752,717,918,842,74,76,776,
            20,17,21,18,511,935,44,551,513,595,
            693,553,708,597,752,717,918,842,74,75,
            776,20,17,21,18,511,935,44,551,513,
            595,234,553,708,597,752,717,918,842,74,
            73,776,20,17,21,18,511,935,44,551,
            513,595,792,553,708,597,752,717,918,842,
            74,1705,776,20,17,21,18,511,935,44,
            551,513,595,350,553,708,597,752,717,918,
            842,74,1706,776,20,17,21,18,511,42,
            44,551,513,595,595,553,708,597,752,717,
            918,842,93,776,20,17,21,18,511,42,
            44,551,513,595,1870,553,708,597,752,717,
            918,842,93,776,20,17,21,18,511,42,
            44,551,513,595,212,553,708,597,752,717,
            918,842,93,776,20,17,21,18,511,42,
            44,551,513,595,1933,553,708,597,752,717,
            918,842,93,776,20,17,21,18,511,42,
            44,551,513,595,1222,553,708,597,752,717,
            918,842,93,776,20,17,21,18,511,42,
            44,551,513,595,1687,553,708,597,752,717,
            918,842,93,776,20,17,21,18,511,42,
            44,551,513,595,202,553,708,597,752,717,
            918,842,93,245,179,87,610,20,17,21,
            18,511,42,36,203,626,1863,776,20,17,
            21,18,511,42,39,135,213,317,318,319,
            213,1894,34,246,274,138,134,136,160,380,
            130,847,218,1473,221,1570,223,224,229,1602,
            132,322,483,267,722,512,272,186,263,436,
            140,166,1895,472,64,156,538,264,144,147,
            150,153,277,1422,135,213,317,318,319,477,
            274,10,156,765,145,134,136,160,218,1473,
            221,1570,223,224,229,1602,68,6,477,267,
            722,512,272,210,1096,1873,243,1999,1929,261,
            599,1604,228,928,776,20,17,21,18,511,
            42,44,551,513,595,242,553,708,597,1569,
            68,509,311,218,1473,221,1570,223,224,229,
            1602,1999,807,20,17,21,18,511,41,1952,
            776,20,17,21,18,511,42,44,551,513,
            595,357,553,1522,1879,6,138,218,1473,221,
            1570,223,224,229,1602,199,1921,1707,358,623,
            619,198,200,1952,776,20,17,21,18,511,
            42,44,551,513,595,297,1556,1861,776,20,
            17,21,18,511,42,44,551,513,595,227,
            1565,566,6,6,988,199,200,135,213,317,
            318,319,1947,650,1995,1958,721,142,134,136,
            160,776,20,17,21,18,511,42,44,551,
            513,1430,776,20,17,21,18,511,42,44,
            551,1456,141,166,776,20,17,21,18,511,
            42,44,551,513,1440,776,20,17,21,18,
            511,42,44,551,513,1447,776,20,17,21,
            18,511,42,44,551,513,1449,438,512,677,
            20,17,21,18,511,42,43,792,1999,776,
            20,17,21,18,511,42,44,1405,754,632,
            135,213,317,318,319,477,477,729,348,809,
            148,134,136,160,218,1473,221,1570,223,224,
            229,1602,541,255,816,574,294,570,356,1865,
            1096,28,244,245,89,1856,219,1473,221,1570,
            223,224,229,1602,135,213,317,318,319,135,
            213,317,318,319,151,134,136,160,652,154,
            134,136,160,823,766,516,198,6,180,1846,
            610,20,17,21,18,511,42,36,1963,277,
            807,20,17,21,18,511,34,274,776,20,
            17,21,18,511,42,38,820,247,776,20,
            17,21,18,511,42,37,267,722,512,272,
            776,20,17,21,18,511,42,36,250,351,
            928,776,20,17,21,18,511,42,35,624,
            776,20,17,21,18,511,42,47,776,20,
            17,21,18,511,42,46,764,274,776,20,
            17,21,18,511,42,45,699,705,349,920,
            795,728,382,10,920,796,267,722,512,272,
            477,1486,855,255,1395,715,1862,855,787,830,
            266,254,213,317,318,319,254,213,317,318,
            319,6,6,1862,781,764,857,295,812,255,
            1916,259,809,482,858,970,705,1875,807,20,
            17,21,18,511,33,6,537,716,777,1997,
            197,672,1894,1395,1997,1862,482,87,87,62,
            255,91,597,477,195,194,1899,655,715,1818,
            705,1985,705,197,204,274,1865,920,907,716,
            259,87,859,1211,970,714,1875,197,920,1395,
            297,715,1818,184,269,722,512,272,641,254,
            213,317,318,319,705,181,1860,406,720,809,
            254,213,317,318,319,255,259,689,705,555,
            1138,197,1875,2210,209,672,1894,934,2210,10,
            2210,192,948,2210,87,1395,2210,2002,1872,1896,
            1860,2210,1723,2033,315,2210,2210,962,2017,255,
            213,317,318,319,255,213,317,318,319,1862,
            205,2210,259,123,1180,192,1054,793,1875,255,
            213,317,318,319,705,6,1930,2033,1931,793,
            2210,2210,2210,1699,2210,2210,809,2210,1932,2210,
            1455,197,2210,2210,2210,493,2210,2210,209,2210,
            355,2210,2210,2210,2210,2210,2210,2210,2210,2210,
            1860,87,1877,1896,2210,2210,2210,2210,2210,2210,
            2210,1764,2210,2210,2210,2210,2210,2210,2210,2210,
            2210,2210,2210,2210,2210,193,2210,0,2237,32,
            0,2236,32,0,1698,32,0,1891,32,0,
            602,51,0,1689,51,0,1848,48,0,1540,
            64,0,20,179,0,1848,50,0,1848,49,
            0,602,53,0,1689,53,0,602,52,0,
            1689,52,0,1540,65,0,1,1532,0,1,
            585,0,1,1407,0,1,1788,0,1,1798,
            0,1,1810,0,1,1821,0,1,1780,0,
            1,1908,0,1,2222,0,1,2221,0,1,
            2226,0,1,2225,0,1,2224,0,1,2223,
            0,1,1892,0,1,2436,0,1,2447,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,0,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,0,0,0,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,0,53,54,55,56,57,58,59,
            60,0,1,0,0,4,5,0,1,2,
            6,7,11,12,13,0,0,16,17,18,
            19,20,21,22,23,24,0,1,2,3,
            0,1,31,61,62,9,35,36,37,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,0,1,90,91,4,5,67,0,
            63,0,80,11,12,13,0,0,16,17,
            18,19,20,21,22,23,24,71,72,73,
            74,76,77,31,64,0,1,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,0,1,0,0,4,5,67,
            61,62,61,62,11,12,13,0,0,16,
            17,18,19,20,21,22,23,24,71,72,
            73,74,0,1,31,79,4,0,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,0,1,61,62,4,0,
            67,2,3,0,0,11,12,13,9,5,
            16,17,18,19,20,21,22,23,24,71,
            72,73,74,0,1,31,79,4,0,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,0,53,54,55,
            56,57,58,59,60,32,52,11,12,13,
            0,33,16,17,18,19,20,21,22,23,
            24,0,1,2,0,1,5,31,4,0,
            9,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,0,53,
            54,55,56,57,0,34,2,3,0,5,
            0,0,2,9,0,11,12,13,10,9,
            16,17,18,19,20,21,22,23,24,0,
            1,0,0,4,3,31,76,77,34,35,
            36,37,38,39,0,1,2,3,4,5,
            6,7,8,0,10,0,3,0,14,15,
            81,82,83,84,85,86,87,88,0,25,
            26,27,28,29,30,31,0,1,2,3,
            4,5,6,7,8,0,10,0,1,2,
            14,15,81,82,83,84,85,86,87,88,
            102,25,26,27,28,29,30,31,0,65,
            0,1,2,3,4,5,6,7,8,64,
            10,0,69,70,14,15,0,6,7,0,
            1,5,0,4,0,25,26,27,28,29,
            30,65,32,11,12,13,61,62,16,17,
            18,19,20,21,22,23,24,0,1,2,
            3,0,52,31,0,0,9,35,36,37,
            38,39,11,12,13,0,0,16,17,18,
            19,20,21,22,23,24,0,0,2,3,
            0,65,31,6,7,9,35,36,37,38,
            39,11,12,13,0,1,16,17,18,19,
            20,21,22,23,24,0,1,2,3,0,
            5,31,0,0,9,35,36,37,38,39,
            11,12,13,10,0,16,17,18,19,20,
            21,22,23,24,0,80,0,3,33,34,
            31,5,0,78,35,36,37,38,39,0,
            1,2,3,4,5,6,7,8,0,10,
            2,0,0,14,15,0,5,9,3,33,
            34,0,1,2,25,26,27,28,29,30,
            0,1,2,3,4,0,6,7,8,0,
            10,0,0,2,14,15,5,0,1,63,
            9,4,66,69,70,25,26,27,28,29,
            30,0,1,52,65,4,0,1,2,3,
            4,32,6,7,8,34,10,0,0,32,
            14,15,0,5,69,70,9,5,0,0,
            78,25,26,27,28,29,30,67,32,0,
            1,2,3,4,0,6,7,8,0,10,
            0,33,34,14,15,33,34,0,0,9,
            32,0,5,5,25,26,27,28,29,30,
            9,32,0,1,2,3,4,33,6,7,
            8,63,10,0,66,68,14,15,5,0,
            33,33,34,0,0,0,3,25,26,27,
            28,29,30,9,32,0,1,2,3,4,
            0,6,7,8,0,10,0,34,68,14,
            15,0,0,66,0,0,5,5,3,5,
            25,26,27,28,29,30,0,1,2,3,
            4,0,6,7,8,0,10,2,32,0,
            14,15,0,8,2,34,34,64,63,0,
            8,25,26,27,28,29,30,0,1,2,
            3,4,0,6,7,8,0,10,64,0,
            1,14,15,4,0,75,0,0,0,2,
            66,32,25,26,27,28,29,30,0,1,
            2,3,4,0,6,7,8,0,10,33,
            0,0,14,15,0,0,75,33,0,33,
            0,0,0,25,26,27,28,29,30,0,
            1,2,3,4,0,6,7,8,0,10,
            2,0,32,14,15,0,32,9,0,0,
            32,63,14,15,25,26,27,28,29,30,
            11,12,13,0,0,16,17,18,19,20,
            21,22,23,24,11,12,13,0,0,16,
            17,18,19,20,21,22,23,24,11,12,
            13,0,0,16,17,18,19,20,21,22,
            23,24,11,12,13,0,68,16,17,18,
            19,20,21,22,23,24,75,0,1,2,
            3,0,5,0,0,0,9,89,0,0,
            0,0,0,92,93,94,95,96,97,98,
            99,100,101,0,0,0,0,0,0,0,
            33,34,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            2210,2221,1892,1810,2222,1,1798,1788,2223,253,
            1821,2424,2425,2426,1908,1780,2530,2531,2532,2533,
            2534,2535,2536,846,2545,1532,2224,2225,2226,1407,
            585,2373,54,182,72,2374,2372,2427,2375,2371,
            2378,2383,2382,2380,2381,2379,2384,2385,2377,2386,
            2387,2388,70,2538,2539,2540,2541,2537,679,1429,
            774,2210,1,183,51,1,191,1,2436,1677,
            2123,2120,1,1,1,62,59,1,1,1,
            1,1,1,1,1,1,262,2436,1441,1,
            1,2207,1,830,1632,518,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,191,1,1,1,1,1,1,
            1,1,2210,1,687,2045,1,190,2406,58,
            1353,57,866,1,1,1,68,61,1,1,
            1,1,1,1,1,1,1,1666,1655,1644,
            1621,1588,1574,1,2468,2210,2569,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,190,1,1,1,1,1,
            1,1,1,2210,1,56,286,1,191,2406,
            830,1632,830,1632,1,1,1,69,60,1,
            1,1,1,1,1,1,1,1,1666,1655,
            1644,1621,2210,2221,1,1504,2222,2210,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,191,1,1,1,1,
            1,1,1,1,2210,2221,830,1632,2222,265,
            2406,1758,1,2210,2210,2424,2425,2426,518,2218,
            2530,2531,2532,2533,2534,2535,2536,846,2545,1666,
            1655,1644,1621,2210,2221,2373,1504,2222,88,2374,
            2372,2427,2375,2371,2378,2383,2382,2380,2381,2379,
            2384,2385,2377,2386,2387,2388,129,2538,2539,2540,
            2541,2537,679,1429,774,1487,2217,2424,2425,2426,
            63,938,2530,2531,2532,2533,2534,2535,2536,846,
            2545,1,2204,1441,185,3572,2216,2373,3572,2210,
            518,2374,2372,2427,2375,2371,2378,2383,2382,2380,
            2381,2379,2384,2385,2377,2386,2387,2388,2210,2538,
            2539,2540,2541,2537,20,2215,2132,2132,64,2132,
            270,338,712,2132,2210,179,179,179,2129,518,
            179,179,179,179,179,179,179,179,179,184,
            3576,2210,2210,3576,718,179,1588,1574,2132,179,
            179,179,179,179,1,2221,1892,1396,2222,2214,
            1798,1788,2223,48,1821,1,2126,2210,1908,1780,
            1763,1724,2553,2552,2554,2556,2555,1904,2210,1532,
            2224,2225,2226,1407,585,886,2210,2221,1892,1770,
            2222,2214,1798,1788,2223,55,1821,1,2436,1677,
            1908,1780,1763,1724,2553,2552,2554,2556,2555,1904,
            2107,1532,2224,2225,2226,1407,585,1232,2210,2213,
            1,2221,1892,1810,2222,29,1798,1788,2223,2468,
            1821,53,1838,1830,1908,1780,2210,2144,2141,206,
            3580,2214,130,3580,2210,1532,2224,2225,2226,1407,
            585,2213,3313,2424,2425,2426,830,1632,2530,2531,
            2532,2533,2534,2535,2536,846,2545,268,2436,1441,
            253,131,29,2373,2210,71,518,2374,2372,2427,
            2375,2371,2424,2425,2426,66,2210,2530,2531,2532,
            2533,2534,2535,2536,846,2545,268,52,1758,253,
            132,2213,2373,2150,2147,518,2374,2372,2427,2375,
            2371,2424,2425,2426,2210,2448,2530,2531,2532,2533,
            2534,2535,2536,846,2545,1,249,249,249,133,
            249,2373,2210,65,249,2374,2372,2427,2375,2371,
            2424,2425,2426,2153,2210,2530,2531,2532,2533,2534,
            2535,2536,846,2545,50,866,337,2135,249,249,
            2373,231,2210,613,2374,2372,2427,2375,2371,2210,
            2221,1892,1810,2222,2214,1798,1788,2223,222,1821,
            2037,285,67,1908,1780,49,543,518,2138,231,
            231,253,2436,1677,1532,2224,2225,2226,1407,585,
            2210,1,1,1,1,2210,1,1,1,2210,
            1,1,2210,1758,1,1,2216,2210,2221,231,
            518,2222,231,1838,1830,1,1,1,1,1,
            1,208,2221,543,2213,2222,2210,2221,1892,1810,
            2222,3313,1798,1788,2223,2215,1821,2210,336,1555,
            1908,1780,2210,230,1838,1830,1253,2216,2210,2210,
            613,1532,2224,2225,2226,1407,585,2526,3313,1,
            2221,1892,1810,2222,256,1798,1788,2223,2210,1821,
            292,230,230,1908,1780,1989,2215,2210,2210,1293,
            546,271,2220,2216,1532,2224,2225,2226,1407,585,
            518,3313,2210,2221,1892,1810,2222,721,1798,1788,
            2223,230,1821,1,230,930,1908,1780,90,2210,
            1520,1472,2215,1,220,2210,253,1532,2224,2225,
            2226,1407,585,518,3313,2210,2221,1892,1810,2222,
            211,1798,1788,2223,1,1821,2210,90,932,1908,
            1780,2210,1,2219,1,2210,2216,2216,1471,2220,
            1532,2224,2225,2226,1407,585,2210,2221,1915,1810,
            2222,2210,1798,1788,2223,353,1821,1313,1603,2210,
            1908,1780,352,2564,1333,2215,2215,2468,1190,2210,
            2564,1532,2224,2225,2226,1407,585,2210,2221,565,
            1810,2222,2210,1798,1788,2223,30,1821,2467,207,
            1420,1908,1780,1420,30,1273,207,2210,201,2049,
            2219,1767,1532,2224,2225,2226,1407,585,1,2221,
            1892,1810,2222,2210,1798,1788,2223,2210,1821,657,
            189,2210,1908,1780,189,2210,788,2239,189,3541,
            2210,2210,2210,1532,2224,2225,2226,1407,585,1,
            2186,2201,2171,2183,2210,2168,2165,2198,32,2174,
            2114,42,185,2180,2177,2210,184,2117,2210,2210,
            206,1373,2111,2108,2156,2195,2192,2189,2162,2159,
            2424,2425,2426,248,2210,2530,2531,2532,2533,2534,
            2535,2536,846,2545,2424,2425,2426,251,2210,2530,
            2531,2532,2533,2534,2535,2536,846,2545,2424,2425,
            2426,252,2210,2530,2531,2532,2533,2534,2535,2536,
            846,2545,2424,2425,2426,2210,768,2530,2531,2532,
            2533,2534,2535,2536,846,2545,1169,1,250,250,
            250,2210,250,2210,2210,2210,250,724,2210,2210,
            2210,2210,2210,1148,1127,1106,1085,1064,1022,1043,
            1001,980,959,2210,2210,2210,2210,2210,2210,2210,
            250,250
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            476,6,115,1,115,115,115,115,115,115,
            115,115,115,8,45,23,21,25,23,31,
            29,32,31,34,33,10,115,45,418,418,
            339,115,229,229,329,45,115,115,115,115,
            115,115,115,115,115,115,115,115,115,115,
            115,115,115,115,115,115,115,115,115,115,
            115,115,115,115,115,115,229,229,171,136,
            462,100,374,227,226,290,115,307,150,307,
            150,150,307,150,307,59,174,21,21,23,
            23,23,23,23,23,29,25,25,31,31,
            469,33,32,152,273,152,329,462,103,171,
            87,155,229,421,377,45,150,418,418,150,
            418,115,273,134,462,315,87,171,154,100,
            229,327,59,228,379,229,152,232,152,276,
            134,315,315,115,115,171,155,365,374,283,
            282,462,379,229,152,232,276,276,278,336,
            315,87,171,171,365,229,421,377,327,232,
            273,464,232,276,278,471,278,273,132,474,
            418,115,335,87,315,360,358,358,333,360,
            379,232,466,278,273,115,418,8,136,171,
            418,115,315,115,115,354,229,228,273,286,
            115,285,128,462,273,171,229,229,419,360,
            419,466,115,128,228,419
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            5,63,65,34,33,102,0,68,89,75,
            92,93,94,95,96,98,97,99,100,101,
            69,70,61,62,71,72,73,74,76,77,
            78,79,80,5,9,63,33,65,34,52,
            66,102,90,91,25,8,26,27,28,2,
            14,15,10,3,6,7,29,30,1,4,
            58,59,60,48,40,45,43,44,42,41,
            46,47,49,50,51,57,53,54,55,56,
            39,36,31,35,38,37,11,12,13,16,
            17,18,19,20,21,22,23,24,0,65,
            5,31,11,12,13,16,17,18,19,20,
            21,22,23,24,8,26,27,28,4,14,
            15,10,6,7,29,30,25,3,2,1,
            0,5,52,9,68,14,15,10,3,6,
            7,29,30,25,2,8,26,27,28,1,
            4,32,0,31,14,15,10,3,6,7,
            29,30,25,2,1,4,8,26,27,28,
            65,5,0,12,31,39,13,38,37,36,
            11,35,16,17,18,19,20,21,22,23,
            24,68,89,14,15,10,6,7,69,70,
            61,62,71,72,73,74,76,77,78,79,
            80,90,91,75,92,93,94,95,96,97,
            98,99,100,101,3,2,9,33,34,5,
            0,35,40,11,41,58,36,42,37,43,
            44,38,12,45,46,31,59,39,60,47,
            48,13,49,50,51,1,4,16,17,18,
            19,20,21,22,53,54,55,56,57,23,
            24,67,5,52,0,1,4,5,52,33,
            0,2,34,9,63,66,5,33,0,48,
            40,45,43,44,42,41,46,47,49,50,
            51,57,53,54,55,56,63,66,39,36,
            31,35,38,37,11,12,13,16,17,18,
            19,20,21,22,23,24,33,1,5,34,
            3,9,2,0,75,9,68,0,25,8,
            26,27,28,4,2,14,15,10,3,6,
            7,29,30,1,34,5,0,8,2,5,
            63,33,34,66,81,82,83,84,85,86,
            87,88,0,3,2,9,34,5,35,40,
            11,41,58,36,42,37,43,44,38,12,
            45,46,31,59,39,60,47,48,13,49,
            50,51,16,17,18,19,20,21,22,53,
            54,55,56,57,23,24,64,4,1,0,
            35,40,11,41,58,36,42,37,43,44,
            38,12,45,46,31,59,39,60,47,48,
            13,49,50,51,1,4,16,17,18,19,
            20,21,22,53,54,55,56,57,23,24,
            64,3,0,66,5,3,1,2,63,0,
            5,33,52,75,0,25,8,26,27,28,
            1,4,2,14,15,10,3,6,7,29,
            30,67,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static char nasb[] = {0,
            128,83,30,83,30,30,30,30,30,30,
            30,30,30,83,18,83,83,83,83,83,
            83,83,83,83,83,83,30,18,55,55,
            96,19,46,46,102,1,30,30,30,30,
            30,30,30,30,30,30,30,30,30,30,
            30,30,19,30,30,30,30,30,30,30,
            30,30,30,30,30,30,46,46,13,92,
            22,11,101,9,9,69,30,70,72,70,
            33,33,70,32,70,64,83,83,83,83,
            83,83,83,83,83,83,83,83,83,83,
            83,83,83,93,82,83,116,83,61,13,
            111,12,46,106,45,17,7,7,7,7,
            7,30,59,82,83,53,111,13,12,131,
            46,77,37,83,108,46,84,82,83,82,
            28,53,82,30,30,13,12,82,76,9,
            9,22,108,46,83,120,82,7,74,15,
            82,111,13,13,25,46,106,45,48,82,
            59,113,133,7,74,83,83,59,27,83,
            7,30,90,111,131,35,99,99,83,83,
            124,120,79,74,59,30,7,57,29,13,
            7,30,131,30,30,45,46,46,59,114,
            30,83,79,22,59,13,46,46,86,83,
            83,79,30,50,46,88
        };
    };
    public final static char nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            82,80,79,70,78,77,1,0,29,0,
            11,5,27,0,108,0,5,47,11,46,
            0,30,54,0,111,0,90,11,56,5,
            0,102,71,0,92,0,82,81,80,79,
            70,78,77,0,11,21,0,50,49,40,
            38,44,30,0,75,0,106,0,45,0,
            5,11,0,70,65,66,67,68,57,32,
            0,99,0,64,0,21,50,49,40,38,
            44,11,0,100,0,112,0,96,0,110,
            0,5,56,52,0,11,98,0,95,0,
            21,49,50,11,0,30,54,11,28,0,
            60,0,11,74,0,50,49,30,0,84,
            11,47,0,103,11,28,0,11,97,0,
            22,0,11,47,72,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,9,86,87,10,11,81,1,8,
            48,64,76,6,7,93,94,95,96,97,
            98,99,105,106,68,82,83,84,12,13,
            69,3,42,90,44,55,60,63,72,47,
            52,56,61,62,66,67,74,75,78,79,
            80,91,100,101,102,103,104,54,70,73,
            16,17,29,30,89,92,117,4,14,15,
            18,19,20,21,31,22,23,24,25,26,
            107,108,109,110,111,112,113,114,5,27,
            28,32,33,34,35,36,37,38,39,40,
            41,118,45,46,49,50,51,53,57,58,
            59,65,71,77,88,115,116
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            124,0,0,0,126,130,131,132,133,134,
            0,135,136,137,138,139,140,141,0,142,
            121,152,0,0,0,0,120,145,173,0,
            144,151,0,0,0,0,169,171,0,172,
            0,0,0,191,122,125,164,182,183,184,
            0,129,160,170,179,0,154,0,174,177,
            178,181,128,0,155,156,157,158,159,161,
            0,163,168,123,127,143,146,147,148,149,
            150,153,0,162,166,0,0,167,176,186,
            190,193,0,0,194,196,119,0,0,0,
            165,0,175,180,185,0,187,188,0,189,
            192,195,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            125,156,135,79,89,164,46,191,21,55,
            107,21,95,1,7,31,60,103,72,146,
            216,220,72,72,200,72,11,35,35,64,
            67,112,120,67,224,40,150,207,207,182,
            142,170,170,170,170,170,16,16,16,16,
            16
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            133,133,133,38,38,133,52,197,5,5,
            38,5,100,5,5,5,5,38,38,144,
            5,38,76,100,204,85,14,38,38,5,
            70,38,5,123,5,43,153,210,213,185,
            144,172,174,176,178,180,18,18,26,115,
            26
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            67,65,67,29,29,65,52,120,44,51,
            29,43,29,93,93,25,51,29,29,72,
            5,5,29,29,19,29,43,110,109,49,
            62,29,40,53,3,90,72,7,5,121,
            72,81,80,79,78,77,44,43,44,41,
            43
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            52,52,52,65,65,52,52,108,34,34,
            65,34,8,34,34,34,34,65,65,66,
            34,65,3,8,63,31,81,65,65,34,
            2,65,34,1,34,75,1,34,34,114,
            66,1,58,59,59,48,2,2,2,2,
            2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            38,38,38,42,42,38,20,0,12,46,
            42,12,42,3,3,26,46,42,42,8,
            53,53,42,42,83,42,12,1,6,46,
            48,42,12,14,53,113,8,56,53,0,
            8,39,39,39,39,39,12,12,12,12,
            12
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            148,2,82,0,138,0,148,2,81,0,
            128,161,0,228,0,157,0,2,138,0,
            176,128,2,157,0,2,128,176,138,0,
            208,2,23,0,148,9,0,144,0,224,
            128,0,75,186,0,181,222,128,32,173,
            0,162,223,0,176,128,2,166,0,176,
            128,2,0,179,2,0,171,128,0,165,
            0,206,128,9,0,3,144,0,137,31,
            206,128,9,0,31,137,144,0,137,206,
            128,31,9,0,206,128,31,9,0,137,
            144,0,137,31,9,0,137,206,128,9,
            0,137,9,0,2,128,220,138,0,170,
            2,0,154,0,181,204,128,32,118,219,
            58,0,162,0,181,204,128,32,219,58,
            0,164,0,191,0,218,128,164,0,128,
            164,0,218,191,0,200,128,32,217,118,
            216,187,0,200,128,32,216,187,0,199,
            0,185,0,184,0,183,0,182,0,174,
            0,233,107,0,114,2,163,138,191,0,
            233,138,163,2,111,0,108,233,0,163,
            91,135,0,63,137,0,180,2,0,138,
            124,0,138,169,0,215,2,122,0,163,
            9,122,0,163,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1616,0,686,650,0,544,0,1963,2033,1929,
            0,1699,716,1520,1677,1486,1441,1395,0,788,
            657,629,542,1679,0,2017,2002,1958,1947,1997,
            1864,1859,1727,1722,1678,1442,1585,1393,705,482,
            0,1570,1473,722,512,716,1916,1441,1395,1758,
            1818,0,1908,1780,1532,1770,1396,1679,866,687,
            613,1504,1588,1574,1540,1632,830,1666,1655,1644,
            1621,1848,1838,1830,1689,602,1821,1810,1798,1788,
            1407,585,1373,1353,1333,1313,1293,788,1273,1253,
            1232,1211,907,1190,565,886,846,518,1169,1148,
            1127,1106,1085,1064,1043,1022,1001,980,959,482,
            938,809,657,629,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,214,128,193,25,30,29,7,6,3,
            10,15,14,122,2,126,125,129,127,131,
            130,133,132,135,134,123,33,2,89,68,
            2,9,180,163,164,128,7,6,70,69,
            3,74,73,72,71,61,62,10,77,76,
            79,78,91,90,80,101,100,99,97,98,
            96,95,94,93,92,75,180,215,163,138,
            128,9,2,167,166,194,23,195,187,196,
            60,59,197,58,198,199,118,125,125,127,
            127,127,127,126,126,130,129,129,132,131,
            163,134,133,138,32,173,171,147,31,137,
            128,3,179,128,2,2,216,188,188,219,
            188,63,128,32,147,3,128,137,206,177,
            176,145,128,178,128,208,118,32,118,32,
            128,3,147,206,31,137,3,161,2,155,
            157,128,33,176,217,128,32,128,222,128,
            147,128,137,137,128,170,128,2,171,32,
            200,164,201,128,204,118,205,181,33,224,
            68,9,225,128,177,228,82,81,88,138,
            128,128,128,204,181,75,33,162,75,148,
            68,9,177,2,2,2,176,220,200,218,
            63,170,2,128,181,148,148,148,128,138,
            33,33,63,171,229,33
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "__data",
            "__near",
            "__xdata",
            "__far",
            "__idata",
            "__pdata",
            "__code",
            "__bit",
            "__sfr",
            "__sfr16",
            "__sfr32",
            "__sbit",
            "__at",
            "__banked",
            "__interrupt",
            "__using",
            "__reentrant",
            "__critical",
            "__naked",
            "__wparam",
            "__shadowregs",
            "__preserves__regs",
            "__asm",
            "__endasm",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_sizeof_type_id_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "and_expression",
            "exclusive_or_expression",
            "inclusive_or_expression",
            "logical_and_expression",
            "logical_or_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "initializer_seq",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "absolute_address",
            "original_function_direct_decla" +
            "rator",
            "sdcc_function_attributes",
            "sdcc_function_attribute",
            "integer_token",
            "preserves_regs_args",
            "preserves_regs_arg"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
