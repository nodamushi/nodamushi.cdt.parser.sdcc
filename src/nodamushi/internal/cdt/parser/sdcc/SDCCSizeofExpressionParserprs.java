/*******************************************************************************
* Copyright (c) 2006, 2010 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package nodamushi.internal.cdt.parser.sdcc;

public class SDCCSizeofExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, SDCCSizeofExpressionParsersym {
    public final static int ERROR_SYMBOL = 67;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 35;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 36;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 38;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 226;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 117;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 2524;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 2;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 480;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 142;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 259;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 1934;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 102;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 102;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 2034;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 2044;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = true;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return SDCCSizeofExpressionParsersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,1,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,1,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,1,0,0,0,0,0,0,
            1,0,0,0,0,0,0,1,0,0,
            0,0,0,0,0,0,0,0,0,0,
            1,0,0,0,1,0,0,0,0,0,
            0,0,0,1,1,1,0,1,0,0,
            0,1,0,0,0,0,0,0,0,1,
            0,0,0,0,0,0,0,0,0,0,
            0,1,0,0,0,0,0,1,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static char prosthesesIndex[] = {0,
            9,10,11,12,14,20,21,22,23,24,
            3,25,26,27,28,29,30,31,32,33,
            6,58,87,127,128,129,5,49,95,103,
            56,57,59,70,88,90,91,92,93,94,
            96,131,7,35,108,109,110,111,130,13,
            18,37,69,79,89,105,112,61,71,97,
            102,104,107,19,62,63,64,65,68,72,
            76,78,86,8,16,17,36,51,52,53,
            54,55,60,74,77,81,82,84,85,101,
            115,133,134,135,137,2,15,73,75,80,
            83,99,106,113,114,116,117,118,119,132,
            136,1,4,34,38,39,40,41,42,43,
            44,45,46,47,48,50,66,67,98,100,
            120,121,122,123,124,125,126,138,139,140,
            141,142
        };
    };
    public final static char prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,3,1,
            1,4,4,3,3,2,2,4,1,0,
            1,1,2,2,2,2,2,2,2,2,
            2,1,4,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,4,3,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,2,5,9,
            8,3,2,2,2,3,2,4,2,2,
            2,2,2,1,1,1,1,2,1,2,
            2,2,1,2,2,1,2,2,1,2,
            2,1,2,2,1,3,1,3,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,6,
            8,0,0,1,1,3,3,3,0,1,
            0,1,2,4,2,1,1,1,3,1,
            1,2,3,7,8,0,1,0,1,3,
            1,3,1,1,1,1,1,1,3,1,
            1,1,1,1,3,1,2,2,1,5,
            3,1,3,5,1,3,1,3,2,4,
            3,5,4,6,6,3,5,1,3,4,
            5,6,0,1,2,1,3,1,1,3,
            2,1,1,1,1,2,1,2,3,1,
            1,1,3,1,2,2,2,3,4,5,
            1,1,7,3,0,0,1,1,3,3,
            4,1,1,2,3,2,3,2,1,0,
            1,2,1,1,1,1,1,2,1,3,
            6,4,2,4,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,4,2,1,1,5,3,3,1,2,
            1,1,1,1,1,1,1,4,2,4,
            2,1,1,3,5,1,3,1,1,1,
            2,5,3,1,2,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            -36,0,0,0,0,0,0,0,0,0,
            0,-2,0,0,0,0,0,0,0,0,
            0,-123,0,0,0,0,0,-107,-117,0,
            -71,0,0,0,0,-141,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-69,-74,-33,0,0,0,0,0,-34,
            0,-4,0,0,0,0,-105,0,0,0,
            0,0,0,0,0,0,0,0,0,-14,
            0,0,0,-42,0,0,0,0,0,0,
            0,0,0,0,0,-179,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-133,0,-46,
            0,0,0,0,0,0,0,0,0,0,
            -37,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-16,-75,0,-152,0,0,
            0,0,0,-199,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-81,-126,
            -67,-17,0,0,0,0,0,0,-5,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-18,0,-19,-79,-20,-160,0,
            0,-43,0,0,0,0,0,0,0,0,
            0,0,0,-72,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-29,0,-82,-118,0,0,
            0,-3,0,0,0,0,0,0,0,0,
            0,0,-21,0,0,0,0,0,0,0,
            0,0,-109,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-129,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-22,0,
            0,-12,0,0,0,0,0,0,0,-27,
            0,0,0,0,0,0,0,0,0,0,
            -68,0,0,0,0,0,0,0,0,0,
            -56,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-57,0,0,0,0,0,0,0,0,
            0,0,-113,0,0,0,0,0,0,0,
            0,0,-58,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-59,0,0,0,0,0,0,
            0,0,0,0,-131,0,0,0,0,0,
            0,0,0,0,-60,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-61,0,0,0,0,
            0,0,0,0,0,0,-136,0,0,0,
            0,0,0,0,0,0,-62,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-63,0,0,
            0,0,0,0,0,0,0,0,-154,0,
            0,0,0,0,0,0,0,0,-64,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-65,
            0,0,0,0,0,0,0,0,0,0,
            -166,0,0,0,0,0,0,0,0,0,
            -66,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-122,0,0,0,0,0,0,0,0,
            0,0,-207,0,0,0,0,0,0,0,
            0,0,-144,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-145,0,0,0,0,0,0,
            0,0,0,0,-23,0,0,0,0,0,
            0,0,0,0,-182,0,0,0,0,0,
            0,0,0,0,0,-150,0,0,0,0,
            0,0,0,0,-196,0,0,0,0,0,
            0,0,0,0,0,-84,0,0,0,0,
            0,0,0,0,0,-202,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-211,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-110,-223,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-171,-86,0,
            -119,0,0,-214,-30,0,-132,0,-38,0,
            0,0,0,0,0,0,0,0,-120,0,
            0,0,0,0,0,-172,0,-153,0,0,
            0,0,0,0,-159,0,0,-178,0,-173,
            0,0,0,0,0,0,0,0,0,-149,
            0,0,0,0,0,0,0,0,0,0,
            0,-77,-142,0,0,0,0,0,0,0,
            0,-13,0,0,0,0,0,0,0,0,
            0,-130,-24,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -197,0,0,0,0,0,0,0,-104,0,
            0,0,0,-54,0,0,0,0,0,0,
            0,0,0,0,-25,0,0,0,0,0,
            0,-55,0,0,0,0,0,0,0,0,
            0,0,-169,0,0,0,0,0,-51,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-186,0,-158,0,-121,0,
            -26,0,0,0,-193,-124,-183,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-52,0,0,0,0,0,0,0,0,
            0,0,-116,0,0,0,-181,0,-87,0,
            0,0,0,0,0,0,0,-47,0,0,
            0,0,0,0,0,0,0,0,-48,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-222,-6,0,0,0,0,0,0,
            0,0,-88,0,0,0,0,0,0,-128,
            0,0,-146,-49,0,0,0,0,0,0,
            0,0,0,0,0,0,-89,0,0,0,
            0,0,0,0,0,0,0,-76,-151,0,
            -90,-137,-187,-188,-91,0,-50,0,0,0,
            0,0,0,0,0,0,0,-219,0,0,
            0,0,0,0,-138,-140,-163,0,0,0,
            0,0,-201,0,-92,0,0,-165,0,0,
            -44,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-175,0,0,-45,0,0,
            0,0,0,0,0,0,0,0,-213,-70,
            0,0,0,0,0,0,0,-143,-148,0,
            -7,0,0,0,0,0,0,0,0,0,
            -157,-78,-112,0,0,0,0,0,0,0,
            0,0,-93,0,0,0,0,0,0,0,
            0,-80,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-83,0,0,
            0,0,-94,0,0,0,0,0,-174,0,
            -85,-204,0,0,0,0,-224,0,-164,0,
            0,0,0,0,-95,-210,-115,-205,0,0,
            0,0,0,0,0,0,0,0,-73,-162,
            -96,0,0,0,0,0,0,0,-97,0,
            -98,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-161,0,-147,0,
            0,0,0,0,0,0,0,0,-198,-99,
            -100,0,-101,0,0,0,0,-8,0,0,
            0,0,0,0,0,0,0,0,-194,0,
            0,0,-9,0,0,0,0,0,0,0,
            -10,0,0,0,0,0,0,0,-11,0,
            0,0,0,0,0,0,-35,-39,0,0,
            0,0,0,0,0,-111,-195,0,-40,0,
            0,0,0,0,0,0,-41,0,0,0,
            0,0,0,0,-114,0,-209,0,0,0,
            0,0,0,-215,-208,0,-170,-15,-127,-28,
            -156,0,0,0,0,-167,-191,0,0,0,
            0,0,0,0,0,0,0,0,-200,0,
            0,0,0,0,0,0,0,0,0,0,
            -216,-168,-102,0,0,0,0,-226,-103,0,
            0,0,0,0,0,0,0,0,-106,0,
            -217,0,0,0,0,0,-184,0,-192,0,
            0,0,0,-135,-108,0,0,0,0,0,
            -185,0,0,0,0,0,-203,-125,0,0,
            0,0,0,-134,0,0,0,-139,0,-155,
            -218,0,0,0,0,0,0,-176,0,0,
            0,0,0,-1,-31,-32,-225,-53,0,-177,
            -206,0,0,-180,0,0,0,0,0,0,
            -189,0,-190,0,-212,0,-220,0,-221,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            96,11,113,27,27,21,21,43,43,74,
            74,1,1,2,2,2,2,3,3,3,
            4,5,5,5,5,5,5,5,5,64,
            64,75,6,6,6,6,6,6,6,6,
            6,6,7,7,8,8,8,8,9,9,
            9,10,10,10,12,12,12,12,12,13,
            13,13,14,14,15,15,16,16,17,17,
            18,18,19,19,20,20,20,20,20,20,
            20,20,20,20,20,20,114,50,44,97,
            97,77,77,52,115,115,115,115,115,115,
            115,116,116,116,117,117,122,122,123,123,
            118,118,119,119,119,125,125,120,120,120,
            120,120,121,121,121,121,121,124,124,28,
            28,28,28,28,31,31,31,83,83,78,
            78,78,78,79,79,79,80,80,80,81,
            81,81,82,82,82,126,126,127,127,128,
            32,34,34,34,34,34,58,59,59,59,
            59,59,59,59,59,59,59,59,59,68,
            65,65,98,99,70,70,66,66,66,71,
            84,84,85,85,72,72,72,54,100,100,
            86,87,87,87,67,67,101,88,88,89,
            89,73,73,22,23,23,23,33,53,53,
            35,35,35,35,38,38,40,36,36,37,
            41,41,129,129,39,130,130,102,102,29,
            29,29,29,29,29,29,29,29,90,55,
            55,55,55,30,61,61,60,60,60,62,
            62,56,56,103,103,76,76,63,63,63,
            45,45,45,46,47,47,47,48,48,48,
            48,69,69,51,51,57,105,104,104,104,
            104,91,106,107,107,108,108,109,109,131,
            131,132,132,133,133,133,133,135,135,134,
            134,134,136,137,137,96,96,22,22,22,
            24,24,24,24,24,24,24,24,24,24,
            59,59,25,25,49,26,42,42,41,110,
            110,92,92,92,92,92,92,92,93,93,
            93,93,93,93,94,94,111,111,95,115,
            115,138,139,139,140,140,141,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,1,1449,17,21,18,570,1411,44,672,
            635,696,28,694,753,698,1125,809,1365,1323,
            74,91,810,135,213,317,318,319,631,550,
            1532,56,137,134,136,160,769,20,17,21,
            18,570,1411,44,672,635,696,699,694,753,
            698,1125,809,1365,1323,74,281,274,1908,139,
            166,1895,675,383,528,284,143,146,149,152,
            528,697,37,269,636,543,272,6,552,1528,
            1622,1642,1658,1671,1239,1600,508,282,502,22,
            527,19,275,1879,841,20,17,21,18,570,
            42,44,672,635,1531,287,618,20,17,21,
            18,570,1411,44,672,635,696,699,694,753,
            698,1125,809,1365,1323,74,281,288,245,179,
            841,20,17,21,18,570,42,44,672,1663,
            1275,841,20,17,21,18,570,42,44,1493,
            135,213,317,318,319,209,250,282,56,137,
            134,136,160,1879,805,20,17,21,18,570,
            1411,44,672,635,696,289,694,753,698,1125,
            809,1365,1323,74,281,276,139,166,1895,670,
            56,528,65,143,146,149,152,290,697,856,
            20,17,21,18,570,41,1528,1622,1642,1658,
            1671,1239,1349,1383,385,282,64,87,256,848,
            1608,1879,841,20,17,21,18,570,42,44,
            672,635,1535,291,541,20,17,21,18,570,
            1411,44,672,635,696,1796,694,753,698,1125,
            809,1365,1323,74,1216,663,31,677,663,187,
            738,239,841,20,17,21,18,570,1411,44,
            672,635,696,196,694,753,698,1125,809,1365,
            1323,74,91,892,20,17,21,18,570,1411,
            44,672,635,696,1829,694,753,698,1125,809,
            1365,1323,74,1500,579,20,17,21,18,570,
            1411,44,672,635,696,509,694,753,698,1125,
            809,1365,1323,74,1503,1944,1417,293,1241,191,
            25,240,856,20,17,21,18,570,34,552,
            841,20,17,21,18,570,1411,44,672,635,
            696,528,694,753,698,1125,809,1365,1323,74,
            92,841,20,17,21,18,570,1411,44,672,
            635,696,23,694,753,698,1125,809,1365,1323,
            74,85,841,20,17,21,18,570,1411,44,
            672,635,696,528,694,753,698,1125,809,1365,
            1323,74,84,841,20,17,21,18,570,1411,
            44,672,635,696,273,694,753,698,1125,809,
            1365,1323,74,83,841,20,17,21,18,570,
            1411,44,672,635,696,528,694,753,698,1125,
            809,1365,1323,74,82,841,20,17,21,18,
            570,1411,44,672,635,696,279,694,753,698,
            1125,809,1365,1323,74,81,841,20,17,21,
            18,570,1411,44,672,635,696,528,694,753,
            698,1125,809,1365,1323,74,80,841,20,17,
            21,18,570,1411,44,672,635,696,332,694,
            753,698,1125,809,1365,1323,74,79,841,20,
            17,21,18,570,1411,44,672,635,696,528,
            694,753,698,1125,809,1365,1323,74,78,841,
            20,17,21,18,570,1411,44,672,635,696,
            280,694,753,698,1125,809,1365,1323,74,77,
            841,20,17,21,18,570,1411,44,672,635,
            696,528,694,753,698,1125,809,1365,1323,74,
            76,841,20,17,21,18,570,1411,44,672,
            635,696,225,694,753,698,1125,809,1365,1323,
            74,75,841,20,17,21,18,570,1411,44,
            672,635,696,528,694,753,698,1125,809,1365,
            1323,74,73,841,20,17,21,18,570,1411,
            44,672,635,696,1957,694,753,698,1125,809,
            1365,1323,74,1557,841,20,17,21,18,570,
            1411,44,672,635,696,386,694,753,698,1125,
            809,1365,1323,74,1679,841,20,17,21,18,
            570,42,44,672,635,696,741,694,753,698,
            1125,809,1365,1323,93,841,20,17,21,18,
            570,42,44,672,635,696,701,694,753,698,
            1125,809,1365,1323,93,228,841,20,17,21,
            18,570,42,44,672,635,696,1849,694,753,
            698,1125,809,1365,1323,93,841,20,17,21,
            18,570,42,44,672,635,696,212,694,753,
            698,1125,809,1365,1323,93,675,841,20,17,
            21,18,570,42,44,672,635,696,1861,694,
            753,698,1125,809,1365,1323,93,1409,810,245,
            179,663,186,241,56,663,31,586,202,841,
            20,17,21,18,570,42,44,1517,638,635,
            1918,135,213,317,318,319,813,1259,814,203,
            138,134,136,160,1895,474,274,1415,810,608,
            123,180,218,1146,221,1529,223,224,229,1609,
            327,608,267,636,543,272,1247,140,166,1677,
            263,1836,331,56,144,147,150,153,197,697,
            264,277,856,20,17,21,18,570,33,274,
            24,1739,953,279,260,218,1146,221,1529,223,
            224,229,1609,1727,1266,267,636,543,272,1278,
            195,663,1928,1041,255,213,317,318,319,159,
            261,333,193,873,841,20,17,21,18,570,
            42,44,672,635,696,359,694,753,698,1125,
            809,1863,841,20,17,21,18,570,42,44,
            672,635,696,596,694,753,698,1125,1869,841,
            20,17,21,18,570,42,44,672,635,696,
            28,694,753,698,1740,69,1879,823,1928,663,
            188,615,274,1908,210,97,6,911,219,1146,
            221,1529,223,224,229,1609,1244,516,269,636,
            543,272,841,20,17,21,18,570,42,44,
            672,635,696,825,694,753,1741,663,296,358,
            218,1146,221,1529,223,224,229,1609,841,20,
            17,21,18,570,42,44,672,1685,1955,841,
            20,17,21,18,570,42,44,672,635,696,
            209,694,1701,97,841,20,17,21,18,570,
            42,40,957,532,1244,1585,1940,340,341,347,
            675,198,200,675,841,20,17,21,18,570,
            42,44,672,635,696,1686,1709,557,218,1146,
            221,1529,223,224,229,1609,294,243,300,819,
            242,274,148,899,900,691,1955,841,20,17,
            21,18,570,42,44,672,635,696,306,1711,
            135,213,317,318,319,6,6,675,227,142,
            134,136,160,663,298,728,1831,1407,8,199,
            200,841,20,17,21,18,570,42,44,672,
            635,1565,351,349,244,625,141,166,841,20,
            17,21,18,570,42,44,672,635,1633,640,
            733,20,17,21,18,570,42,43,211,6,
            1244,841,20,17,21,18,570,42,39,1700,
            1568,6,393,654,20,17,21,18,570,42,
            36,1920,1669,730,218,1146,221,1529,223,224,
            229,1609,428,356,135,213,317,318,319,1797,
            246,28,1041,145,134,136,160,1879,463,1937,
            339,341,347,738,135,213,317,318,319,823,
            1928,498,825,148,134,136,160,784,1405,675,
            135,213,317,318,319,743,746,783,825,151,
            134,136,160,135,213,317,318,319,1894,387,
            928,700,154,134,136,160,245,1908,278,421,
            1815,490,219,1146,221,1529,223,224,229,1609,
            277,1881,254,213,317,318,319,275,274,654,
            20,17,21,18,570,42,36,1921,1887,158,
            500,404,209,355,267,636,543,272,841,20,
            17,21,18,570,42,38,247,1759,1940,625,
            194,1901,873,841,20,17,21,18,570,42,
            37,841,20,17,21,18,570,42,36,841,
            20,17,21,18,570,42,35,420,841,20,
            17,21,18,570,42,47,928,810,511,841,
            20,17,21,18,570,42,46,841,20,17,
            21,18,570,42,45,729,274,810,254,213,
            317,318,319,1824,810,632,608,6,6,928,
            6,62,267,636,543,272,729,530,1889,481,
            204,481,608,1247,283,1895,234,608,608,675,
            266,254,213,317,318,319,197,1322,197,197,
            181,675,783,548,1247,1247,1895,205,306,828,
            508,259,87,1837,87,915,295,1914,550,426,
            550,528,1787,1953,1787,1266,784,928,297,184,
            1322,1383,259,259,731,388,915,1083,1914,1914,
            608,978,350,192,544,608,671,1003,846,254,
            213,317,318,319,38,1238,1280,197,672,1093,
            883,528,1247,255,213,317,318,319,525,255,
            213,317,318,319,692,325,6,742,6,1825,
            861,783,348,1266,864,742,742,742,1907,742,
            259,215,1548,425,999,919,1914,460,355,558,
            2044,192,354,357,2044,2044,2044,2044,2044,2044,
            2044,2044,2044,1817,1280,2044,2044,2044,87,89,
            87,2044,87,2044,315,2044,542,2044,1743,2044,
            2044,2044,2044,2044,2044,2044,2044,2044,2044,2044,
            2044,2044,2044,2044,2044,2044,2044,2044,2044,2044,
            2044,2044,2044,2044,2044,2044,2044,2044,2044,2044,
            2044,2044,2044,2044,2044,2044,2044,2044,2044,2044,
            492,2044,831,2044,0,20,179,0,1,2270,
            0,1,2281,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,0,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,0,28,29,
            30,31,32,33,34,35,0,0,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,0,56,57,58,59,
            60,0,1,0,0,4,5,3,0,8,
            9,10,36,36,13,14,15,16,17,18,
            19,20,21,22,23,24,0,26,81,82,
            83,84,85,86,87,88,0,1,2,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,0,1,61,62,4,5,67,102,
            8,9,10,69,70,13,14,15,16,17,
            18,19,20,21,22,23,24,0,26,81,
            82,83,84,85,86,87,88,0,0,63,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,0,1,27,0,4,5,67,
            0,8,9,10,0,0,13,14,15,16,
            17,18,19,20,21,22,23,24,0,26,
            0,1,2,3,0,5,2,7,0,11,
            12,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,0,1,36,37,4,0,
            67,2,8,9,10,0,7,13,14,15,
            16,17,18,19,20,21,22,23,24,79,
            26,76,77,0,0,1,2,3,0,5,
            25,7,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,0,
            56,57,58,59,60,0,1,8,9,10,
            36,37,13,14,15,16,17,18,19,20,
            21,22,23,24,0,26,0,1,2,5,
            0,5,2,7,61,62,6,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,0,56,57,0,0,2,
            3,37,5,37,7,8,9,10,90,91,
            13,14,15,16,17,18,19,20,21,22,
            23,24,0,26,0,0,0,0,2,7,
            3,5,0,7,37,38,39,40,41,42,
            8,9,10,0,0,13,14,15,16,17,
            18,19,20,21,22,23,24,63,26,0,
            0,2,3,37,0,0,7,0,25,5,
            38,39,40,41,42,8,9,10,80,0,
            13,14,15,16,17,18,19,20,21,22,
            23,24,27,26,0,71,72,73,74,0,
            36,37,0,78,5,38,39,40,41,42,
            8,9,10,0,0,13,14,15,16,17,
            18,19,20,21,22,23,24,63,26,0,
            66,71,72,73,74,36,37,0,0,0,
            38,39,40,41,42,8,9,10,0,36,
            13,14,15,16,17,18,19,20,21,22,
            23,24,63,26,0,66,0,0,2,0,
            1,0,5,7,3,38,39,40,41,42,
            0,1,2,3,4,5,6,0,0,0,
            1,11,12,4,28,29,0,0,1,3,
            71,72,73,74,37,25,26,0,28,29,
            30,31,32,33,34,35,27,78,0,1,
            2,3,4,5,6,0,1,2,3,11,
            12,0,7,64,68,0,1,2,3,75,
            69,70,7,25,26,65,28,29,30,31,
            32,33,34,35,0,89,0,0,1,2,
            3,4,5,6,0,69,70,80,11,12,
            0,0,2,3,0,1,5,7,4,0,
            1,2,25,65,27,28,29,30,31,32,
            33,34,35,0,1,2,3,4,5,6,
            36,27,0,1,11,12,4,36,37,0,
            1,0,55,4,0,0,0,1,25,5,
            4,28,29,30,31,32,33,34,35,75,
            0,0,1,2,3,4,0,6,27,0,
            0,1,11,12,4,0,92,93,94,95,
            96,97,98,99,100,101,25,0,65,28,
            29,30,31,32,33,34,35,0,0,0,
            0,3,0,1,2,3,4,0,6,65,
            0,0,0,11,12,0,5,7,11,12,
            5,61,62,11,12,0,0,25,67,27,
            28,29,30,31,32,33,34,35,0,1,
            2,3,4,0,6,76,77,36,37,11,
            12,36,0,0,1,2,0,5,61,62,
            61,62,64,25,64,27,28,29,30,31,
            32,33,34,35,0,1,2,3,4,0,
            6,66,0,0,5,11,12,5,0,37,
            2,0,0,1,0,7,4,0,0,25,
            6,27,28,29,30,31,32,33,34,35,
            0,1,2,3,4,0,6,0,3,0,
            1,11,12,4,7,0,1,2,3,4,
            0,6,0,0,55,25,11,12,28,29,
            30,31,32,33,34,35,0,64,66,0,
            25,5,0,28,29,30,31,32,33,34,
            35,0,1,2,3,4,36,6,0,0,
            2,2,11,12,6,6,79,0,0,27,
            0,0,0,0,0,68,25,7,0,28,
            29,30,31,32,33,34,35,0,0,0,
            0,55,0,0,27,8,9,10,75,27,
            13,14,15,16,17,18,19,20,21,22,
            23,24,0,0,0,27,0,0,0,0,
            8,9,10,0,0,13,14,15,16,17,
            18,19,20,21,22,23,24,0,68,0,
            0,63,0,0,0,8,9,10,0,0,
            13,14,15,16,17,18,19,20,21,22,
            23,24,0,0,0,0,0,0,0,0,
            8,9,10,0,0,13,14,15,16,17,
            18,19,20,21,22,23,24,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            2044,2055,1828,1771,2056,1,2057,2044,2258,2259,
            2260,1763,1748,2364,2365,2366,2367,2368,2369,2370,
            2371,2372,2373,1302,2379,1779,2207,2044,1312,812,
            679,2058,2059,2060,1611,1484,88,256,2208,2206,
            2261,2209,2205,2212,2217,2216,2214,2215,2213,2218,
            2219,2211,2220,2221,2222,253,2375,2374,1166,737,
            669,2044,1,54,48,1,191,1807,338,1,
            1,1,820,1268,1,1,1,1,1,1,
            1,1,1,1,1,1,182,1,1534,1533,
            2387,2386,2388,2390,2389,1951,1,2270,1599,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,191,1,1,1,
            1,1,2044,1,610,1458,1,190,2240,2034,
            1,1,1,1799,1788,1,1,1,1,1,
            1,1,1,1,1,1,1,183,1,1534,
            1533,2387,2386,2388,2390,2389,1951,286,2044,1196,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,190,1,1,
            1,1,1,2044,1,3401,2044,1,191,2240,
            68,1,1,1,2044,62,1,1,1,1,
            1,1,1,1,1,1,1,1,51,1,
            1,249,249,249,2044,249,1941,249,2044,1249,
            621,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,191,1,
            1,1,1,1,2044,2055,249,249,2056,270,
            2240,1687,2258,2259,2260,64,714,2364,2365,2366,
            2367,2368,2369,2370,2371,2372,2373,1302,2379,1389,
            2207,1537,1504,58,1,250,250,250,72,250,
            1469,250,2208,2206,2261,2209,2205,2212,2217,2216,
            2214,2215,2213,2218,2219,2211,2220,2221,2222,129,
            2375,2374,1166,737,669,2044,2402,2258,2259,2260,
            250,250,2364,2365,2366,2367,2368,2369,2370,2371,
            2372,2373,1302,2379,1,2207,1,2038,1290,90,
            2044,2050,1443,714,610,1458,2378,2208,2206,2261,
            2209,2205,2212,2217,2216,2214,2215,2213,2218,2219,
            2211,2220,2221,2222,2044,2375,2374,20,70,2035,
            2035,90,2035,2049,2035,179,179,179,1354,1938,
            179,179,179,179,179,179,179,179,179,179,
            179,179,271,179,59,66,1,2044,1699,714,
            670,2050,130,714,2035,179,179,179,179,179,
            2258,2259,2260,65,2044,2364,2365,2366,2367,2368,
            2369,2370,2371,2372,2373,1302,2379,1072,2207,265,
            61,1699,1,2049,337,2044,714,131,1469,231,
            2208,2206,2261,2209,2205,2258,2259,2260,1372,2044,
            2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,
            1302,2379,1416,2207,2044,1588,1571,702,574,336,
            231,231,132,1432,230,2208,2206,2261,2209,2205,
            2258,2259,2260,30,2044,2364,2365,2366,2367,2368,
            2369,2370,2371,2372,2373,1302,2379,231,2207,60,
            231,1588,1571,702,574,230,230,133,2044,67,
            2208,2206,2261,2209,2205,2258,2259,2260,2044,586,
            2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,
            1302,2379,230,2207,211,230,32,2044,1935,1,
            2041,50,2050,1936,1807,2208,2206,2261,2209,2205,
            1,2055,1828,1623,2056,2048,2057,71,2044,2044,
            2055,1763,1748,2056,2070,2071,49,2044,2282,1807,
            1588,1571,702,574,2049,1779,763,2044,1312,812,
            679,2058,2059,2060,1611,1484,1555,1432,2044,2055,
            1828,1729,2056,2048,2057,262,2270,1290,1,1763,
            1748,2044,714,2302,1245,268,2270,1290,253,1155,
            1799,1788,714,1779,1114,2047,1312,812,679,2058,
            2059,2060,1611,1484,42,735,2044,1,2055,1828,
            1771,2056,29,2057,30,1799,1788,1372,1763,1748,
            268,2044,1699,253,2044,2055,2050,714,2056,1,
            2270,1599,1779,2047,3401,1312,812,679,2058,2059,
            2060,1611,1484,2044,2055,1828,1771,2056,2048,2057,
            2073,1556,2044,2055,1763,1748,2056,1959,2049,185,
            3432,2044,29,3432,2044,2044,184,3437,1779,2048,
            3437,1312,812,679,2058,2059,2060,1611,1484,1051,
            57,2044,1,1,1,1,2044,1,1621,63,
            206,3453,1,1,3453,2044,1030,1009,988,967,
            946,904,925,883,862,841,1,2044,2047,1,
            1,1,1,1,1,1,1,56,1,55,
            1,253,2044,2055,1828,1771,2056,53,2057,2047,
            220,2044,52,1763,1748,2044,2050,714,1249,621,
            2054,610,1458,1249,621,2044,2044,1779,2360,3401,
            1312,812,679,2058,2059,2060,1611,1484,1,2055,
            1828,1771,2056,2044,2057,1537,1504,1868,2049,1763,
            1748,1483,1,253,2270,1599,2044,2050,610,1458,
            610,1458,2302,1779,2302,3401,1312,812,679,2058,
            2059,2060,1611,1484,2044,2055,1828,1771,2056,2044,
            2057,2053,1,1,2052,1763,1748,2054,222,2049,
            1862,2044,208,2055,2044,714,2056,69,2044,1779,
            2378,3401,1312,812,679,2058,2059,2060,1611,1484,
            2044,2055,1828,1771,2056,2044,2057,2044,1303,207,
            1341,1763,1748,1341,1135,2044,2055,1830,1771,2056,
            207,2057,2044,2044,2051,1779,1763,1748,1312,812,
            679,2058,2059,2060,1611,1484,285,2301,2053,2044,
            1779,557,2044,1312,812,679,2058,2059,2060,1611,
            1484,1,2055,1828,1771,2056,3374,2057,353,352,
            1672,1688,1763,1748,2378,2378,1389,189,2044,1827,
            292,2044,189,2044,2044,1447,1779,1176,201,1312,
            812,679,2058,2059,2060,1611,1484,2044,189,2044,
            2044,557,2044,2044,185,2258,2259,2260,644,184,
            2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,
            1302,2379,248,2044,2044,206,2044,2044,2044,2044,
            2258,2259,2260,2044,2044,2364,2365,2366,2367,2368,
            2369,2370,2371,2372,2373,1302,2379,251,1563,2044,
            2044,1217,2044,2044,2044,2258,2259,2260,2044,2044,
            2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,
            1302,2379,252,2044,2044,2044,2044,2044,2044,2044,
            2258,2259,2260,2044,2044,2364,2365,2366,2367,2368,
            2369,2370,2371,2372,2373,1302,2379
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            472,1,88,41,88,88,88,88,88,88,
            88,88,88,3,412,23,20,27,25,33,
            31,35,34,37,36,9,88,412,464,464,
            490,88,239,239,363,412,88,88,88,88,
            88,88,88,88,88,88,88,88,88,88,
            88,88,88,88,88,88,88,88,88,88,
            88,88,88,88,88,88,239,239,45,52,
            410,70,316,237,236,197,122,211,66,211,
            66,66,211,66,211,426,136,20,20,25,
            25,25,25,23,23,31,27,27,34,33,
            130,36,35,68,307,68,363,410,73,45,
            181,106,239,369,319,123,66,464,464,66,
            464,88,307,50,410,219,181,45,105,70,
            239,234,426,238,321,239,68,266,68,310,
            50,219,219,88,88,45,106,257,316,243,
            242,410,321,239,68,266,310,310,312,133,
            219,181,45,45,257,239,369,319,234,266,
            307,125,266,310,312,467,312,307,48,470,
            464,88,132,181,219,252,250,250,103,252,
            321,266,127,312,307,88,464,3,52,45,
            464,88,219,123,123,505,239,238,307,246,
            88,245,101,410,307,45,239,239,465,252,
            465,127,88,101,238,465
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            102,0,7,2,68,89,28,29,75,92,
            93,94,95,96,98,97,99,100,101,3,
            69,70,11,12,62,61,71,72,73,74,
            76,77,25,78,79,80,55,66,90,91,
            63,37,102,36,65,5,0,5,55,7,
            68,28,29,25,3,11,12,34,35,30,
            2,6,31,32,33,1,4,27,0,65,
            5,26,8,9,10,13,14,15,16,17,
            18,19,20,21,22,23,24,6,31,32,
            33,4,28,29,25,11,12,34,35,30,
            3,1,2,0,26,65,5,28,29,25,
            3,11,12,34,35,30,1,4,31,32,
            33,2,6,0,66,5,3,1,2,63,
            0,75,7,68,0,26,42,41,40,39,
            38,68,89,28,29,25,11,12,69,70,
            61,62,71,72,73,74,76,77,78,79,
            80,90,91,75,92,93,94,95,96,97,
            98,99,100,101,36,5,7,2,3,37,
            8,9,10,13,14,15,16,17,18,19,
            20,21,22,23,24,0,51,43,48,46,
            47,45,44,49,50,52,53,54,57,56,
            63,66,42,39,26,38,41,40,8,9,
            10,13,14,15,16,17,18,19,20,21,
            22,23,24,3,1,2,7,36,37,5,
            0,2,37,7,63,66,5,36,0,6,
            2,5,63,36,37,66,81,82,83,84,
            85,86,87,88,0,38,43,8,44,58,
            39,45,40,46,47,41,9,48,49,26,
            59,42,60,50,51,10,52,53,54,1,
            4,13,14,15,16,17,18,19,56,20,
            21,22,57,23,24,67,5,55,0,1,
            4,5,55,36,0,3,2,7,37,5,
            38,43,8,44,58,39,45,40,46,47,
            41,9,48,49,26,59,42,60,50,51,
            10,52,53,54,1,4,13,14,15,16,
            17,18,19,56,20,21,22,57,23,24,
            64,0,5,37,3,2,7,0,38,43,
            8,44,58,39,45,40,46,47,41,9,
            48,49,26,59,42,60,50,51,10,52,
            53,54,1,4,13,14,15,16,17,18,
            19,56,20,21,22,57,23,24,64,3,
            0,30,6,31,32,33,2,28,29,25,
            3,11,12,34,35,58,59,60,51,43,
            48,46,47,45,44,49,50,52,53,54,
            57,56,42,39,26,38,41,24,23,13,
            14,15,16,17,18,19,20,21,22,8,
            9,10,40,4,1,0,5,36,55,75,
            0,30,6,31,32,33,1,4,2,28,
            29,25,3,11,12,34,35,67,0,30,
            6,31,32,33,4,2,28,29,25,3,
            11,12,34,35,1,37,5,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static char nasb[] = {0,
            130,73,23,73,23,23,23,23,23,23,
            23,23,23,73,116,73,73,73,73,73,
            73,73,73,73,73,73,23,116,41,41,
            133,117,100,100,103,1,23,23,23,23,
            23,23,23,23,23,23,23,23,23,23,
            23,23,117,23,23,23,23,23,23,23,
            23,23,23,23,23,23,100,100,39,95,
            15,37,102,18,18,54,74,55,33,55,
            47,47,55,46,55,49,73,73,73,73,
            73,73,73,73,73,73,73,73,73,73,
            73,73,73,96,72,73,11,73,43,39,
            109,38,100,111,99,74,7,7,7,7,
            7,23,9,72,73,83,109,39,38,76,
            100,67,25,73,113,100,89,72,73,72,
            21,83,72,23,23,39,38,72,66,18,
            18,15,113,100,73,120,72,7,60,35,
            72,109,39,39,93,100,111,99,78,72,
            9,57,62,7,60,73,73,9,20,73,
            7,23,87,109,76,85,74,74,73,73,
            124,120,69,60,9,23,7,107,22,39,
            7,23,76,74,74,99,100,100,9,58,
            23,73,69,15,9,39,100,100,91,73,
            73,69,23,80,100,128
        };
    };
    public final static char nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            83,81,80,70,79,78,1,0,43,0,
            47,46,30,0,30,55,0,29,0,91,
            11,57,5,0,83,82,81,80,70,79,
            78,0,98,0,107,0,11,5,27,0,
            75,0,5,11,0,101,71,0,70,65,
            66,67,68,58,31,0,11,74,0,64,
            0,11,54,72,0,21,47,46,38,36,
            42,11,0,49,0,22,0,47,46,38,
            36,42,30,0,92,0,109,0,99,0,
            111,0,110,0,5,57,51,0,11,21,
            0,21,46,47,11,0,105,0,61,0,
            30,55,11,28,0,54,11,50,0,85,
            11,54,0,102,11,28,0,95,0,11,
            96,0,11,97,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,9,86,87,81,1,48,64,76,
            10,11,93,94,95,96,97,98,99,101,
            102,103,105,106,8,69,3,6,7,68,
            82,83,84,12,13,42,90,44,55,60,
            63,72,47,52,56,61,62,66,67,74,
            75,78,79,80,91,100,104,54,70,73,
            16,17,29,30,89,92,117,4,14,15,
            18,19,20,21,31,22,23,24,25,26,
            107,108,109,110,111,112,113,114,5,27,
            28,32,33,34,35,36,37,38,39,40,
            41,118,45,46,49,50,51,53,57,58,
            59,65,71,77,88,115,116
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            124,0,0,0,126,130,131,132,133,134,
            0,135,136,137,138,139,140,141,0,142,
            121,152,0,0,0,0,120,145,173,0,
            151,0,0,0,169,171,0,172,0,0,
            0,191,122,0,182,183,184,0,190,125,
            129,144,160,164,170,179,0,154,0,174,
            177,178,181,0,155,156,157,158,159,161,
            0,163,168,123,127,128,143,146,147,148,
            149,150,153,0,162,166,0,0,167,176,
            186,193,0,0,195,119,0,0,0,165,
            0,175,180,185,0,187,188,0,189,192,
            194,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            87,118,97,55,61,126,34,141,11,43,
            71,11,48,67,108,166,170,150,1,23,
            23,52,76,84,174,28,112,157,157,132,
            104,6,6,6,6,6
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            95,95,95,26,26,95,40,147,16,16,
            26,16,16,26,106,16,26,154,4,26,
            26,16,26,16,16,31,115,160,163,135,
            106,8,8,18,79,18
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            67,65,67,29,29,65,51,119,42,48,
            29,41,48,29,72,5,5,19,41,109,
            108,46,29,38,3,91,72,7,5,120,
            72,42,41,42,39,41
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            55,55,55,65,65,55,55,108,37,37,
            65,37,37,65,66,37,65,63,81,65,
            65,37,65,37,37,75,1,37,37,114,
            66,2,2,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            23,23,23,27,27,23,17,0,9,31,
            27,9,31,27,5,38,38,68,9,1,
            3,31,27,9,38,94,5,41,38,0,
            5,9,9,9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            128,159,0,227,0,155,0,2,138,0,
            177,128,2,155,0,138,0,2,128,177,
            138,0,169,7,0,144,0,223,128,0,
            75,186,0,181,221,128,27,174,0,160,
            222,0,177,128,2,163,0,177,128,2,
            0,180,2,0,137,26,207,128,7,0,
            137,207,128,26,7,0,137,26,7,0,
            137,207,128,7,0,137,7,0,2,128,
            219,138,0,170,2,0,181,205,128,27,
            118,218,58,0,160,0,181,205,128,27,
            218,58,0,171,0,191,0,217,128,171,
            0,128,171,0,217,191,0,201,128,27,
            216,118,215,187,0,201,128,27,215,187,
            0,232,107,0,114,2,167,138,191,0,
            232,138,167,2,111,0,108,232,0,167,
            91,135,0,63,137,0,193,2,0,138,
            124,0,138,168,0,214,2,122,0,167,
            7,122,0,167,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1417,0,699,0,1889,1280,1831,0,1677,1483,
            1599,1415,1383,1290,1247,0,644,586,516,1349,
            1600,0,608,1239,481,0,1529,1146,636,543,
            1383,1290,1247,508,1699,1787,0,1312,812,679,
            1729,1623,1600,1372,1354,1432,1389,1537,1504,1469,
            1458,610,1588,1571,702,574,1807,1799,1788,1249,
            621,1779,1771,1763,1748,1611,1484,1217,1196,1176,
            644,1155,1135,1114,1093,784,1072,763,714,1051,
            1030,1009,988,967,946,925,904,883,862,841,
            481,820,742,586,516,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,213,128,194,30,35,34,12,11,3,
            25,29,28,122,2,126,125,129,127,131,
            130,133,132,135,134,123,36,2,89,68,
            2,7,193,167,171,128,12,11,70,69,
            3,74,73,72,71,61,62,25,77,76,
            79,78,91,90,80,101,100,99,97,98,
            96,95,94,93,92,75,193,214,167,138,
            128,7,2,164,163,195,23,196,187,197,
            60,59,198,58,199,200,118,125,125,127,
            127,127,127,126,126,130,129,129,132,131,
            167,134,133,138,27,174,172,147,26,137,
            128,3,180,128,2,2,215,188,188,218,
            188,63,128,27,147,3,128,137,207,178,
            177,145,128,179,128,166,118,27,118,27,
            128,3,147,207,26,137,3,159,2,153,
            155,128,36,177,216,128,27,128,221,128,
            147,128,137,137,128,170,128,2,172,27,
            201,171,202,128,205,118,206,181,36,223,
            68,7,224,128,178,227,82,81,88,138,
            128,128,128,205,181,75,36,160,75,169,
            68,7,178,2,2,2,177,219,201,217,
            63,170,2,128,181,169,166,166,128,138,
            36,36,63,172,228,36
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "__data",
            "__near",
            "__xdata",
            "__far",
            "__idata",
            "__pdata",
            "__code",
            "__bit",
            "__sfr",
            "__sfr16",
            "__sfr32",
            "__sbit",
            "__at",
            "__banked",
            "__interrupt",
            "__using",
            "__reentrant",
            "__critical",
            "__naked",
            "__wparam",
            "__shadowregs",
            "__preserves__regs",
            "__asm",
            "__endasm",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_sizeof_type_id_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "and_expression",
            "exclusive_or_expression",
            "inclusive_or_expression",
            "logical_and_expression",
            "logical_or_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "initializer_seq",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "absolute_address",
            "original_function_direct_decla" +
            "rator",
            "sdcc_function_attributes",
            "sdcc_function_attribute",
            "preserves_regs_args",
            "preserves_regs_arg"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
