/*******************************************************************************
* Copyright (c) 2006, 2010 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package nodamushi.internal.cdt.parser.sdcc;

public class SDCCSizeofExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, SDCCSizeofExpressionParsersym {
    public final static int ERROR_SYMBOL = 67;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 35;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 36;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 38;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 226;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 117;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 2491;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 2;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 481;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 143;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 260;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 1574;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 102;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 102;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 2000;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 2010;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = true;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return SDCCSizeofExpressionParsersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,1,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,1,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,1,0,0,0,0,0,0,0,
            1,0,0,0,0,0,0,1,0,0,
            0,0,0,0,0,0,0,0,0,0,
            1,0,0,0,1,0,0,0,0,0,
            0,0,0,0,1,1,1,0,1,0,
            0,0,1,0,0,0,0,0,0,0,
            1,0,0,0,0,0,0,0,0,0,
            0,0,1,0,0,0,0,0,1,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static char prosthesesIndex[] = {0,
            9,10,11,12,14,20,21,22,23,24,
            3,25,26,27,28,29,30,31,32,33,
            6,58,87,127,128,129,5,49,95,103,
            56,57,59,70,88,90,91,92,93,94,
            96,131,7,35,108,109,110,111,13,18,
            37,69,79,89,105,112,61,71,97,102,
            104,107,136,19,62,63,64,65,68,72,
            76,78,86,8,16,17,36,51,52,53,
            54,55,60,74,77,81,82,84,85,101,
            115,130,133,134,135,138,2,15,73,75,
            80,83,99,106,113,114,116,117,118,119,
            132,137,1,4,34,38,39,40,41,42,
            43,44,45,46,47,48,50,66,67,98,
            100,120,121,122,123,124,125,126,139,140,
            141,142,143
        };
    };
    public final static char prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,3,1,
            1,4,4,3,3,2,2,4,1,0,
            1,1,2,2,2,2,2,2,2,2,
            2,1,4,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,4,3,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,2,5,9,
            8,3,2,2,2,3,2,4,2,2,
            2,2,2,1,1,1,1,2,1,2,
            2,2,1,2,2,1,2,2,1,2,
            2,1,2,2,1,3,1,3,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,6,
            8,0,0,1,1,3,3,3,0,1,
            0,1,2,4,2,1,1,1,3,1,
            1,2,3,7,8,0,1,0,1,3,
            1,3,1,1,1,1,1,1,3,1,
            1,1,1,1,3,1,2,2,1,5,
            3,1,3,5,1,3,1,3,2,4,
            3,5,4,6,6,3,5,1,3,4,
            5,6,0,1,2,1,3,1,1,3,
            2,1,1,1,1,2,1,2,3,1,
            1,1,3,1,2,2,2,3,4,5,
            1,1,7,3,0,0,1,1,3,3,
            4,1,1,2,3,2,3,2,1,0,
            1,2,1,1,1,1,1,2,1,3,
            6,4,2,4,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,4,2,1,1,5,3,3,1,2,
            1,1,1,1,1,1,1,4,2,4,
            2,1,1,1,3,5,1,3,1,1,
            1,2,5,3,1,2,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,-36,0,0,0,0,0,0,0,0,
            0,0,-2,0,0,0,0,0,0,0,
            0,0,-4,0,0,0,0,0,-74,-123,
            -160,-71,0,0,0,0,-141,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -14,0,-77,-105,-16,-130,0,0,0,0,
            -17,0,0,-79,0,-117,0,-69,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-42,0,0,0,0,0,0,
            0,0,0,0,0,0,-179,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-5,0,
            0,0,0,0,0,-133,0,0,0,0,
            -18,0,-149,-46,0,0,0,0,0,0,
            0,0,0,0,0,-198,0,0,0,0,
            0,0,0,0,-33,-115,0,0,0,0,
            -186,0,0,-19,-116,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-81,0,0,0,-29,0,0,-30,0,
            0,0,0,0,0,0,-12,0,0,0,
            0,0,0,0,0,0,0,0,0,-199,
            0,0,0,0,0,0,0,0,0,0,
            -137,0,0,0,0,0,0,0,0,0,
            -72,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-20,0,
            0,-197,0,0,-21,0,-22,-3,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-109,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-129,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -118,0,-119,0,0,-34,0,-13,0,0,
            0,0,0,0,0,-27,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-56,0,0,0,
            0,0,0,0,0,0,0,-67,0,0,
            0,0,0,0,0,0,0,-57,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-58,0,
            0,0,0,0,0,0,0,0,0,-68,
            0,0,0,0,0,0,0,0,0,-59,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -60,0,0,0,0,0,0,0,0,0,
            0,-113,0,0,0,0,0,0,0,0,
            0,-61,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-62,0,0,0,0,0,0,0,
            0,0,0,-131,0,0,0,0,0,0,
            0,0,0,-63,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-64,0,0,0,0,0,
            0,0,0,0,0,-136,0,0,0,0,
            0,0,0,0,0,-65,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-66,0,0,0,
            0,0,0,0,0,0,0,-154,0,0,
            0,0,0,0,0,0,0,-122,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-144,0,
            0,0,0,0,0,0,0,0,0,-166,
            0,0,0,0,0,0,0,0,0,-145,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -182,0,0,0,0,0,0,0,0,0,
            0,-165,0,0,0,0,0,0,0,0,
            -196,0,0,0,0,0,0,0,0,0,
            0,-23,0,0,0,0,0,0,0,0,
            -202,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -211,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -223,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -75,-86,0,-24,0,0,0,-104,-132,-168,
            -124,0,-219,-120,0,-25,-185,-121,0,0,
            0,0,0,0,0,0,0,0,-26,0,
            0,0,0,0,0,0,-82,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-138,-87,0,0,0,0,0,0,0,
            0,-88,0,0,-84,-159,0,0,0,0,
            0,0,-54,0,0,0,0,0,0,0,
            0,0,0,-110,0,0,0,0,0,0,
            -55,0,0,0,0,0,0,0,0,0,
            0,-169,0,0,0,0,0,0,0,-89,
            0,-207,0,-51,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-193,-128,0,0,0,0,0,
            0,0,0,0,0,-90,0,0,0,0,
            -52,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-222,0,-126,0,0,
            0,0,0,0,0,0,0,-6,0,0,
            0,0,0,0,0,0,-48,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-37,0,
            0,0,0,0,0,0,0,0,-91,0,
            0,-49,0,0,0,0,0,0,0,0,
            0,0,-76,0,0,-50,0,0,0,0,
            0,0,0,0,0,0,-92,0,-172,-140,
            -143,0,0,-93,0,0,0,0,0,0,
            0,0,-94,0,0,0,0,-43,0,0,
            0,0,0,0,0,0,0,0,-44,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-45,0,0,0,0,0,0,0,0,
            0,0,-213,-47,0,0,0,0,0,0,
            0,0,0,0,-70,0,0,0,0,0,
            0,0,0,-1,-78,-38,0,0,0,0,
            0,0,0,0,0,-95,-142,0,0,0,
            0,0,0,0,0,-96,0,0,0,0,
            0,-80,-146,-97,0,0,0,0,0,-158,
            0,-174,0,-152,0,-83,0,0,-163,-31,
            0,-171,0,0,0,0,0,0,-85,0,
            0,-148,0,0,0,0,-224,0,0,0,
            0,0,0,0,-206,0,0,0,0,0,
            0,0,0,0,0,0,-150,-151,-73,0,
            0,0,0,0,0,0,0,0,-175,0,
            0,0,0,0,0,0,0,0,0,0,
            -181,0,0,-98,0,0,0,0,-112,0,
            0,0,0,0,0,0,-99,0,0,0,
            0,-201,0,0,0,0,0,-147,0,0,
            0,0,0,0,0,0,-100,0,-157,-161,
            0,-7,0,0,0,0,0,0,0,0,
            0,-183,0,-101,0,-8,0,0,0,0,
            0,0,0,-9,0,0,0,0,0,0,
            0,-10,0,0,0,0,0,0,0,-11,
            0,0,0,0,0,0,0,-35,-39,0,
            0,0,0,0,0,0,-111,-164,0,-40,
            0,0,0,0,0,0,0,-41,0,0,
            0,0,0,0,0,-114,0,-107,0,0,
            0,0,0,-210,0,-170,0,-187,-127,-15,
            -167,-32,0,0,0,0,0,-194,-178,-188,
            0,0,0,0,-204,0,0,0,-226,0,
            0,0,0,0,0,-28,0,0,0,-102,
            0,0,0,0,0,0,0,-200,-156,0,
            0,-195,-205,0,0,0,0,-208,0,0,
            0,0,0,0,0,0,0,-162,0,0,
            0,0,-192,-209,0,-103,0,0,0,0,
            -184,0,0,0,0,0,-191,0,0,0,
            0,0,0,0,0,-215,-216,0,0,-106,
            0,0,0,0,0,0,0,-135,-173,-214,
            -53,0,-108,-217,0,0,0,-125,0,0,
            0,0,-218,0,0,0,-203,0,-134,-139,
            -155,-176,0,0,0,0,0,-225,0,0,
            0,0,-153,0,0,0,-177,0,0,0,
            0,0,0,0,0,-180,0,0,0,0,
            -189,0,0,0,-190,-212,0,-220,0,-221,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            97,11,114,27,27,21,21,43,43,74,
            74,1,1,2,2,2,2,3,3,3,
            4,5,5,5,5,5,5,5,5,64,
            64,75,6,6,6,6,6,6,6,6,
            6,6,7,7,8,8,8,8,9,9,
            9,10,10,10,12,12,12,12,12,13,
            13,13,14,14,15,15,16,16,17,17,
            18,18,19,19,20,20,20,20,20,20,
            20,20,20,20,20,20,115,49,44,98,
            98,77,77,51,116,116,116,116,116,116,
            116,117,117,117,118,118,123,123,124,124,
            119,119,120,120,120,126,126,121,121,121,
            121,121,122,122,122,122,122,125,125,28,
            28,28,28,28,31,31,31,83,83,78,
            78,78,78,79,79,79,80,80,80,81,
            81,81,82,82,82,127,127,128,128,129,
            32,34,34,34,34,34,57,58,58,58,
            58,58,58,58,58,58,58,58,58,68,
            65,65,99,100,70,70,66,66,66,71,
            84,84,85,85,72,72,72,53,101,101,
            86,87,87,87,67,67,102,88,88,89,
            89,73,73,22,23,23,23,33,52,52,
            35,35,35,35,38,38,40,36,36,37,
            41,41,130,130,39,131,131,103,103,29,
            29,29,29,29,29,29,29,29,90,54,
            54,54,54,30,60,60,59,59,59,61,
            61,55,55,104,104,76,76,62,62,62,
            45,45,45,46,47,47,47,48,48,48,
            48,69,69,50,50,56,106,105,105,105,
            105,91,107,108,108,109,109,110,110,132,
            132,133,133,134,134,134,134,136,136,135,
            135,135,137,138,138,97,97,22,22,22,
            24,24,24,24,24,24,24,24,24,24,
            58,58,25,25,92,26,42,42,41,111,
            111,93,93,93,93,93,93,93,94,94,
            94,94,94,94,63,95,95,112,112,96,
            116,116,139,140,140,141,141,142,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,143,143,143,143,143,143,143,143,
            143,143,1,1303,17,21,18,541,1279,44,
            551,545,654,28,621,755,749,1182,757,1266,
            1254,74,91,37,135,213,317,318,319,383,
            810,848,56,137,134,136,160,769,20,17,
            21,18,541,1279,44,551,545,654,511,621,
            755,749,1182,757,1266,1254,74,281,275,139,
            166,527,1913,331,6,209,953,143,146,149,
            152,65,554,284,87,510,550,711,675,503,
            1483,1575,1602,1616,1629,1252,1798,282,255,213,
            317,318,319,1900,841,20,17,21,18,541,
            42,44,551,545,1396,22,287,618,20,17,
            21,18,541,1279,44,551,545,654,511,621,
            755,749,1182,757,1266,1254,74,281,288,856,
            20,17,21,18,541,41,245,179,1956,1732,
            293,385,1316,327,841,20,17,21,18,541,
            42,44,551,1513,1811,333,158,282,135,213,
            317,318,319,1900,277,528,783,137,134,136,
            160,69,274,556,64,825,289,1908,218,1657,
            221,1658,223,224,229,1632,1565,278,267,1251,
            509,272,670,139,166,1120,663,31,290,663,
            31,143,146,149,152,952,554,856,20,17,
            21,18,541,34,1483,1575,1602,1616,1629,1252,
            805,20,17,21,18,541,1279,44,551,545,
            654,148,621,755,749,1182,757,1266,1254,74,
            281,541,20,17,21,18,541,1279,44,551,
            545,654,1777,621,755,749,1182,757,1266,1254,
            74,1334,283,821,340,341,347,1036,239,256,
            282,25,663,1932,24,196,1900,191,841,20,
            17,21,18,541,1279,44,551,545,654,291,
            621,755,749,1182,757,1266,1254,74,91,892,
            20,17,21,18,541,1279,44,551,545,654,
            1809,621,755,749,1182,757,1266,1254,74,1385,
            579,20,17,21,18,541,1279,44,551,545,
            654,1931,621,755,749,1182,757,1266,1254,74,
            1603,663,187,663,186,210,528,240,856,20,
            17,21,18,541,33,503,841,20,17,21,
            18,541,1279,44,551,545,654,19,621,755,
            749,1182,757,1266,1254,74,92,841,20,17,
            21,18,541,1279,44,551,545,654,528,621,
            755,749,1182,757,1266,1254,74,85,841,20,
            17,21,18,541,1279,44,551,545,654,1258,
            621,755,749,1182,757,1266,1254,74,84,841,
            20,17,21,18,541,1279,44,551,545,654,
            528,621,755,749,1182,757,1266,1254,74,83,
            841,20,17,21,18,541,1279,44,551,545,
            654,23,621,755,749,1182,757,1266,1254,74,
            82,841,20,17,21,18,541,1279,44,551,
            545,654,528,621,755,749,1182,757,1266,1254,
            74,81,841,20,17,21,18,541,1279,44,
            551,545,654,273,621,755,749,1182,757,1266,
            1254,74,80,841,20,17,21,18,541,1279,
            44,551,545,654,528,621,755,749,1182,757,
            1266,1254,74,79,841,20,17,21,18,541,
            1279,44,551,545,654,279,621,755,749,1182,
            757,1266,1254,74,78,841,20,17,21,18,
            541,1279,44,551,545,654,528,621,755,749,
            1182,757,1266,1254,74,77,841,20,17,21,
            18,541,1279,44,551,545,654,332,621,755,
            749,1182,757,1266,1254,74,76,841,20,17,
            21,18,541,1279,44,551,545,654,528,621,
            755,749,1182,757,1266,1254,74,75,841,20,
            17,21,18,541,1279,44,551,545,654,280,
            621,755,749,1182,757,1266,1254,74,73,841,
            20,17,21,18,541,1279,44,551,545,654,
            528,621,755,749,1182,757,1266,1254,74,1619,
            841,20,17,21,18,541,1279,44,551,545,
            654,225,621,755,749,1182,757,1266,1254,74,
            1778,841,20,17,21,18,541,42,44,551,
            545,654,8,621,755,749,1182,757,1266,1254,
            93,841,20,17,21,18,541,42,44,551,
            545,654,386,621,755,749,1182,757,1266,1254,
            93,841,20,17,21,18,541,42,44,551,
            545,654,1848,621,755,749,1182,757,1266,1254,
            93,841,20,17,21,18,541,42,44,551,
            545,654,212,621,755,749,1182,757,1266,1254,
            93,841,20,17,21,18,541,42,44,551,
            545,654,1897,621,755,749,1182,757,1266,1254,
            93,250,245,179,279,339,341,347,159,586,
            783,6,202,306,635,1930,359,978,663,188,
            1614,1887,517,651,135,213,317,318,319,615,
            276,1965,203,138,134,136,160,677,274,255,
            213,317,318,319,218,1657,221,1658,223,224,
            229,1632,6,358,267,1251,509,272,28,140,
            166,263,532,1849,1900,701,474,144,147,150,
            153,264,554,841,20,17,21,18,541,42,
            44,551,545,654,675,621,755,749,1182,757,
            1840,841,20,17,21,18,541,42,44,551,
            545,654,596,621,755,749,1182,1876,823,357,
            557,241,528,261,841,20,17,21,18,541,
            42,44,551,545,654,1938,621,755,749,1697,
            1819,274,1918,1968,97,675,1268,219,1657,221,
            1658,223,224,229,1632,1910,274,269,1251,509,
            272,841,20,17,21,18,541,42,44,551,
            545,654,243,621,755,1717,97,1264,56,218,
            1657,221,1658,223,224,229,1632,1910,841,20,
            17,21,18,541,42,40,1966,841,20,17,
            21,18,541,42,44,551,545,654,1501,621,
            1596,218,1657,221,1658,223,224,229,1632,841,
            20,17,21,18,541,42,44,1312,1966,691,
            198,200,841,20,17,21,18,541,42,44,
            551,545,654,300,1604,1804,841,20,17,21,
            18,541,42,44,551,545,654,728,1684,813,
            6,211,199,200,730,135,213,317,318,319,
            1384,1610,1868,738,142,134,136,160,841,20,
            17,21,18,541,42,44,551,545,1469,841,
            20,17,21,18,541,42,44,551,545,1497,
            141,166,841,20,17,21,18,541,42,44,
            551,545,1504,640,841,20,17,21,18,541,
            42,44,551,1586,1910,733,20,17,21,18,
            541,42,43,195,692,393,841,20,17,21,
            18,541,42,44,1360,758,743,56,218,1657,
            221,1658,223,224,229,1632,700,135,213,317,
            318,319,428,675,421,1120,145,134,136,160,
            823,1932,823,1932,56,28,463,1720,87,675,
            325,1900,810,315,135,213,317,318,319,498,
            242,758,6,148,134,136,160,784,135,213,
            317,318,319,1162,1913,783,244,151,134,136,
            160,135,213,317,318,319,1263,741,819,387,
            154,134,136,160,89,180,355,1918,1352,625,
            1796,493,219,1657,221,1658,223,224,229,1632,
            277,663,296,209,490,209,228,227,274,654,
            20,17,21,18,541,42,36,500,1669,1947,
            1818,1947,663,298,267,1251,509,272,654,20,
            17,21,18,541,42,36,246,404,910,6,
            275,952,841,20,17,21,18,541,42,39,
            1612,1881,911,1852,355,247,841,20,17,21,
            18,541,42,38,841,20,17,21,18,541,
            42,37,841,20,17,21,18,541,42,36,
            841,20,17,21,18,541,42,35,420,841,
            20,17,21,18,541,42,47,928,675,512,
            841,20,17,21,18,541,42,46,841,20,
            17,21,18,541,42,45,729,274,631,254,
            213,317,318,319,746,245,6,616,899,928,
            6,729,6,267,1251,509,272,1873,625,810,
            900,482,616,758,1259,908,1913,274,1918,306,
            266,254,213,317,318,319,6,546,197,1259,
            548,1913,294,269,1251,509,272,482,675,62,
            1798,259,810,908,87,994,87,1929,632,826,
            616,558,636,1768,197,1352,259,800,928,546,
            994,351,1929,184,810,295,828,197,194,234,
            87,928,1896,349,616,826,645,530,1914,1768,
            254,213,317,318,319,204,810,675,616,1109,
            426,197,1499,254,213,317,318,319,731,123,
            56,6,868,388,528,1259,1923,181,846,616,
            616,192,758,528,297,358,1499,1003,1267,38,
            672,883,525,1622,1909,350,1259,197,742,205,
            1913,1927,259,814,348,192,1362,861,1929,255,
            213,317,318,319,616,87,864,1874,1909,356,
            1734,215,1499,259,1637,425,919,1078,460,1929,
            558,1259,2010,2010,2010,2010,2010,2010,2010,2010,
            2010,193,2010,2010,2010,2010,2010,2010,2010,2010,
            1858,2010,2010,2010,2010,2010,2010,2010,260,2010,
            0,20,179,0,1,2236,0,1,2247,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,0,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,0,28,29,
            30,31,32,33,34,35,0,0,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,0,56,57,58,59,
            60,0,1,0,0,4,5,3,0,8,
            9,10,36,36,13,14,15,16,17,18,
            19,20,21,22,23,24,0,26,81,82,
            83,84,85,86,87,88,0,1,2,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,0,1,61,62,4,5,67,102,
            8,9,10,69,70,13,14,15,16,17,
            18,19,20,21,22,23,24,0,26,81,
            82,83,84,85,86,87,88,0,0,63,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,0,1,27,0,4,5,67,
            0,8,9,10,0,0,13,14,15,16,
            17,18,19,20,21,22,23,24,0,26,
            0,1,2,3,0,5,2,7,0,11,
            12,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,0,1,36,37,4,0,
            67,2,8,9,10,0,7,13,14,15,
            16,17,18,19,20,21,22,23,24,79,
            26,76,77,0,0,1,2,3,0,5,
            25,7,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,0,
            56,57,58,59,60,0,1,8,9,10,
            36,37,13,14,15,16,17,18,19,20,
            21,22,23,24,0,26,0,1,2,5,
            0,5,2,7,61,62,6,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,0,56,57,0,0,2,
            3,37,5,37,7,8,9,10,90,91,
            13,14,15,16,17,18,19,20,21,22,
            23,24,0,26,0,0,0,0,2,7,
            3,5,0,7,37,38,39,40,41,42,
            8,9,10,0,0,13,14,15,16,17,
            18,19,20,21,22,23,24,63,26,0,
            0,2,3,37,0,0,7,0,25,5,
            38,39,40,41,42,8,9,10,80,0,
            13,14,15,16,17,18,19,20,21,22,
            23,24,27,26,0,71,72,73,74,0,
            36,37,0,78,5,38,39,40,41,42,
            8,9,10,0,0,13,14,15,16,17,
            18,19,20,21,22,23,24,63,26,0,
            66,71,72,73,74,36,37,0,0,0,
            38,39,40,41,42,8,9,10,0,36,
            13,14,15,16,17,18,19,20,21,22,
            23,24,63,26,0,66,0,0,2,0,
            1,0,5,7,3,38,39,40,41,42,
            0,1,2,3,4,5,6,0,0,0,
            1,11,12,4,28,29,0,0,1,3,
            71,72,73,74,37,25,26,0,28,29,
            30,31,32,33,34,35,27,78,0,1,
            2,3,4,5,6,0,1,2,3,11,
            12,0,7,64,68,0,1,2,3,75,
            69,70,7,25,26,65,28,29,30,31,
            32,33,34,35,0,89,0,0,1,2,
            3,4,5,6,0,69,70,80,11,12,
            0,0,2,3,0,1,5,7,4,0,
            1,2,25,65,27,28,29,30,31,32,
            33,34,35,0,1,2,3,4,5,6,
            36,27,0,1,11,12,4,36,37,0,
            1,0,55,4,0,0,0,1,25,5,
            4,28,29,30,31,32,33,34,35,75,
            0,0,1,2,3,4,0,6,27,0,
            0,1,11,12,4,0,92,93,94,95,
            96,97,98,99,100,101,25,0,65,28,
            29,30,31,32,33,34,35,0,0,0,
            0,3,0,1,2,3,4,0,6,65,
            0,0,0,11,12,0,5,7,11,12,
            5,61,62,11,12,0,0,25,67,27,
            28,29,30,31,32,33,34,35,0,1,
            2,3,4,0,6,76,77,36,37,11,
            12,36,0,0,1,2,0,5,61,62,
            61,62,64,25,64,27,28,29,30,31,
            32,33,34,35,0,1,2,3,4,0,
            6,66,0,0,5,11,12,5,0,37,
            2,0,0,1,0,7,4,0,0,25,
            6,27,28,29,30,31,32,33,34,35,
            0,1,2,3,4,0,6,0,3,0,
            1,11,12,4,7,0,1,2,3,4,
            0,6,0,0,55,25,11,12,28,29,
            30,31,32,33,34,35,0,64,66,0,
            25,5,0,28,29,30,31,32,33,34,
            35,0,1,2,3,4,36,6,0,0,
            2,2,11,12,6,6,79,0,0,27,
            0,0,0,6,0,68,25,7,0,28,
            29,30,31,32,33,34,35,0,0,0,
            0,55,0,0,0,8,9,10,75,27,
            13,14,15,16,17,18,19,20,21,22,
            23,24,0,0,0,27,27,0,0,0,
            8,9,10,0,0,13,14,15,16,17,
            18,19,20,21,22,23,24,0,68,0,
            0,63,0,0,0,8,9,10,0,0,
            13,14,15,16,17,18,19,20,21,22,
            23,24,0,0,0,0,0,0,0,0,
            8,9,10,0,0,13,14,15,16,17,
            18,19,20,21,22,23,24,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            2010,2021,1810,1752,2022,1,2023,2010,2224,2225,
            2226,1744,1736,2330,2331,2332,2333,2334,2335,2336,
            2337,2338,2339,543,2345,1760,2173,2010,828,687,
            609,2024,2025,2026,1722,1428,88,256,2174,2172,
            2227,2175,2171,2178,2183,2182,2180,2181,2179,2184,
            2185,2177,2186,2187,2188,253,2341,2340,1315,1287,
            672,2010,1,54,48,1,191,1788,338,1,
            1,1,836,1943,1,1,1,1,1,1,
            1,1,1,1,1,1,182,1,1820,1808,
            2353,2352,2354,2356,2355,1961,1,2236,1553,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,191,1,1,1,
            1,1,2010,1,624,1554,1,190,2206,2000,
            1,1,1,1780,1769,1,1,1,1,1,
            1,1,1,1,1,1,1,183,1,1820,
            1808,2353,2352,2354,2356,2355,1961,286,2010,1211,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,190,1,1,
            1,1,1,2010,1,3368,2010,1,191,2206,
            68,1,1,1,2010,62,1,1,1,1,
            1,1,1,1,1,1,1,1,51,1,
            1,249,249,249,2010,249,1645,249,2010,1576,
            1459,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,191,1,
            1,1,1,1,2010,2021,249,249,2022,270,
            2206,646,2224,2225,2226,64,721,2330,2331,2332,
            2333,2334,2335,2336,2337,2338,2339,543,2345,1364,
            2173,1486,1472,58,1,250,250,250,72,250,
            1437,250,2174,2172,2227,2175,2171,2178,2183,2182,
            2180,2181,2179,2184,2185,2177,2186,2187,2188,129,
            2341,2340,1315,1287,672,2010,2369,2224,2225,2226,
            250,250,2330,2331,2332,2333,2334,2335,2336,2337,
            2338,2339,543,2345,1,2173,1,2004,623,90,
            2010,2016,655,721,624,1554,2344,2174,2172,2227,
            2175,2171,2178,2183,2182,2180,2181,2179,2184,2185,
            2177,2186,2187,2188,2010,2341,2340,20,70,2001,
            2001,90,2001,2015,2001,179,179,179,1323,1911,
            179,179,179,179,179,179,179,179,179,179,
            179,179,271,179,59,66,1,2010,1659,721,
            1418,2016,130,721,2001,179,179,179,179,179,
            2224,2225,2226,65,2010,2330,2331,2332,2333,2334,
            2335,2336,2337,2338,2339,543,2345,1088,2173,265,
            61,1659,1,2015,337,2010,721,131,1437,231,
            2174,2172,2227,2175,2171,2224,2225,2226,1341,2010,
            2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,
            543,2345,1261,2173,2010,1542,1529,1518,574,336,
            231,231,132,1401,230,2174,2172,2227,2175,2171,
            2224,2225,2226,30,2010,2330,2331,2332,2333,2334,
            2335,2336,2337,2338,2339,543,2345,231,2173,60,
            231,1542,1529,1518,574,230,230,133,2010,67,
            2174,2172,2227,2175,2171,2224,2225,2226,2010,587,
            2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,
            543,2345,230,2173,211,230,32,2010,1620,1,
            2007,50,2016,1812,1788,2174,2172,2227,2175,2171,
            1,2021,1810,1689,2022,2014,2023,71,2010,2010,
            2021,1744,1736,2022,2036,2037,49,2010,2248,1788,
            1542,1529,1518,574,2015,1760,779,2010,828,687,
            609,2024,2025,2026,1722,1428,1302,1401,2010,2021,
            1810,1708,2022,2014,2023,262,2236,623,1,1744,
            1736,2010,721,2268,679,268,2236,623,253,1171,
            1780,1769,721,1760,1130,2013,828,687,609,2024,
            2025,2026,1722,1428,42,676,2010,1,2021,1810,
            1752,2022,29,2023,30,1780,1769,1341,1744,1736,
            268,2010,1659,253,2010,2021,2016,721,2022,1,
            2236,1553,1760,2013,3368,828,687,609,2024,2025,
            2026,1722,1428,2010,2021,1810,1752,2022,2014,2023,
            2039,1500,2010,2021,1744,1736,2022,1970,2015,185,
            3404,2010,29,3404,2010,2010,184,3420,1760,2014,
            3420,828,687,609,2024,2025,2026,1722,1428,1067,
            57,2010,1,1,1,1,2010,1,1719,63,
            206,3421,1,1,3421,2010,1046,1025,1004,983,
            962,920,941,899,878,857,1,2010,2013,1,
            1,1,1,1,1,1,1,56,1,55,
            1,253,2010,2021,1810,1752,2022,53,2023,2013,
            220,2010,52,1744,1736,2010,2016,721,1576,1459,
            2020,624,1554,1576,1459,2010,2010,1760,2326,3368,
            828,687,609,2024,2025,2026,1722,1428,1,2021,
            1810,1752,2022,2010,2023,1486,1472,1829,2015,1744,
            1736,1416,1,253,2236,1553,2010,2016,624,1554,
            624,1554,2268,1760,2268,3368,828,687,609,2024,
            2025,2026,1722,1428,2010,2021,1810,1752,2022,2010,
            2023,2019,1,1,2018,1744,1736,2020,222,2015,
            1260,2010,208,2021,2010,721,2022,69,2010,1760,
            2344,3368,828,687,609,2024,2025,2026,1722,1428,
            2010,2021,1810,1752,2022,2010,2023,2010,1587,207,
            752,1744,1736,752,1151,2010,2021,1836,1752,2022,
            207,2023,2010,2010,2017,1760,1744,1736,828,687,
            609,2024,2025,2026,1722,1428,285,2267,2019,2010,
            1760,544,2010,828,687,609,2024,2025,2026,1722,
            1428,1,2021,1810,1752,2022,3341,2023,353,352,
            1825,1853,1744,1736,2364,2364,1364,2010,2010,1806,
            292,2010,189,2364,2010,1681,1760,1191,201,828,
            687,609,2024,2025,2026,1722,1428,2010,189,189,
            2010,544,2010,2010,2010,2224,2225,2226,700,185,
            2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,
            543,2345,248,2010,2010,184,206,2010,2010,2010,
            2224,2225,2226,2010,2010,2330,2331,2332,2333,2334,
            2335,2336,2337,2338,2339,543,2345,251,1702,2010,
            2010,1231,2010,2010,2010,2224,2225,2226,2010,2010,
            2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,
            543,2345,252,2010,2010,2010,2010,2010,2010,2010,
            2224,2225,2226,2010,2010,2330,2331,2332,2333,2334,
            2335,2336,2337,2338,2339,543,2345
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            288,1,88,41,88,88,88,88,88,88,
            88,88,88,3,449,23,20,27,25,33,
            31,35,34,37,36,9,88,449,501,501,
            306,88,272,272,384,449,88,88,88,88,
            88,88,88,88,88,88,88,88,88,88,
            88,88,88,88,88,88,88,88,88,88,
            88,88,88,88,88,88,272,272,45,52,
            431,70,333,270,269,230,122,244,66,244,
            66,66,244,66,244,463,169,20,20,25,
            25,25,25,23,23,31,27,27,34,33,
            280,36,35,68,166,68,384,431,73,45,
            214,106,272,390,336,123,66,501,501,66,
            501,88,166,50,431,252,214,45,105,70,
            272,267,463,271,338,272,68,125,68,282,
            50,252,252,88,88,45,106,440,333,326,
            325,431,338,272,68,125,282,282,284,381,
            252,214,45,45,440,272,390,336,267,125,
            166,275,125,282,284,504,284,166,48,507,
            501,88,380,214,252,435,433,433,103,435,
            338,125,277,284,166,88,501,3,52,45,
            501,88,252,123,123,321,272,271,166,329,
            88,328,101,431,166,45,272,272,502,435,
            502,277,88,101,271,502
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            102,0,7,2,68,89,28,29,75,92,
            93,94,95,96,98,97,99,100,101,3,
            69,70,11,12,62,61,71,72,73,74,
            76,77,25,78,79,80,55,66,90,91,
            63,37,102,36,65,5,0,5,55,7,
            68,28,29,25,3,11,12,34,35,30,
            2,6,31,32,33,1,4,27,0,65,
            5,26,8,9,10,13,14,15,16,17,
            18,19,20,21,22,23,24,6,31,32,
            33,4,28,29,25,11,12,34,35,30,
            3,1,2,0,26,65,5,28,29,25,
            3,11,12,34,35,30,1,4,31,32,
            33,2,6,0,38,43,8,44,58,39,
            45,40,46,47,41,9,48,49,26,59,
            42,60,50,51,10,52,53,54,1,4,
            13,14,15,16,17,18,19,56,20,21,
            22,57,23,24,67,5,55,0,26,42,
            41,40,39,38,68,89,28,29,25,11,
            12,69,70,61,62,71,72,73,74,76,
            77,78,79,80,90,91,75,92,93,94,
            95,96,97,98,99,100,101,36,5,7,
            2,3,37,8,9,10,13,14,15,16,
            17,18,19,20,21,22,23,24,0,51,
            43,48,46,47,45,44,49,50,52,53,
            54,57,56,63,66,42,39,26,38,41,
            40,8,9,10,13,14,15,16,17,18,
            19,20,21,22,23,24,3,1,2,7,
            36,37,5,0,66,5,3,1,2,63,
            0,1,4,5,55,36,0,30,6,31,
            32,33,1,4,2,28,29,25,3,11,
            12,34,35,67,0,30,6,31,32,33,
            4,2,28,29,25,3,11,12,34,35,
            1,37,5,0,2,37,7,63,66,5,
            36,0,3,2,7,37,5,38,43,8,
            44,58,39,45,40,46,47,41,9,48,
            49,26,59,42,60,50,51,10,52,53,
            54,1,4,13,14,15,16,17,18,19,
            56,20,21,22,57,23,24,64,0,75,
            7,68,0,5,37,3,2,7,0,38,
            43,8,44,58,39,45,40,46,47,41,
            9,48,49,26,59,42,60,50,51,10,
            52,53,54,1,4,13,14,15,16,17,
            18,19,56,20,21,22,57,23,24,64,
            3,0,6,2,5,63,36,37,66,81,
            82,83,84,85,86,87,88,0,30,6,
            31,32,33,2,28,29,25,3,11,12,
            34,35,58,59,60,51,43,48,46,47,
            45,44,49,50,52,53,54,57,56,42,
            39,26,38,41,24,23,13,14,15,16,
            17,18,19,20,21,22,8,9,10,40,
            4,1,0,5,36,55,75,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static char nasb[] = {0,
            94,44,27,44,27,27,27,27,27,27,
            27,27,27,44,120,44,44,44,44,44,
            44,44,44,44,44,44,27,120,52,52,
            97,121,48,48,101,1,27,27,27,27,
            27,27,27,27,27,27,27,27,27,27,
            27,27,121,27,27,27,27,27,27,27,
            27,27,27,27,27,27,48,48,58,90,
            15,56,100,9,9,70,18,71,22,71,
            76,76,71,75,71,65,44,44,44,44,
            44,44,44,44,44,44,44,44,44,44,
            44,44,44,91,43,44,114,44,60,58,
            107,57,48,109,47,18,7,7,7,7,
            7,27,11,43,44,85,107,58,57,20,
            48,38,29,44,111,48,54,43,44,43,
            25,85,43,27,27,58,57,43,37,9,
            9,15,111,48,44,126,43,7,78,13,
            43,107,58,58,63,48,109,47,80,43,
            11,87,134,7,78,44,44,11,24,44,
            7,27,105,107,20,50,118,118,44,44,
            130,126,40,78,11,27,7,45,26,58,
            7,27,20,118,118,47,48,48,11,88,
            27,44,40,15,11,58,48,48,73,44,
            44,40,27,82,48,124
        };
    };
    public final static char nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            83,81,80,70,79,78,1,0,29,0,
            43,0,108,0,30,54,0,92,0,22,
            0,99,0,91,11,56,5,0,83,82,
            81,80,70,79,78,0,21,47,46,38,
            36,42,11,0,106,0,11,21,0,93,
            0,75,0,100,0,11,5,27,0,5,
            11,0,111,0,70,65,66,67,68,57,
            31,0,112,0,102,71,0,64,0,47,
            46,38,36,42,30,0,11,74,0,5,
            56,50,0,11,97,0,11,98,0,21,
            46,47,11,0,110,0,60,0,30,54,
            11,28,0,47,46,30,0,63,0,53,
            11,49,0,96,0,85,11,53,0,103,
            11,28,0,11,53,72,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,9,86,87,81,1,48,64,76,
            10,11,93,94,95,96,97,98,99,101,
            102,103,105,106,8,69,3,6,7,68,
            82,83,84,12,13,42,90,44,55,60,
            63,72,47,52,56,61,62,66,67,74,
            75,78,79,80,91,100,104,54,70,73,
            16,17,29,30,89,92,117,4,14,15,
            18,19,20,21,31,22,23,24,25,26,
            107,108,109,110,111,112,113,114,5,27,
            28,32,33,34,35,36,37,38,39,40,
            41,118,45,46,49,50,51,53,57,58,
            59,65,71,77,88,115,116
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            124,0,0,0,126,130,131,132,133,134,
            0,135,136,137,138,139,140,141,0,142,
            121,152,0,0,0,0,120,145,173,0,
            151,0,0,0,169,171,0,172,0,0,
            0,191,122,0,182,183,184,0,125,129,
            144,160,164,170,179,0,154,0,174,177,
            178,181,194,0,155,156,157,158,159,161,
            0,163,168,123,127,128,143,146,147,148,
            149,150,153,0,162,166,0,0,167,176,
            186,190,193,0,0,196,119,0,0,0,
            165,0,175,180,185,0,187,188,0,189,
            192,195,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            87,118,97,55,61,126,34,141,11,43,
            71,11,48,67,108,166,170,150,1,23,
            23,52,76,84,174,28,112,157,157,132,
            104,6,6,6,6,6
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            95,95,95,26,26,95,40,147,16,16,
            26,16,16,26,106,16,26,154,4,26,
            26,16,26,16,16,31,115,160,163,135,
            106,8,8,18,79,18
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            67,65,67,29,29,65,50,120,42,48,
            29,41,48,29,72,5,5,19,41,110,
            109,46,29,38,3,91,72,7,5,121,
            72,42,41,42,39,41
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            55,55,55,65,65,55,55,108,37,37,
            65,37,37,65,66,37,65,63,81,65,
            65,37,65,37,37,75,1,37,37,114,
            66,2,2,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            23,23,23,27,27,23,17,0,9,31,
            27,9,31,27,5,38,38,68,9,1,
            3,31,27,9,38,94,5,41,38,0,
            5,9,9,9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            128,159,0,228,0,155,0,2,138,0,
            176,128,2,155,0,138,0,2,128,176,
            138,0,168,7,0,144,0,224,128,0,
            75,186,0,181,222,128,27,173,0,160,
            223,0,176,128,2,163,0,176,128,2,
            0,179,2,0,137,26,207,128,7,0,
            137,207,128,26,7,0,137,26,7,0,
            137,207,128,7,0,137,7,0,2,128,
            220,138,0,169,2,0,181,205,128,27,
            118,219,58,0,160,0,181,205,128,27,
            219,58,0,170,0,191,0,218,128,170,
            0,128,170,0,218,191,0,201,128,27,
            217,118,216,187,0,201,128,27,216,187,
            0,233,107,0,114,2,166,138,191,0,
            233,138,166,2,111,0,108,233,0,166,
            91,135,0,63,137,0,193,2,0,138,
            124,0,138,167,0,215,2,122,0,166,
            7,122,0,166,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1732,0,511,0,1873,1909,1849,0,1637,1416,
            1553,1384,1352,623,1259,0,700,587,517,1258,
            1565,0,616,1252,482,0,1658,1657,1251,509,
            1352,623,1259,1798,1659,1768,0,828,687,609,
            1708,1689,1565,1341,1323,1401,1364,1486,1472,1437,
            1554,624,1542,1529,1518,574,1788,1780,1769,1576,
            1459,1760,1752,1744,1736,1722,1428,1231,1211,1191,
            700,1171,1151,1130,1109,800,1088,779,721,1067,
            1046,1025,1004,983,962,941,920,899,878,857,
            482,836,758,587,517,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,214,128,194,30,35,34,12,11,3,
            25,29,28,122,2,126,125,129,127,131,
            130,133,132,135,134,123,36,2,89,68,
            2,7,193,166,170,128,12,11,70,69,
            3,74,73,72,71,61,62,25,77,76,
            79,78,91,90,80,101,100,99,97,98,
            96,95,94,93,92,75,193,215,166,138,
            128,7,2,164,163,195,23,196,187,197,
            60,59,198,58,199,200,118,125,125,127,
            127,127,127,126,126,130,129,129,132,131,
            166,134,133,138,27,173,171,147,26,137,
            128,3,179,128,2,2,216,188,188,219,
            188,63,128,27,147,3,128,137,207,177,
            176,145,128,178,128,209,118,27,118,27,
            128,3,147,207,26,137,3,159,2,153,
            155,128,36,176,217,128,27,128,222,128,
            147,128,137,137,128,169,128,2,171,27,
            201,170,202,128,205,118,206,181,36,224,
            68,7,225,128,177,228,82,81,88,138,
            128,128,128,205,181,75,36,160,75,168,
            68,7,177,2,2,2,176,220,201,218,
            63,169,2,128,181,168,180,180,128,138,
            36,36,63,171,229,36
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "__data",
            "__near",
            "__xdata",
            "__far",
            "__idata",
            "__pdata",
            "__code",
            "__bit",
            "__sfr",
            "__sfr16",
            "__sfr32",
            "__sbit",
            "__at",
            "__banked",
            "__interrupt",
            "__using",
            "__reentrant",
            "__critical",
            "__naked",
            "__wparam",
            "__shadowregs",
            "__preserves__regs",
            "__asm",
            "__endasm",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_sizeof_type_id_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "and_expression",
            "exclusive_or_expression",
            "inclusive_or_expression",
            "logical_and_expression",
            "logical_or_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "initializer_seq",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "absolute_address",
            "original_function_direct_decla" +
            "rator",
            "sdcc_function_attributes",
            "sdcc_function_attribute",
            "integer_token",
            "preserves_regs_args",
            "preserves_regs_arg"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
